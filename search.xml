<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>🔔 如何接入github登录</title>
      <link href="/2025/05/27/login-github/"/>
      <url>/2025/05/27/login-github/</url>
      
        <content type="html"><![CDATA[<p>github登录通过<strong>OAuth</strong>协议接入第三方平台，用户无需注册新账号。下面详细介绍一下接入流程。</p><h1 id="创建-GitHub-OAuth-应用"><a href="#创建-GitHub-OAuth-应用" class="headerlink" title="创建 GitHub OAuth 应用"></a>创建 GitHub OAuth 应用</h1><p>访问 <a href="https://github.com/settings/developers">GitHub Developer Settings</a> 创建新应用。填写 <code>Application name</code>、<code>Homepage URL</code>、<code>Authorization callback URL</code>。保存生成的<code>Client ID</code> 和 <code>Client Secret</code>。</p><p>&#x3D;&#x3D;！Client Secret 需要另外记录下来，它只在生成的时候可见。&#x3D;&#x3D;</p><h1 id="跳转到授权页"><a href="#跳转到授权页" class="headerlink" title="跳转到授权页"></a>跳转到授权页</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;https://github.com/login/oauth/authorize?client_id=Ov23li276DdOmpC29BIR&amp;scope=read:user&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否登录，如果没有登录则跳转到 github 的登录授权页。</p><h1 id="授权后返回code"><a href="#授权后返回code" class="headerlink" title="授权后返回code"></a>授权后返回code</h1><p>第一步填写了<code>Authorization callback URL</code>，所以用户授权后会返回此页面。在此页面中，可以从url的query参数中拿到<code>code</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const urlParams = new URLSearchParams(window.location.search);</span><br><span class="line">  const code = urlParams.get(&#x27;code&#x27;);</span><br></pre></td></tr></table></figure><h1 id="后端用code换取Access-Token"><a href="#后端用code换取Access-Token" class="headerlink" title="后端用code换取Access Token"></a>后端用code换取Access Token</h1><p>前端将上一步的<code>code</code>传递给后端。<br>后端用此<code>code</code>获取<code>Access Token</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; code &#125; = req.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>();</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;client_id&#x27;</span>, process.<span class="property">env</span>.<span class="property">GITHUB_CLIENT_ID</span>);</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;client_secret&#x27;</span>, process.<span class="property">env</span>.<span class="property">GITHUB_CLIENT_SECRET</span>);</span><br><span class="line">params.<span class="title function_">append</span>(<span class="string">&#x27;code&#x27;</span>, code);</span><br><span class="line"><span class="keyword">const</span> tokenRes = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://github.com/login/oauth/access_token&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: params.<span class="title function_">toString</span>(),</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  agent,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line"><span class="keyword">if</span> (tokenRes.<span class="property">error</span> === <span class="string">&#x27;bad_verification_code&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">jsonFail</span>(<span class="string">&#x27;code无效&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> accessToken = tokenRes.<span class="property">access_token</span>;</span><br></pre></td></tr></table></figure><h1 id="用Access-Token获取用户信息"><a href="#用Access-Token获取用户信息" class="headerlink" title="用Access Token获取用户信息"></a>用Access Token获取用户信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const userInfo = await fetch(&#x27;https://api.github.com/user&#x27;, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Authorization: `Bearer $&#123;accessToken&#125;`,</span><br><span class="line">    &#x27;User-Agent&#x27;: process.env.APP_NAME,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).then(res =&gt; res.json());</span><br></pre></td></tr></table></figure><h1 id="存储用户信息并返回"><a href="#存储用户信息并返回" class="headerlink" title="存储用户信息并返回"></a>存储用户信息并返回</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let user = await User.findOne(&#123; name: userInfo.login &#125;);</span><br><span class="line">if (!user) &#123;</span><br><span class="line">  user = await User.create(&#123;</span><br><span class="line">    name: userInfo.login,</span><br><span class="line">    avatar: userInfo.avatar_url,</span><br><span class="line">    githubUrl: userInfo.html_url,</span><br><span class="line">    token: accessToken,</span><br><span class="line">    createdAt: Date.now(),</span><br><span class="line">    lastLoginAt: Date.now(),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  user.lastLoginAt = Date.now();</span><br><span class="line">  await user.save();</span><br><span class="line">&#125;</span><br><span class="line">res.jsonSuccess(user);</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>接入github登录的流程总结如下：<br>1.创建GitHub OAuth应用<br>2.点击按钮，跳转至GitHub授权页<br>3.用户点击授权后，返回code<br>4.携带code请求后端，后端用code换取Access Token，并用Access Token获取用户信息<br>5.后端返回用户信息</p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>💎 使用 Maplibre 开发地图</title>
      <link href="/2025/05/25/maplibre-guide/"/>
      <url>/2025/05/25/maplibre-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Maplibre-gl是一个<strong>开源</strong>的js库，用于在网页中创建高性能、交互式的地图应用。Maplibre-gl是<code>Mapbox GL JS</code>的免费替代品，提供与 Mapbox GL JS 类似的功能，同时坚持完全开源。</p><p>使用场景：</p><ul><li>GIS 系统：构建地理信息分析工具。</li><li>数据可视化：在地图上叠加热力图、轨迹、点云等数据。</li><li>室内地图：支持自定义楼层平面图和导航。</li><li>移动应用：通过 React Native 集成到跨平台应用中。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20250514231301.png" alt="地图"></p><p>核心特性：</p><ol><li><p>矢量切片（Vector Tiles）支持<br> 使用矢量地图数据（而非传统栅格图块），允许动态样式调整和高分辨率渲染。<br> 支持 .pbf 格式的矢量切片，兼容多种数据源（如 OpenStreetMap、自定义数据）。</p></li><li><p>WebGL 加速渲染<br> 基于 WebGL 技术，实现高性能的地图渲染，适合处理复杂地图样式和大规模数据。</p></li><li><p>动态样式与交互<br> 通过 JSON 格式定义地图样式（如颜色、图标、文字等），支持实时更新。<br> 支持鼠标&#x2F;触摸交互（缩放、拖拽、旋转、倾斜等）。</p></li><li><p>跨平台兼容<br> 可在浏览器和移动端（通过 React Native 等框架）使用。</p></li><li><p>插件生态<br> 兼容 Mapbox GL JS 的插件（如地图控件、标记点、动画效果等）。<br> 提供额外功能扩展，例如地理编码、3D 地形等。</p></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>第一步，npm安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install maplibre-gl</span><br><span class="line">npm install @types/maplibre-gl --save-dev <span class="comment"># ts</span></span><br></pre></td></tr></table></figure><p>第二步，创建地图容器，必须明确指定宽高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;mapContainerRef&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 100vh;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步，渲染地图</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> maplibregl <span class="keyword">from</span> <span class="string">&#x27;maplibre-gl&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;maplibre-gl/dist/maplibre-gl.css&#x27;</span>; <span class="comment">// 必须引入样式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapContainer = <span class="title function_">ref</span>(<span class="literal">null</span>); <span class="comment">// 地图容器引用</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="title function_">ref</span>(<span class="literal">null</span>); <span class="comment">// 地图实例</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 确保容器已渲染</span></span><br><span class="line">  <span class="keyword">if</span> (!mapContainer.<span class="property">value</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化地图</span></span><br><span class="line">  map.<span class="property">value</span> = <span class="keyword">new</span> maplibregl.<span class="title class_">Map</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: mapContainer.<span class="property">value</span>, <span class="comment">// 绑定容器</span></span><br><span class="line">    <span class="attr">style</span>: <span class="string">&#x27;https://demotiles.maplibre.org/style.json&#x27;</span>, <span class="comment">// 默认地图样式</span></span><br><span class="line">    <span class="attr">center</span>: [<span class="number">116.4</span>, <span class="number">39.9</span>], <span class="comment">// 初始中心点（示例为北京）</span></span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">10</span> <span class="comment">// 初始缩放级别</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 销毁地图实例，避免内存泄漏</span></span><br><span class="line">  map.<span class="property">value</span> &amp;&amp; map.<span class="property">value</span>.<span class="title function_">remove</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="自定义地图"><a href="#自定义地图" class="headerlink" title="自定义地图"></a>自定义地图</h1><h2 id="瓦片图Tile-Map"><a href="#瓦片图Tile-Map" class="headerlink" title="瓦片图Tile Map"></a>瓦片图Tile Map</h2><p>第一步，将一张大图切分位瓦片图。<br>地图通常都非常大，所以需要按照详细程度切分成不同等级的图片，根据缩放情况显示不同等级的图片，切分出来的一张张小图就是瓦片图。</p><p>瓦片图整体呈现出<strong>金字塔</strong>形式。<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20250514231314.png" alt="金字塔瓦片"></p><p>瓦片命名通常遵循 <code>&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png</code> 格式，其中z表示缩放级别，x和y表示瓦片坐标。切出来的瓦片图也以z&#x2F;x&#x2F;y的层级存放。<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20250514231351.png" alt="瓦片图目录"></p><p>如何把不同编号的瓦片图放到对应位置，不同标准有不同规则。<br>谷歌XYZ：z表示缩放层级，x从左往右，y从上往下；<br>TMS：z表示缩放层级，x从左往右，y从下往上；</p><p>瓦片图的主要特点：<br>分块加载：地图被切分成小块（通常是<strong>256×256</strong>像素），按需加载可视区域内的瓦片。<br>多级缩放：每个缩放级别({z})都有一套完整的瓦片，缩放级别越高，瓦片数量越多，细节越丰富。<br>坐标定位：每个瓦片通过坐标({x},{y})和缩放级别({z})唯一标识。<br>按需请求：只加载视口内可见的瓦片，节省带宽和提高性能。</p><h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><p>切分有多种方式，比如图形界面MapTiler、gdal2tiles.py命令行工具、python库等。<br>如果只是一张普通的图片，推荐<code>gdal2tiles.py</code>。</p><p>第一步，安装GDAL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows (使用 conda)</span></span><br><span class="line">conda install -c conda-forge gdal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用 pip</span></span><br><span class="line"><span class="comment"># Microsoft Visual C++ 14.0 or greater is required</span></span><br><span class="line">pip install gdal</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu/Debian 推荐</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install gdal-bin python3-gdal</span><br></pre></td></tr></table></figure><p>验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal2tiles.py --version</span><br></pre></td></tr></table></figure><p>如果提示：The program ‘gdal2tiles.py’ is currently not installed. You can install it by typing: apt install python-gdal，则执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install python-gdal</span><br></pre></td></tr></table></figure><p>第二步，生成tif文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 坐标系为WGS84经纬度 普通图片推荐这个</span></span><br><span class="line">gdal_translate -of GTiff -a_ullr 0 [img width] [img height] 0 -a_srs EPSG:4326 input.png output.tif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 坐标系为web墨卡托投影</span></span><br><span class="line">gdal_translate -a_ullr -20037508.34 20037508.34 20037508.34 -20037508.34 -a_srs EPSG:3857 input.png output.tif</span><br></pre></td></tr></table></figure><p>EPSG坐标参考系统</p><ul><li><p>EPSG:4326 - WGS84经纬度<br>全球定位系统(GPS)使用的坐标系<br>坐标表示为经度&#x2F;纬度度数<br>适用于全球范围的数据<br>非投影坐标系，不适合直接测量距离或面积<br>坐标范围：经度[-180, 180]，纬度[-90, 90]<br>坐标单位：度</p></li><li><p>EPSG:3857 - Web墨卡托投影<br>Google Maps、OpenStreetMap等网络地图使用<br>坐标以米为单位表示<br>适合网页显示但在极地区域有严重变形<br>坐标范围：x轴[-20037508.34, 20037508.34]，y轴[-20037508.34, 20037508.34]<br>对应坐标：经度[-180， 180]，纬度[-85.0511, 85.0511]<br>坐标单位：米</p></li></ul><p>第三步，生成瓦片图</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdal2tiles.py -p raster -z 0-6  output.tif outputDir</span><br></pre></td></tr></table></figure><p>-p 指定坐标系统<br>raster：简单像素坐标，适合游戏系统；<br>mercator：默认，适合网页地图；<br>geodetic：WGS84</p><p>-z 指定缩放层级范围<br>也可以只设置为一个数字，表示生成该层级图片。</p><h2 id="部署地图服务"><a href="#部署地图服务" class="headerlink" title="部署地图服务"></a>部署地图服务</h2><p>以node为例。<br>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-images</span><br><span class="line">-app.js</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/images&#x27;</span>, express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;images&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务已启动：http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="maplibregl-Map-的配置项"><a href="#maplibregl-Map-的配置项" class="headerlink" title="maplibregl.Map()的配置项"></a>maplibregl.Map()的配置项</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="property">value</span> = <span class="keyword">new</span> maplibregl.<span class="title class_">Map</span>(&#123;</span><br><span class="line">    <span class="attr">container</span>: mapContainerRef.<span class="property">value</span>,</span><br><span class="line">    <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">version</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Simple Style&#x27;</span>,</span><br><span class="line">        <span class="attr">sources</span>: &#123;</span><br><span class="line">            <span class="attr">background</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;raster&#x27;</span>,</span><br><span class="line">                <span class="attr">tiles</span>: [<span class="string">&#x27;/api/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;</span>],</span><br><span class="line">                <span class="attr">tileSize</span>: <span class="number">256</span>,</span><br><span class="line">                <span class="attr">minzoom</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">maxzoom</span>: <span class="number">6</span>,</span><br><span class="line">                <span class="attr">scheme</span>: <span class="string">&#x27;tms&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">points</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;geojson&#x27;</span>,</span><br><span class="line">                <span class="attr">data</span>: &#123;</span><br><span class="line">                    <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">                    <span class="attr">features</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">type</span>: <span class="string">&#x27;Feature&#x27;</span>,</span><br><span class="line">                            <span class="attr">properties</span>: &#123;<span class="attr">title</span>: <span class="string">&#x27;这是一个数据点&#x27;</span>&#125;,</span><br><span class="line">                            <span class="attr">geometry</span>: &#123;</span><br><span class="line">                                <span class="attr">type</span>: <span class="string">&#x27;Point&#x27;</span>,</span><br><span class="line">                                <span class="attr">coordinates</span>: [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">layers</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;background-layer&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;raster&#x27;</span>,</span><br><span class="line">            <span class="attr">source</span>: <span class="string">&#x27;background&#x27;</span>,</span><br><span class="line">            <span class="attr">paint</span>: &#123;</span><br><span class="line">              <span class="string">&#x27;raster-opacity&#x27;</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">glyphs</span>: <span class="string">&#x27;https://demotiles.maplibre.org/font/&#123;fontstack&#125;/&#123;range&#125;.pbf&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">renderWorldCopies</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">attributionControl</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>container</code>的参数可以是DOM元素，或者元素的id。该元素不能有子元素。<br><code>zoom</code>表示初始缩放级别，默认为0。<br><code>renderWorldCopies</code>表示在左右方向是否重复渲染地图，默认为true。<br><code>attributionControl</code>表示是否在页面上显示库信息，默认为true。</p><p><code>style.sources</code>定义资源，包含底图和数据源，也可以通过<code>addSource</code>方法添加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &#x27;raster&#x27; | &#x27;vector&#x27; | &#x27;geojson&#x27; | &#x27;image&#x27; | &#x27;video&#x27; | &#x27;raster-dem&#x27;</span><br></pre></td></tr></table></figure><p>raster 瓦片地图<br>vector 矢量地图<br>geojson 数据点列表<br>image 单一图片<br>video 视频<br>raster-dem 三维地图</p><p><code>tileSize</code> 每张瓦片的大小。<br><code>scheme</code> 坐标系统，默认值xyz。GDAL2Tiles默认使用TMS坐标系统，而大多数查看器默认使用XYZ格式。</p><p><code>coordinates</code>定义数据点的坐标，x轴取值范围是[-180, 180]，y轴取值范围是[-85.051129, 85.051129]。y轴取值来自于<code>arctan(sinh(π)) * (180/π)</code>，是墨卡托投影在数学上的极限。<br>理论上 GeoJSON 允许 [-90, 90]，但 MapLibre GL 默认使用 Web Mercator 投影（EPSG:3857），其纬度范围被限制在 ±85.0511°。超出此范围的坐标会被截断或导致渲染问题。</p><p><code>style.layers</code>定义图层，可以通过<code>addLayer</code>方法添加。<br><code>source</code>的值必定是<code>style.sources</code>中的某一个。<br><code>type</code>的值有以下类型：<br>background 地图背景颜色。<br>fill 填充多边形区域。<br>line 线条。<br>symbol 文本标签和图标。<br>raster 栅格瓦片图层。<br>circle 圆点。<br>fill-extrusion 3D多边形。<br>heatmap 热力图。<br>hillshade 地形阴影。<br>sky 天空盒。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;background&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;background&#x27;</span>,</span><br><span class="line">  <span class="attr">paint</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;#f8f4f0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;background-opacity&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;place-labels&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;symbol&#x27;</span>,</span><br><span class="line">  <span class="attr">source</span>: <span class="string">&#x27;mapdata&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;source-layer&#x27;</span>: <span class="string">&#x27;places&#x27;</span>,</span><br><span class="line">  <span class="attr">layout</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;text-field&#x27;</span>: [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;text-size&#x27;</span>: <span class="number">12</span>,</span><br><span class="line">    <span class="string">&#x27;icon-image&#x27;</span>: <span class="string">&#x27;marker&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;text-offset&#x27;</span>: [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;poi-markers&#x27;</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line">  <span class="attr">source</span>: <span class="string">&#x27;points&#x27;</span>,</span><br><span class="line">  <span class="attr">paint</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;circle-radius&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">&#x27;circle-color&#x27;</span>: <span class="string">&#x27;#3887be&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;circle-stroke-width&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;circle-stroke-color&#x27;</span>: <span class="string">&#x27;#ffffff&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般后添加的layer在上层，但某些图层有内置的优先级，比如热力图在下面，symbol在上面。<br><code>map.addLayer</code>的第二个参数为beforeId，指要把新图层设置为id为beforeId的图层的下面。<br>推荐图层顺序：background、raster、hillshade、heatmap、fill、fill-extrusion、line、circle、symbol、sky。</p><p><code>glyphs</code> 字体文件。</p><h1 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h1><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20250514231301.png" alt="热力图"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">map.<span class="property">value</span>.<span class="title function_">addSource</span>(<span class="string">&#x27;points&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;geojson&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">        features</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加热力图</span></span><br><span class="line">map.<span class="property">value</span>.<span class="title function_">addLayer</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;heatmap&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;heatmap&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;points&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;maxzoom&#x27;</span>: <span class="number">9</span>,</span><br><span class="line">      <span class="string">&#x27;paint&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;heatmap-weight&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;heatmap-intensity&#x27;</span>: [</span><br><span class="line">          <span class="string">&#x27;interpolate&#x27;</span>,</span><br><span class="line">          [<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;zoom&#x27;</span>],</span><br><span class="line">          <span class="number">0</span>,</span><br><span class="line">          <span class="number">1</span>,</span><br><span class="line">          <span class="number">9</span>,</span><br><span class="line">          <span class="number">3</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;heatmap-color&#x27;</span>: [</span><br><span class="line">          <span class="string">&#x27;interpolate&#x27;</span>,</span><br><span class="line">          [<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;heatmap-density&#x27;</span>],</span><br><span class="line">          <span class="number">0</span>,</span><br><span class="line">          <span class="string">&#x27;rgba(33,102,172,0)&#x27;</span>,</span><br><span class="line">          <span class="number">0.2</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(103,169,207)&#x27;</span>,</span><br><span class="line">          <span class="number">0.4</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(209,229,240)&#x27;</span>,</span><br><span class="line">          <span class="number">0.6</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(253,219,199)&#x27;</span>,</span><br><span class="line">          <span class="number">0.8</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(239,138,98)&#x27;</span>,</span><br><span class="line">          <span class="number">1</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(178,24,43)&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;heatmap-radius&#x27;</span>: [</span><br><span class="line">          <span class="string">&#x27;interpolate&#x27;</span>,</span><br><span class="line">          [<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;zoom&#x27;</span>],</span><br><span class="line">          <span class="number">0</span>,</span><br><span class="line">          <span class="number">2</span>,</span><br><span class="line">          <span class="number">9</span>,</span><br><span class="line">          <span class="number">20</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;heatmap-opacity&#x27;</span>: [</span><br><span class="line">          <span class="string">&#x27;interpolate&#x27;</span>,</span><br><span class="line">          [<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;zoom&#x27;</span>],</span><br><span class="line">          <span class="number">7</span>,</span><br><span class="line">          <span class="number">1</span>,</span><br><span class="line">          <span class="number">9</span>,</span><br><span class="line">          <span class="number">0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>heatmap-weight</code>定义每个数据点的影响强度，即单个点对整体密度的贡献程度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;heatmap-weight&#x27;</span>: <span class="number">0.5</span>  <span class="comment">// 所有点权重为0.5</span></span><br><span class="line"><span class="string">&#x27;heatmap-weight&#x27;</span>: [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;importance&#x27;</span>]  <span class="comment">// 使用每个点的importance属性</span></span><br><span class="line"><span class="string">&#x27;heatmap-weight&#x27;</span>: [</span><br><span class="line">  <span class="string">&#x27;interpolate&#x27;</span>, [<span class="string">&#x27;linear&#x27;</span>], [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;point_count&#x27;</span>],</span><br><span class="line">  <span class="number">0</span>, <span class="number">0</span>,       <span class="comment">// 当point_count为0时，权重为0</span></span><br><span class="line">  <span class="number">5</span>, <span class="number">0.5</span>,     <span class="comment">// 当point_count为5时，权重为0.5</span></span><br><span class="line">  <span class="number">10</span>, <span class="number">1</span>       <span class="comment">// 当point_count为10或更高时，权重为1</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>heatmap-intensity</code>控制热力图的整体强度，影响热力图的饱和度或亮度。取值通常在0-3，默认为1，高值更亮，适合数据点稀疏的情况，低值适合数据点密集的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;heatmap-intensity&#x27;</span>: <span class="number">3</span></span><br><span class="line"><span class="string">&#x27;heatmap-intensity&#x27;</span>: [</span><br><span class="line">  <span class="string">&#x27;interpolate&#x27;</span>,</span><br><span class="line">  [<span class="string">&#x27;linear&#x27;</span>], <span class="comment">// 中间按线性比例插值</span></span><br><span class="line">  [<span class="string">&#x27;zoom&#x27;</span>],</span><br><span class="line">  <span class="number">0</span>, <span class="number">1</span>, <span class="comment">// 低缩放级别，低强度</span></span><br><span class="line">  <span class="number">9</span>, <span class="number">3</span> <span class="comment">// 高缩放级别，高强度</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>heatmap-radius</code>控制每个数据点的影响半径。<br><code>heatmap-opacity</code>控制热力图的透明度。<br><code>heatmap-color</code>定义热力图的颜色渐变。</p><h1 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h1><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20250514231610.png" alt="聚类"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加数据点</span></span><br><span class="line">map.<span class="property">value</span>.<span class="title function_">addSource</span>(<span class="string">&#x27;clusteredPoints&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;geojson&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">      features</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cluster</span>: <span class="literal">true</span>, <span class="comment">// 是否启用聚类</span></span><br><span class="line">    <span class="attr">clusterRadius</span>: <span class="number">50</span>, <span class="comment">// 聚类半径</span></span><br><span class="line">    <span class="attr">clusterMaxZoom</span>: <span class="number">14</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚类 添加圆圈，按聚合的数据点的数量设置不同颜色</span></span><br><span class="line">map.<span class="property">value</span>.<span class="title function_">addLayer</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;clusters&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>: <span class="string">&#x27;clusteredPoints&#x27;</span>,</span><br><span class="line">    <span class="attr">filter</span>: [<span class="string">&#x27;has&#x27;</span>, <span class="string">&#x27;point_count&#x27;</span>],</span><br><span class="line">    <span class="attr">paint</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;circle-color&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;step&#x27;</span>,</span><br><span class="line">        [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;point_count&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;#51bbd6&#x27;</span>,</span><br><span class="line">        <span class="number">100</span>,</span><br><span class="line">        <span class="string">&#x27;#f1f075&#x27;</span>,</span><br><span class="line">        <span class="number">750</span>,</span><br><span class="line">        <span class="string">&#x27;#f28cb1&#x27;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&#x27;circle-radius&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;step&#x27;</span>,</span><br><span class="line">        [<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;point_count&#x27;</span>],</span><br><span class="line">        <span class="number">20</span>,</span><br><span class="line">        <span class="number">100</span>,</span><br><span class="line">        <span class="number">30</span>,</span><br><span class="line">        <span class="number">750</span>,</span><br><span class="line">        <span class="number">40</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 聚类 圆圈上显示数据点的个数</span></span><br><span class="line">  map.<span class="property">value</span>.<span class="title function_">addLayer</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;cluster-count&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;symbol&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>: <span class="string">&#x27;clusteredPoints&#x27;</span>,</span><br><span class="line">    <span class="attr">filter</span>: [<span class="string">&#x27;has&#x27;</span>, <span class="string">&#x27;point_count&#x27;</span>],</span><br><span class="line">    <span class="attr">layout</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;text-field&#x27;</span>: <span class="string">&#x27;&#123;point_count_abbreviated&#125;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-size&#x27;</span>: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 非聚类 独立的数据点  缩放到数据点不能被聚合时，单独显示数据点</span></span><br><span class="line">  map.<span class="property">value</span>.<span class="title function_">addLayer</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;unclustered-point&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;circle&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>: <span class="string">&#x27;clusteredPoints&#x27;</span>,</span><br><span class="line">    <span class="attr">filter</span>: [<span class="string">&#x27;!&#x27;</span>, [<span class="string">&#x27;has&#x27;</span>, <span class="string">&#x27;point_count&#x27;</span>]],</span><br><span class="line">    <span class="attr">paint</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;circle-color&#x27;</span>: <span class="string">&#x27;#11b4da&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;circle-radius&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">      <span class="string">&#x27;circle-stroke-width&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;circle-stroke-color&#x27;</span>: <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="监听地图事件"><a href="#监听地图事件" class="headerlink" title="监听地图事件"></a>监听地图事件</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.<span class="property">value</span>.<span class="title function_">on</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="string">&#x27;clusters&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    map.<span class="property">value</span>.<span class="title function_">getCanvas</span>().<span class="property">style</span>.<span class="property">cursor</span> = <span class="string">&#x27;pointer&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第一个参数是事件类型，第二个参数是事件绑定的图层（可选），第三个参数是事件回调。<br>常用的事件类型：mouseenter、mouseleave、click等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击数据点 显示弹窗，弹窗中显示数据点参数信息</span></span><br><span class="line">map.<span class="property">value</span>.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;unclustered-point&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> coordinates = e.<span class="property">features</span>[<span class="number">0</span>].<span class="property">geometry</span>.<span class="property">coordinates</span>.<span class="title function_">slice</span>();</span><br><span class="line">    <span class="keyword">const</span> properties = e.<span class="property">features</span>[<span class="number">0</span>].<span class="property">properties</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(e.<span class="property">lngLat</span>.<span class="property">lng</span> - coordinates[<span class="number">0</span>]) &gt; <span class="number">180</span>) &#123;</span><br><span class="line">      coordinates[<span class="number">0</span>] += e.<span class="property">lngLat</span>.<span class="property">lng</span> &gt; coordinates[<span class="number">0</span>] ? <span class="number">360</span> : -<span class="number">360</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> maplibregl.<span class="title class_">Popup</span>()</span><br><span class="line">      .<span class="title function_">setLngLat</span>(coordinates)</span><br><span class="line">      .<span class="title function_">setHTML</span>(</span><br><span class="line">        <span class="string">`title: <span class="subst">$&#123;properties.title&#125;</span>&lt;br&gt;description: <span class="subst">$&#123;properties.description&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">addTo</span>(map.<span class="property">value</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="数据切片"><a href="#数据切片" class="headerlink" title="数据切片"></a>数据切片</h1><p>如果数据量巨大，比如五十万以上，必须要将数据在服务器进行切片生成矢量瓦片数据，不然页面卡顿、崩溃。<br>以node为例，我们需要先用<code>geojson-vt</code>将<code>geojson</code>格式数据转换成mvt格式数据，然后用<code>vt-pbf</code>压缩数据。</p><h2 id="普通矢量瓦片"><a href="#普通矢量瓦片" class="headerlink" title="普通矢量瓦片"></a>普通矢量瓦片</h2><p>第一步，安装依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i geojson-vt vt-pbf</span><br></pre></td></tr></table></figure><p>第二步，数据处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建索引</span></span><br><span class="line"><span class="keyword">let</span> tileIndex = <span class="literal">null</span>;</span><br><span class="line">tileIndex = <span class="title function_">geojsonvt</span>(geojsonData, &#123;</span><br><span class="line">    <span class="attr">maxZoom</span>: options.<span class="property">maxZoom</span> || <span class="number">14</span>, <span class="comment">// 最大缩放级别</span></span><br><span class="line">    <span class="attr">tolerance</span>: <span class="number">5</span>,          <span class="comment">// 容差更大，允许更多的简化</span></span><br><span class="line">    <span class="attr">extent</span>: <span class="number">4096</span>, <span class="comment">// 瓦片大小</span></span><br><span class="line">    <span class="attr">buffer</span>: <span class="number">512</span>,           <span class="comment">// 增加缓冲区</span></span><br><span class="line">    <span class="attr">debug</span>: <span class="number">0</span>, <span class="comment">// 调试级别</span></span><br><span class="line">    <span class="attr">lineMetrics</span>: <span class="literal">false</span>, <span class="comment">// 不计算线性度量</span></span><br><span class="line">    <span class="attr">promoteId</span>: <span class="literal">null</span>, <span class="comment">// 属性是否提升为ID</span></span><br><span class="line">    <span class="attr">generateId</span>: <span class="literal">true</span>, <span class="comment">// 不自动生成ID</span></span><br><span class="line">    <span class="attr">indexMaxZoom</span>: <span class="number">7</span>, <span class="comment">// 索引最大缩放级别</span></span><br><span class="line">    <span class="attr">indexMaxPoints</span>: <span class="number">500000</span>, <span class="comment">// 增加索引点数上限</span></span><br><span class="line">    <span class="attr">solidChildren</span>: <span class="literal">false</span>,     <span class="comment">// 确保子瓦片有数据</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/tiles/:z/:x/:y.pbf&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 转换</span></span><br><span class="line">    <span class="keyword">const</span> tile = tileIndex.<span class="title function_">getTile</span>(zoom, x, y);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    <span class="keyword">const</span> buffer = vtPbf.<span class="title function_">fromGeojsonVt</span>(&#123; <span class="string">&#x27;geojsonLayer&#x27;</span>: tile &#125;);</span><br><span class="line">    <span class="comment">// geojsonLayer是一个key，可以自定义。</span></span><br><span class="line">    <span class="comment">// geojsonLayer是addLayer时需要设置的source-layer的值。</span></span><br><span class="line">    <span class="comment">// addLayer使用geojson格式的数据时只需要设置source，使用vector格式数据时还需要设置source-layer。</span></span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">sendFile</span>(buffer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第三步，使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加source</span></span><br><span class="line">map.<span class="property">value</span>.<span class="title function_">addSource</span>(<span class="string">&#x27;points&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;vector&#x27;</span>,</span><br><span class="line">    <span class="attr">tiles</span>: [<span class="string">&#x27;http://localhost:3000/tiles/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.pbf&#x27;</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加layer</span></span><br><span class="line">map.<span class="property">value</span>.<span class="title function_">addLayer</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;heatmap&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;heatmap&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;points&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;source-layer&#x27;</span>: <span class="string">&#x27;geojsonLayer&#x27;</span>, <span class="comment">// add</span></span><br><span class="line">      <span class="string">&#x27;maxzoom&#x27;</span>: <span class="number">14</span>,</span><br><span class="line">      <span class="string">&#x27;paint&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;heatmap-weight&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;heatmap-intensity&#x27;</span>: [</span><br><span class="line">          <span class="string">&#x27;interpolate&#x27;</span>,</span><br><span class="line">          [<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;zoom&#x27;</span>],</span><br><span class="line">          <span class="number">0</span>,</span><br><span class="line">          <span class="number">1</span>,</span><br><span class="line">          <span class="number">9</span>,</span><br><span class="line">          <span class="number">2</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;heatmap-color&#x27;</span>: [</span><br><span class="line">          <span class="string">&#x27;interpolate&#x27;</span>,</span><br><span class="line">          [<span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">          [<span class="string">&#x27;heatmap-density&#x27;</span>],</span><br><span class="line">          <span class="number">0</span>,</span><br><span class="line">          <span class="string">&#x27;rgba(33,102,172,0)&#x27;</span>,</span><br><span class="line">          <span class="number">0.2</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(103,169,207)&#x27;</span>,</span><br><span class="line">          <span class="number">0.4</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(209,229,240)&#x27;</span>,</span><br><span class="line">          <span class="number">0.6</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(253,219,199)&#x27;</span>,</span><br><span class="line">          <span class="number">0.8</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(239,138,98)&#x27;</span>,</span><br><span class="line">          <span class="number">1</span>,</span><br><span class="line">          <span class="string">&#x27;rgb(178,24,43)&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;heatmap-radius&#x27;</span>: <span class="number">30</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="聚类矢量瓦片"><a href="#聚类矢量瓦片" class="headerlink" title="聚类矢量瓦片"></a>聚类矢量瓦片</h2><p>如果数据量巨大又要显示聚类，则需要在服务端聚类。<br>第一步，安装依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i supercluster</span><br></pre></td></tr></table></figure><p>第二步，聚类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// 创建索引</span><br><span class="line">let clusterIndex = null;</span><br><span class="line"></span><br><span class="line">// 生成随机点数据</span><br><span class="line">function generateRandomPoints(count = 10000 * 100) &#123;</span><br><span class="line">  const features = [];</span><br><span class="line"></span><br><span class="line">  for (let i = 0; i &lt; count; i++) &#123;</span><br><span class="line">    const lng = Math.random() * 360 - 180; // 经度范围：-180到180</span><br><span class="line">    const lat = Math.random() * 170 - 85; // 纬度范围：-85到85</span><br><span class="line"></span><br><span class="line">    features.push(&#123;</span><br><span class="line">      type: &#x27;Feature&#x27;,</span><br><span class="line">      properties: &#123;</span><br><span class="line">        id: i,</span><br><span class="line">        name: `点位 $&#123;i&#125;`,</span><br><span class="line">        pos: `$&#123;lng&#125;,$&#123;lat&#125;`</span><br><span class="line">      &#125;,</span><br><span class="line">      geometry: &#123;</span><br><span class="line">        type: &#x27;Point&#x27;,</span><br><span class="line">        coordinates: [lng, lat]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // !!! here</span><br><span class="line">  clusterIndex = new Supercluster(&#123;</span><br><span class="line">    radius: 50,         // 聚合像素半径</span><br><span class="line">    maxZoom: 18,        // 最大聚合层级</span><br><span class="line">    minZoom: 0,         // 最小聚合层级</span><br><span class="line">    map: props =&gt; (&#123;</span><br><span class="line">      count: props.count || 1 // 保留原始计数</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  clusterIndex.load(features);</span><br><span class="line"></span><br><span class="line">  const geojson = &#123;</span><br><span class="line">    type: &#x27;FeatureCollection&#x27;,</span><br><span class="line">    features</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return geojson;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步，处理数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/tiles/:z/:x/:y.pbf&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clusters = clusterIndex.<span class="title function_">getClusters</span>([-<span class="number">180</span>, -<span class="number">90</span>, <span class="number">180</span>, <span class="number">90</span>], z)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> tile = <span class="title function_">geojsonvt</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">        <span class="attr">features</span>: clusters</span><br><span class="line">    &#125;).<span class="title function_">getTile</span>(z, x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> buffer = vtPbf.<span class="title function_">fromGeojsonVt</span>(&#123; <span class="string">&#x27;geojsonLayer&#x27;</span>: tile &#125;);</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">sendFile</span>(buffer);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方法与普通切片相同。</p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>方法1：geojson格式数据可以压缩json。<br>方法2：根据缩放显示不同layer，低缩放等级只显示热力图，高缩放等级只显示聚类圆圈。<br>方法3：启用webgl2，需要判断浏览器是否支持。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://maplibre.chendx.com/">mapbox-gl 中文文档</a><br><a href="https://maplibre.org/maplibre-gl-js/docs/">maplibre-gl 官方文档</a><br><a href="https://github.com/mapbox/geojson-vt">geojson-vt插件</a><br><a href="https://github.com/mapbox/vt-pbf">vt-pbf插件</a></p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maplibre </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🎀用流式写入处理大文件下载</title>
      <link href="/2025/04/21/download-big-file/"/>
      <url>/2025/04/21/download-big-file/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>流式写入直接将数据流写入用户磁盘，避免传统方法(如<code>Blob</code>或<code>URL.createObjectURL</code>)因内存限制导致的大文件下载问题。<br><code>StreamSaver.js</code>库使用浏览器原生的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Streams_API">Streams API</a>，逐块写入数据到磁盘。通过 <code>Service Worker</code> 和中间人(<code>MITM</code>)技术，模拟服务器响应，绕过浏览器对下载文件大小的限制。而且，不需要服务端做任何修改。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><a href="https://github.com/jimmywarting/StreamSaver.js">StreamSaver文档</a>  </p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i streamsaver</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWriteStream &#125; <span class="keyword">from</span> <span class="string">&#x27;streamsaver&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileStream = <span class="title function_">createWriteStream</span>(<span class="string">&#x27;download.json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> writer = fileStream.<span class="title function_">getWriter</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">download</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> contentLength = response.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&#x27;content-length&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> receivedBytes = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> reader = response.<span class="property">body</span>.<span class="title function_">getReader</span>();</span><br><span class="line">    <span class="comment">// 分块处理</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; done, value &#125; = <span class="keyword">await</span> reader.<span class="title function_">read</span>();</span><br><span class="line">         <span class="keyword">if</span> (done) <span class="keyword">break</span>;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 写入文件流</span></span><br><span class="line">        <span class="keyword">await</span> writer.<span class="title function_">write</span>(value);</span><br><span class="line">          </span><br><span class="line">        <span class="comment">// 更新进度（如果有内容长度）</span></span><br><span class="line">        <span class="keyword">if</span> (contentLength) &#123;</span><br><span class="line">            receivedBytes += value.<span class="property">length</span>;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> writer.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol><li>用户点击下载按钮；</li><li>动态创建一个隐藏的iframe，加载MITM脚本；</li><li>MITM脚本在iframe中注册Service Worker，并声明其作用域；</li><li>主页面和iframe通过postMessage通信，传递数据快；</li><li>Service Worker接收数据，通过流式API写入本地文件；</li></ol><p>浏览器要求文件下载必须由用户主动触发，如点击事件。iframe的创建和MITM脚本的加载会在用户点击事件的同步上下文中完成。这样，后续通过iframe触发的下载操作仍然被视为用户手势的延续，避免被浏览器阻止。<br>浏览器默认禁止脚本直接操作本地文件系统，且下载操作通常需要与当前页面同源。该iframe的源被设置为一个独立的、与主页面不同的虚拟URL，从而创建一个“隔离的上下文”。这个隔离的上下文可以绕过主页面的一些安全策略，允许直接与Service Worker通信并触发下载。<br>Service Worker需要注册在特定的作用域下，且通常需要与页面同源。iframe中加载的MIMT脚本会动态注册一个Service Worker，并控制其作用域。通过将Service Worker隔离在iframe中，可以避免与主应用的Service Worker冲突，同时确保下载逻辑的独立性。<br>主页面通过postMessage向iframe发送数据库，iframe中的MIMT脚本将数据转发给Service Worker，Service Worker将数据流式写入磁盘。</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>因为通过iframe处理下载逻辑，生产环境需要使用<code>https</code>，否则会有不安全混合内容限制。<br>如果不是<code>https</code>，则 <code>StreamSaver</code> 会改用<code>popup</code>，下载时页面左上角会有小弹窗闪现。</p><h1 id="更好的方法"><a href="#更好的方法" class="headerlink" title="更好的方法"></a>更好的方法</h1><p>如果不考虑浏览器兼容性，可以用这个方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(...);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> reader = response.<span class="property">body</span>?.<span class="title function_">getReader</span>();</span><br><span class="line">    <span class="keyword">const</span> chunks = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; done, value &#125; = <span class="keyword">await</span> reader!.<span class="title function_">read</span>();</span><br><span class="line">      <span class="keyword">if</span> (done) <span class="keyword">break</span>;</span><br><span class="line">      chunks.<span class="title function_">push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>(chunks);</span><br><span class="line">    <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    link.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    link.<span class="property">download</span> = <span class="string">&#x27;download.zip&#x27;</span>;</span><br><span class="line">    link.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(link.<span class="property">href</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;导出失败&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>streamsaver</code>最好在https环境中使用，<code>getReader</code>可能不兼容旧浏览器。<br><code>streamsaver</code>先选择保存位置再下载，<code>getReader</code>先下载再选择保存位置。</p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双端拾词助手</title>
      <link href="/2025/03/08/word-grabber/"/>
      <url>/2025/03/08/word-grabber/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>这是一个帮助用户在日常中学习单词的软件，包含浏览器插件和微信小程序。</p><p>使用流程：<br>1.安装浏览器插件；<br>2.微信扫码登录小程序；<br>3.在网页中选中单词，即可获取翻译结果，可以收藏或取消收藏该单词；<br>4.在微信小程序中复习单词；</p><p>浏览器插件：</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/%E6%8D%95%E8%8E%B7.PNG" alt="收藏">    </p><p>微信小程序：</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20250308231025.png" alt="小程序"></p><h1 id="开发浏览器插件注意事项"><a href="#开发浏览器插件注意事项" class="headerlink" title="开发浏览器插件注意事项"></a>开发浏览器插件注意事项</h1><h2 id="content-js与background-js的区别"><a href="#content-js与background-js的区别" class="headerlink" title="content.js与background.js的区别"></a>content.js与background.js的区别</h2><p>content.js：</p><ul><li>直接与网页内容交互，可以修改网页结构、监听用户点击事件等；</li><li>无法访问页面的js变量或函数，请求受同源策略限制；</li><li>仅能调用部分Chrome API，如chrome.runtime.sendMessage、chrome.storage；</li><li>无法直接访问chrome.tabs或chrome.windows等涉及浏览器全局操作的API</li></ul><p>background.js：</p><ul><li>作为全局后台服务，负责处理跨域请求、调用高权限API（通知推送、浏览器标签管理等）；</li><li>生命周期与浏览器同步，支持跨域访问；</li><li>可调用所有Chrome API；</li></ul><h2 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h2><p>content -&gt; background</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// content script发送消息</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="title function_">sendMessage</span>(&#123; <span class="attr">action</span>: <span class="string">&quot;fetchData&quot;</span> &#125;, <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;收到后台响应:&quot;</span>, response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// background script监听</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="title function_">addListener</span>(<span class="function">(<span class="params">request, sender, sendResponse</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">action</span> === <span class="string">&quot;fetchData&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">sendResponse</span>(&#123; <span class="attr">data</span>: <span class="string">&quot;来自后台的数据&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>background -&gt; content<br>需通过chrome.tabs.sendMessage指定目标标签页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chrome.tabs.query(&#123; active: true &#125;, tabs =&gt; &#123;</span><br><span class="line">  chrome.tabs.sendMessage(tabs[0].id, &#123; action: &quot;updateUI&quot; &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="storage存储数据"><a href="#storage存储数据" class="headerlink" title="storage存储数据"></a>storage存储数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">set</span>(&#123; <span class="attr">info</span>: <span class="string">&#x27;abc&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line">chrome.<span class="property">storage</span>.<span class="property">local</span>.<span class="title function_">get</span>([<span class="string">&#x27;info&#x27;</span>], <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听扩展安装和更新事件</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onInstalled</span>.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听扩展启动事件</span></span><br><span class="line">chrome.<span class="property">runtime</span>.<span class="property">onStartup</span>.<span class="title function_">addListener</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="开发微信小程序注意事项"><a href="#开发微信小程序注意事项" class="headerlink" title="开发微信小程序注意事项"></a>开发微信小程序注意事项</h1><h2 id="扫码登录"><a href="#扫码登录" class="headerlink" title="扫码登录"></a>扫码登录</h2><p>微信扫码登录小程序的流程如下：</p><ol><li>服务端根据scene从小程序API获取二维码；</li><li>浏览器插件从服务端获取并展示二维码，轮询是否登录；</li><li>手机扫描二维码，微信小程序可以从query中拿到scene。登录后拿到token，请求登录接口，返回scene和token；</li><li>服务端以scene为key记录是否登录。缓存scene和token，查询是否登录根据sessionStorage中的数据判断；</li><li>浏览器插件查询到已登录，结束轮询；</li></ol><p>主要代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取accessToken</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class="subst">$&#123;appid&#125;</span>&amp;secret=<span class="subst">$&#123;secret&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据accessToken获取二维码</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="title function_">randomBytes</span>(<span class="number">16</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=<span class="subst">$&#123;accessToken&#125;</span>`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      scene,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">200</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">await</span> response.<span class="title function_">arrayBuffer</span>();</span><br><span class="line"><span class="keyword">const</span> base64Image = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(buffer).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">jsonSuccess</span>(&#123;</span><br><span class="line">    <span class="attr">qrcode</span>: <span class="string">`data:image/png;base64,<span class="subst">$&#123;base64Image&#125;</span>`</span>,</span><br><span class="line">    scene,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h2><p><code>wx.getUserInfo</code>和<code>wx.getUserProfile</code>已经被废弃，无法拿到用户头像和昵称。</p><p>需要让用户自己选择头像和昵称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 用户信息弹窗 --&gt;</span><br><span class="line">&lt;view class=&quot;user-info-modal&quot; wx:if=&quot;&#123;&#123;isLoggedIn &amp;&amp; (!userName || !userAvatar)&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;user-info-content&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;avatar-wrapper&quot; open-type=&quot;chooseAvatar&quot; bind:chooseavatar=&quot;onChooseAvatar&quot;&gt;</span><br><span class="line">      &lt;image class=&quot;avatar&quot; src=&quot;&#123;&#123;userAvatar&#125;&#125;&quot;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;nickname&quot; class=&quot;weui-input&quot; placeholder=&quot;请输入昵称&quot; bindinput=&quot;onInputName&quot; /&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><h2 id="上传微信头像"><a href="#上传微信头像" class="headerlink" title="上传微信头像"></a>上传微信头像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const &#123; userName, userAvatar, scene &#125; = this.data</span><br><span class="line">wx.uploadFile(&#123;</span><br><span class="line">  url: &#x27;xx&#x27;,</span><br><span class="line">  filePath: userAvatar,</span><br><span class="line">  name: &#x27;file&#x27;,</span><br><span class="line">  formData: &#123;</span><br><span class="line">    openid: wx.getStorageSync(&#x27;token&#x27;),</span><br><span class="line">    scene,</span><br><span class="line">    nickname: userName</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一个日常用得上的项目，又锻炼了开发浏览器插件、微信小程序、node。最复杂的是扫码登录那块。</p><p>ps: 因为发布浏览器插件需要付费，so，可以通过 <a href="https://github.com/chendx97/word-grabber-extension">下载插件</a> 来手动安装浏览器插件。   </p><p>小程序二维码：<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/%E5%B0%8F%E7%A8%8B%E5%BA%8F.png" alt="小程序二维码"> </p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 浏览器插件 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本片段：比Ctrl+F更智能</title>
      <link href="/2024/12/20/text-fragement/"/>
      <url>/2024/12/20/text-fragement/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>以前，你可以通过<code>url</code>跳转到其他页面顶部，也可以通过<code>id</code>跳转到某个DOM节点。<strong>文本片段</strong>允许你直接链接到网页中的特定文本部分，而且可以高亮链接文本部分。它可以用来生成更有效的内容共享链接，让用户互相传递。</p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.com#:~:text=[prefix-,]textStart[,textEnd][,-suffix]</span><br></pre></td></tr></table></figure><p>接下来是每部分的详细说明：<br><strong>#</strong><br><code>#</code>是必须的，它是url片段标识符的一部分，用于指示浏览器跳转到页面中的特定位置或文本。<br><strong>:~:</strong><br>片段指令，告诉浏览器接下来是一个或多个指令，跳转后这些指令会从url中剥离。<br><strong>text&#x3D;</strong><br>代表接下来是一段文本指令。<br><strong>textStart</strong><br>一个文本字符串，指定链接文本的开始。<br><strong>textEnd</strong><br>一个文本字符串，指定链接文本的结束。<br><strong>prefix-</strong><br>一个文本字符串+一个连字符，指定链接文本前面应该有什么文本，有助于更精确的选择链接文本。<br><strong>-suffix</strong><br>一个连字符+一个文本字符串，指定链接文本后面应该有什么文本。</p><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><ul><li>只高亮第一个匹配到的链接文本。</li><li><code>textStart</code>、<code>textEnd</code>、<code>prefix</code>、<code>suffix</code>需要做百分比编码(encodeURIComponent)。</li><li>匹配大小写不敏感。</li><li>单独的<code>textStart</code>、<code>textEnd</code>、<code>prefix</code>、<code>suffix</code>字符串需要完全位于同一个块级元素中，完整的匹配可以跨越多个边界。</li><li>出于安全考虑，如果是<code>&lt;a&gt;</code>需要添加<code>rel=&quot;noopener&quot;</code>，如果是<code>window.open()</code>需要添加<code>noopener</code>。</li><li>文本片段只在非同一页面、用户发起的导航中被调用。</li><li>文本片段只适用于主框架，不支持<code>iframe</code>。</li><li>如果不想支持文本片段，可以设置<code>Document-Policy: force-load-at-top</code>。</li><li>默认跳转到第一个匹配到的链接文本，如果没匹配到或不支持，跳转到文档顶部。</li><li>如果匹配到<code>&lt;details&gt;</code>内的内容，它会自动打开。</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一次出现“for”的地方--&gt;</span></span><br><span class="line">https://example.com#:~:text=for</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第一次以“人类”开头而且以“URL”结尾的地方--&gt;</span></span><br><span class="line">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a#:~:text=人类,URL </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第一次出现“for”而且前面是“asking”的地方--&gt;</span></span><br><span class="line">https://example.com#:~:text=asking-,for</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    第一个高亮是第一次出现“导致”的地方，</span></span><br><span class="line"><span class="comment">    第二个高亮是第一次出现“链接的”的地方，</span></span><br><span class="line"><span class="comment">    并且跳转到第一个高亮的地方。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a#:~:text=导致&amp;text=链接的</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    第一个高亮是第一次出现“链接的 URL”而且后面紧跟“，”的地方，</span></span><br><span class="line"><span class="comment">    第二个高亮是以“页面”开头而且以“浏览环境”结尾，而且前面是“当前”的地方，</span></span><br><span class="line"><span class="comment">    并且跳转到第一个高亮的地方。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a#:~:text=链接的%20URL,-，&amp;text=当前-,页面,浏览环境</span><br></pre></td></tr></table></figure><h1 id="给文本片段添加样式"><a href="#给文本片段添加样式" class="headerlink" title="给文本片段添加样式"></a>给文本片段添加样式</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">::target-text &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持的属性：</p><ul><li><code>color</code></li><li><code>background-color</code></li><li><code>text-decoration</code>、<code>text-underline-position</code>、<code>text-underline-offset</code></li><li><code>text-shadow</code></li><li><code>stroke-color</code>、<code>fill-color</code>、<code>stroke-width</code></li><li>自定义属性</li></ul><h1 id="检测浏览器是否支持文本片段"><a href="#检测浏览器是否支持文本片段" class="headerlink" title="检测浏览器是否支持文本片段"></a>检测浏览器是否支持文本片段</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">fragmentDirective</span>;</span><br></pre></td></tr></table></figure><p>如果是空对象代表支持，如果是undefined代表不支持。<br>目前仍是空对象，未来可能包含片段信息。</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>只能跳转并高亮第一个匹配到的地方，不能跳转并高亮以后匹配到的地方。如果尝试按<code>Tab</code>键，焦点会移至下一个可聚焦元素(如链接)。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://alfy.blog/2024/10/19/linking-directly-to-web-page-content.html">https://alfy.blog/2024/10/19/linking-directly-to-web-page-content.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/URI/Fragment/Text_fragments">https://developer.mozilla.org/zh-CN/docs/Web/URI/Fragment/Text_fragments</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本片段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>📃9条CSS重置样式规则</title>
      <link href="/2024/12/18/reset-rule/"/>
      <url>/2024/12/18/reset-rule/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>浏览器的一些默认样式，我们可能不需要。比如，<code>body &#123;margin: 8px;&#125;</code>，我们一般希望最外层没有外边距，特别是在有<code>&lt;header /&gt;</code>或背景图时。再比如，<code>&lt;img/&gt;</code>默认展示为原图大小，原图的宽高一般都非常大，我们可能希望图片不要超过父元素。</p><h1 id="重置的规则"><a href="#重置的规则" class="headerlink" title="重置的规则"></a>重置的规则</h1><p>接下来，详细讲一下部分规则，一些显而易见的规则就没必要一一说明了。</p><h2 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h2><p>浏览器的默认行高一般是1.2，但这个距离可能会有点紧凑，而且WCAG 标准规定行高应至少为 1.5。<br>行高可以继承，所以在<code>body</code>上设置就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有个缺点：如<code>&lt;h1/&gt;</code>的行间距太大了。</p><p>另一个方法是，以<code>font-size</code>为基础，每行添加固定高度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    line-height: calc(1em + 0.5rem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的缺点是：不能设置在<code>body</code>上，因为不会为每个元素重新计算<code>1em</code>。</p><h2 id="表单控件的字体继承"><a href="#表单控件的字体继承" class="headerlink" title="表单控件的字体继承"></a>表单控件的字体继承</h2><p><code>font-size</code>、<code>font-family</code>、<code>font-weight</code>在除表单元素以外的控件中是可以继承的。<code>input</code>、<code>textarea</code>等元素会使用浏览器默认值。<br>这不合理，默认值太小，而且与父级不统一。所以，我们应该指定这些元素继承父级样式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input, button, textarea, select &#123;</span><br><span class="line">  font: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="改善换行"><a href="#改善换行" class="headerlink" title="改善换行"></a>改善换行</h2><p>默认的换行是将超出的单词推送到下一行，有时会产生不好的效果，比如最后一行只有一个句号。<br>使用<code>text-wrap</code>属性可以优化换行的显示。对于<code>&lt;p&gt;</code>，使用<code>pretty</code>选项将确保最后一行有至少2个文本。对于<code>&lt;h1&gt;</code>，使用<code>balance</code>选项，将试图使每行的文本长度大致相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  text-wrap: pretty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1, h2, h3, h4, h5, h6 &#123;</span><br><span class="line">  text-wrap: balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根堆叠上下文"><a href="#根堆叠上下文" class="headerlink" title="根堆叠上下文"></a>根堆叠上下文</h2><p><code>isolation</code>属性允许我们创建一个新的堆栈上下文，而无需设置<code>z-index</code>。<br>在使用<code>Vue</code>等框架时，如果对根元素设置<code>isolate</code>，它允许我们保证某些高优先级元素（模式、下拉菜单、工具提示）始终显示在应用程序中的其他元素之上。</p><h1 id="完整规则"><a href="#完整规则" class="headerlink" title="完整规则"></a>完整规则</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">*, *::before, *::after &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  line-height: 1.5;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img, picture, video, canvas, svg &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  max-width: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input, button, textarea, select &#123;</span><br><span class="line">  font: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p, h1, h2, h3, h4, h5, h6 &#123;</span><br><span class="line">  overflow-wrap: break-word;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line">  text-wrap: pretty;</span><br><span class="line">&#125;</span><br><span class="line">h1, h2, h3, h4, h5, h6 &#123;</span><br><span class="line">  text-wrap: balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#root, #__next &#123;</span><br><span class="line">  isolation: isolate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐在旧项目上设置这些规则，但推荐在新项目上都设置这些规则。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.joshwcomeau.com/css/custom-css-reset/">custom-css-reset</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-wrap">MDN: text-wrap</a><br><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css3-isolation-isolate/">理解CSS3 isolation: isolate的表现和作用</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css reset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuepress2自定义主题详细指南</title>
      <link href="/2024/12/18/vuepress2/"/>
      <url>/2024/12/18/vuepress2/</url>
      
        <content type="html"><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>首先，创建项目，<code>vuepress-starter</code>代表你的项目名，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vuepress vuepress-starter</span><br></pre></td></tr></table></figure><p>页面目录结构如下图所示，<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110195042.png" alt="image"><br>然后启动项目，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run docs:dev</span><br></pre></td></tr></table></figure><h1 id="自定义首页"><a href="#自定义首页" class="headerlink" title="自定义首页"></a>自定义首页</h1><p>首先在<code>.vuepress/layouts/LayoutHome.vue</code>中定义首页如何布局，然后在<code>/vuepress/clients.js</code>中注册该布局，最后在<code>README.md</code>中声明首页使用此布局。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /vuepress/clients.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineClientConfig, resolvers  &#125; <span class="keyword">from</span> <span class="string">&#x27;vuepress/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutHome</span> <span class="keyword">from</span> <span class="string">&#x27;./layouts/LayoutHome.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineClientConfig</span>(&#123;</span><br><span class="line">  <span class="attr">layouts</span>: &#123;</span><br><span class="line">    <span class="title class_">LayoutHome</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">home: true</span><br><span class="line">layout: LayoutHome</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>首页具体代码不展示。其他页面的自定义布局与首页不同，会在后面讲到。</p><h1 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h1><p>组件都放在<code>.vuepress/components</code>下，一共有3种组件。<br>第一种，非全局组件，使用时需要引入，如下所示，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import ParentLayout from &#x27;@vuepress/theme-default/layouts/Layout.vue&#x27;</span><br><span class="line">import ArticleList from &#x27;../components/ArticleList.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ParentLayout&gt;</span><br><span class="line">    &lt;template #navbar&gt;</span><br><span class="line">      hi</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #page&gt;</span><br><span class="line">      &lt;main class=&quot;page&quot;&gt;</span><br><span class="line">        &lt;ArticleList :items=&quot;articles.items&quot; /&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/ParentLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>第二种，全局组件需要注册，不需要引入，使用时才会被添加到页面中，如下所示，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// .vuepress/theme/client.js</span><br><span class="line">import &#123; defineClientConfig &#125; from &#x27;vuepress/client&#x27;;</span><br><span class="line">import Layout from &#x27;./layouts/Layout.vue&#x27;;</span><br><span class="line">import Navbar from &#x27;./components/Navbar.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineClientConfig(&#123;</span><br><span class="line">  layouts: &#123;</span><br><span class="line">    Layout,</span><br><span class="line">  &#125;,</span><br><span class="line">  enhance(&#123; app &#125;) &#123;</span><br><span class="line">    app.component(&#x27;Navbar&#x27;, Navbar);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三种，rootComponents指定的组件会被直接放在根节点中，全局弹窗之类的组件可以用这种方法，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; defineClientConfig &#125; from &#x27;vuepress/client&#x27;</span><br><span class="line">import GlobalPopup from &#x27;./components/GlobalPopup.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default defineClientConfig(&#123;</span><br><span class="line">  rootComponents: [GlobalPopup],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h1><p>在文件<code>.vuepress/layouts/LayoutDefault.vue</code>中定义页面内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--.vuepress/layouts/LayoutDefault.vue--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Navbar</span> <span class="keyword">from</span> <span class="string">&quot;../components/Navbar.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&quot;../components/Footer.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Navbar</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，在<code>.vuepress/client.js</code>中注册该布局，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vuepress/client.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineClientConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vuepress/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutDefault</span> <span class="keyword">from</span> <span class="string">&#x27;./layouts/LayoutDefault.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Navbar</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Navbar.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineClientConfig</span>(&#123;</span><br><span class="line">  <span class="attr">layouts</span>: &#123;</span><br><span class="line">    <span class="title class_">LayoutDefault</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后在使用该布局的页面中，引入并将内容填充进slot。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import LayoutDefault from &quot;./LayoutDefault.vue&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;LayoutDefault&gt;</span><br><span class="line">    hi</span><br><span class="line">  &lt;/LayoutDefault&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1 id="修改默认页面"><a href="#修改默认页面" class="headerlink" title="修改默认页面"></a>修改默认页面</h1><p>默认的页面有文章列表页、标签页、类别页、时间轴页。有2种方案：替换默认插槽、替换整个布局页。<br>每个页面都有固定的文件名，如下所示：</p><ul><li>文章列表页：layouts&#x2F;Article.vue</li><li>文章内容页：layouts&#x2F;Layout.vue</li><li>标签页：layouts&#x2F;Tag.vue</li><li>类别页：layouts&#x2F;Category.vue</li><li>时间轴页：layouts&#x2F;Timeline.vue</li></ul><p>下面以文章内容页为例，必须要在<code>.vuepress/layouts/Layout.vue</code>文件中定义文章内容页的内容。<br>方案一：替换默认插槽，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- .vuepress/layouts/Layout.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import ParentLayout from &quot;@vuepress/theme-default/layouts/Layout.vue&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ParentLayout&gt;</span><br><span class="line">    &lt;template #navbar&gt;</span><br><span class="line">      &lt;Navbar /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;template #page-bottom&gt;</span><br><span class="line">      &lt;Footer /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/ParentLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>方案二：替换整个布局页，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- .vuepress/layouts/Layout.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import LayoutDefault from &quot;./LayoutDefault.vue&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;LayoutDefault&gt;</span><br><span class="line">    &lt;Content /&gt;</span><br><span class="line">  &lt;/LayoutDefault&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;Content/&gt;</code>就是<code>.md</code>文件里的内容，不需要引入。</p><h1 id="添加新页面"><a href="#添加新页面" class="headerlink" title="添加新页面"></a>添加新页面</h1><p>比如，想添加一个友链页。<br>需要先在<code>.vuepress/layouts/Friends.vue</code>中定义页面内容，然后在<code>.vuepress/client.js</code>中注册该布局。然后在<code>.vuepress/config.js</code>中添加新页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPage &#125; <span class="keyword">from</span> <span class="string">&#x27;vuepress/core&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineUserConfig</span>(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">onInitialized</span>: <span class="title function_">async</span> (app) =&gt; &#123;</span><br><span class="line">        app.<span class="property">pages</span>.<span class="title function_">push</span>(<span class="keyword">await</span> <span class="title function_">createPage</span>(app, &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/friends.html&#x27;</span>,</span><br><span class="line">            <span class="attr">frontmatter</span>: &#123;</span><br><span class="line">                <span class="attr">layout</span>: <span class="string">&#x27;Friends&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="如何覆盖默认样式"><a href="#如何覆盖默认样式" class="headerlink" title="如何覆盖默认样式"></a>如何覆盖默认样式</h1><p>在<code>.vuepress/styles/index.scss</code>(一定是这个名字)中定义样式，不需要引入。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// <span class="selector-class">.vuepress</span>/styles/index<span class="selector-class">.scss</span></span><br><span class="line"><span class="selector-class">.text-color</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="可能用到的api"><a href="#可能用到的api" class="headerlink" title="可能用到的api"></a>可能用到的api</h1><h2 id="useClientData"><a href="#useClientData" class="headerlink" title="useClientData"></a>useClientData</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; useClientData &#125; from &#x27;vuepress/client&#x27;</span><br><span class="line"></span><br><span class="line">const &#123;</span><br><span class="line">  pageData,</span><br><span class="line">  pageFrontmatter,</span><br><span class="line">  pageHead,</span><br><span class="line">  pageHeadTitle,</span><br><span class="line">  pageLang,</span><br><span class="line">  routeLocale,</span><br><span class="line">  siteData,</span><br><span class="line">  siteLocaleData,</span><br><span class="line">&#125; = useClientData()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>useClientData()</code>的返回值如下所示：<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110203033.png" alt="image"><br><code>useClientData()</code>返回全部客户端ref对象，另外还可以通过以下组合式api获取单独数据，</p><ul><li>usePageData 获取当前页面数据；<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110203042.png" alt="image"></li><li>usePageFrontmatter 获取当前页面的frontmatter配置；<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110203049.png" alt="image"></li><li>usePageHead 获取当前页面head信息，如meta、title等；</li><li><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110203057.png" alt="image"></li><li>usePageHeadTitle 获取当前页面的title，页面title+站点title；<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110203105.png" alt="image"></li><li>usePageLang 获取当前页面语言；<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110203113.png" alt="image"></li></ul><h2 id="useRoutes"><a href="#useRoutes" class="headerlink" title="useRoutes"></a>useRoutes</h2><p>该api返回所有路由，<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241124201337.png" alt="image"></p><h2 id="useSiteData"><a href="#useSiteData" class="headerlink" title="useSiteData"></a>useSiteData</h2><p>该api返回站点信息，<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241124201343.png" alt="image"></p><h2 id="defineClientConfig"><a href="#defineClientConfig" class="headerlink" title="defineClientConfig"></a>defineClientConfig</h2><p><code>defineClientConfig</code>需要定义在<code>.vuepress/client.js</code>中。如果是在自定义主题中使用，需要声明该文件的位置，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="attr">clientConfigFile</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./path/to/client.js&#x27;</span>),</span><br></pre></td></tr></table></figure><p><code>defineClientConfig</code>的具体使用如下所示，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineClientConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vuepress/client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineClientConfig</span>(&#123;</span><br><span class="line">  <span class="title function_">enhance</span>(<span class="params">&#123; app, router, siteData &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 可以在这里注册全局组件</span></span><br><span class="line">    <span class="comment">// app.component(&#x27;MyComponent&#x27;, MyComponent)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可以使用路由方法</span></span><br><span class="line">    router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;before navigation&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里相当于根组件的setup的一部分，在这里可以使用vue的api</span></span><br><span class="line">    <span class="comment">// provide(&#x27;count&#x27;, 3)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">layouts</span>: &#123;&#125;, <span class="comment">// 注册布局</span></span><br><span class="line">  <span class="attr">rootComponents</span>: [], <span class="comment">// 注册全局根组件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="resolveRoute"><a href="#resolveRoute" class="headerlink" title="resolveRoute"></a>resolveRoute</h2><p><code>useRoutes()</code>获取全部路由，是一个对象，key是path，值是路由信息；<br><code>resolveRoutePath(url)</code>根据传入的url获取path；<br><code>resolveRoute(link)</code>返回路由信息；<br><code>withBase(path)</code> 拼接上base值；<br>在自定义主题时，可以通过<code>withBase</code>获取资源正确路径，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; withBase &#125; <span class="keyword">from</span> <span class="string">&#x27;vuepress/client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logoPath = <span class="title function_">ref</span>(<span class="string">&#x27;/images/hero.png&#x27;</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;withBase(logoPath)&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="已定义的常量"><a href="#已定义的常量" class="headerlink" title="已定义的常量"></a>已定义的常量</h2><ul><li><strong>VUEPRESS_VERSION</strong> vuepress核心包的版本；</li><li><strong>VUEPRESS_BASE</strong> config.js中base配置；</li><li><strong>VUEPRESS_DEV</strong> 是否是dev环境；</li><li><strong>VUEPRESS_SSR</strong> 是否是ssr环境；<br>这些常量可以在<code>js</code>代码中直接使用，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">console.log(__VUEPRESS_VERSION__)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="resolvers"><a href="#resolvers" class="headerlink" title="resolvers"></a>resolvers</h2><p>覆盖一些默认的计算方法，实验性功能，修改时需充分了解原来的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineClientConfig, resolvers &#125; <span class="keyword">from</span> <span class="string">&#x27;vuepress/client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineClientConfig</span>(&#123;</span><br><span class="line">  <span class="title function_">enhance</span>(<span class="params">&#123; app, router, siteData &#125;</span>) &#123;</span><br><span class="line">    resolvers.<span class="property">resolvePageHeadTitle</span> = <span class="function">(<span class="params">page, siteLocale</span>) =&gt;</span></span><br><span class="line">      <span class="string">`<span class="subst">$&#123;siteLocale.title&#125;</span> &gt; <span class="subst">$&#123;page.title&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241110203057.png" alt="image"></p><h1 id="添加进阶功能"><a href="#添加进阶功能" class="headerlink" title="添加进阶功能"></a>添加进阶功能</h1><h2 id="评论模块"><a href="#评论模块" class="headerlink" title="评论模块"></a>评论模块</h2><p>首先，安装依赖，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @vuepress/plugin-comment@next</span><br></pre></td></tr></table></figure><p>然后，配置插件，申请评论服务，评论服务推荐<code>Giscus</code>，<br><a href="https://ecosystem.vuejs.press/zh/plugins/blog/comment/giscus/">https://ecosystem.vuejs.press/zh/plugins/blog/comment/giscus/</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; commentPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;@vuepress/plugin-comment&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineUserConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">commentPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">provider</span>: <span class="string">&#x27;Giscus&#x27;</span>,</span><br><span class="line">      <span class="attr">repo</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">      <span class="attr">repoId</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">      <span class="attr">category</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">      <span class="attr">categoryId</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="vuepress-helper辅助函数"><a href="#vuepress-helper辅助函数" class="headerlink" title="@vuepress&#x2F;helper辅助函数"></a>@vuepress&#x2F;helper辅助函数</h2><p><a href="https://ecosystem.vuejs.press/zh/tools/helper/">https://ecosystem.vuejs.press/zh/tools/helper/</a></p><h2 id="添加显示访问量功能；"><a href="#添加显示访问量功能；" class="headerlink" title="添加显示访问量功能；"></a>添加显示访问量功能；</h2><p><a href="https://ecosystem.vuejs.press/zh/plugins/analytics/umami-analytics.html">https://ecosystem.vuejs.press/zh/plugins/analytics/umami-analytics.html</a></p><h2 id="设置sitemap"><a href="#设置sitemap" class="headerlink" title="设置sitemap"></a>设置sitemap</h2><p><a href="https://vuepress-plugin-blog.billyyyyy3320.com/zh/guide/getting-started.html#frontmatter-%E5%88%86%E7%B1%BB%E5%99%A8">https://vuepress-plugin-blog.billyyyyy3320.com/zh/guide/getting-started.html#frontmatter-%E5%88%86%E7%B1%BB%E5%99%A8</a></p><h2 id="开启ssr"><a href="#开启ssr" class="headerlink" title="开启ssr"></a>开启ssr</h2><p>seo插件；<a href="https://ecosystem.vuejs.press/zh/plugins/seo/seo/">https://ecosystem.vuejs.press/zh/plugins/seo/seo/</a></p><h2 id="代码复制功能"><a href="#代码复制功能" class="headerlink" title="代码复制功能"></a>代码复制功能</h2><p><a href="https://ecosystem.vuejs.press/zh/plugins/features/copy-code.html">https://ecosystem.vuejs.press/zh/plugins/features/copy-code.html</a></p><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p><a href="https://ecosystem.vuejs.press/zh/plugins/search/search.html#hotkeys">https://ecosystem.vuejs.press/zh/plugins/search/search.html#hotkeys</a></p><h2 id="内置全局组件"><a href="#内置全局组件" class="headerlink" title="内置全局组件"></a>内置全局组件</h2><p><a href="https://vuepress.github.io/zh/reference/components.html#autolink">https://vuepress.github.io/zh/reference/components.html#autolink</a></p><h2 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h2><p><a href="https://ecosystem.vuejs.press/zh/themes/default/extending.html#%E5%B8%83%E5%B1%80%E6%8F%92%E6%A7%BD">https://ecosystem.vuejs.press/zh/themes/default/extending.html#%E5%B8%83%E5%B1%80%E6%8F%92%E6%A7%BD</a></p><h2 id="替换非全局组件"><a href="#替换非全局组件" class="headerlink" title="替换非全局组件"></a>替换非全局组件</h2><p><a href="https://ecosystem.vuejs.press/zh/themes/default/extending.html#%E7%BB%84%E4%BB%B6%E6%9B%BF%E6%8D%A2">https://ecosystem.vuejs.press/zh/themes/default/extending.html#%E7%BB%84%E4%BB%B6%E6%9B%BF%E6%8D%A2</a></p><h2 id="非全局组件列表"><a href="#非全局组件列表" class="headerlink" title="非全局组件列表"></a>非全局组件列表</h2><p><a href="https://github.com/vuepress/ecosystem/tree/main/themes/theme-default/src/client/components">https://github.com/vuepress/ecosystem/tree/main/themes/theme-default/src/client/components</a></p><h2 id="图片缩放功能"><a href="#图片缩放功能" class="headerlink" title="图片缩放功能"></a>图片缩放功能</h2><p><a href="https://ecosystem.vuejs.press/zh/plugins/features/medium-zoom.html">https://ecosystem.vuejs.press/zh/plugins/features/medium-zoom.html</a></p><h2 id="覆盖主题css变量"><a href="#覆盖主题css变量" class="headerlink" title="覆盖主题css变量"></a>覆盖主题css变量</h2><p><a href="https://ecosystem.vuejs.press/zh/themes/default/styles.html#style-%E6%96%87%E4%BB%B6">https://ecosystem.vuejs.press/zh/themes/default/styles.html#style-%E6%96%87%E4%BB%B6</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>烂尾了，不一定补充。</p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuepress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>📢彻底了解Vu3的watchEffect和watch</title>
      <link href="/2024/11/19/watch/"/>
      <url>/2024/11/19/watch/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我经常使用<code>watch</code>和<code>watcheffect</code>，但前几天遇到一个稍微复杂点的功能，就出现了意料之外的情况，感觉对它们了解的还不够。所以，在此详细探索一下它们。</p><h1 id="watch-vs-watchEffect"><a href="#watch-vs-watchEffect" class="headerlink" title="watch vs watchEffect"></a>watch vs watchEffect</h1><p>它们的相同点是都可以监听<strong>响应式数据</strong>的变化，并执行回调函数。不同点比较多。<br>不同点如下：</p><ul><li>watch需要显示指定要监听的数据，watchEffect会<strong>自动</strong>收集依赖；</li><li>watchEffect会<strong>立即</strong>执行一次，watch在设置<code>&#123;immediate: true&#125;</code>时才会立即执行一次；</li><li>watch可以获取到<strong>旧值</strong>，watchEffect不可以；</li><li>watch可以通过选项设置为<strong>仅执行一次</strong>，watchEffect不可以；</li><li>watch可以设置监听对象的<strong>层数</strong>，watchEffect不可以；</li></ul><p>官方文档也有指出，watch相对于watchEffect的优点：</p><blockquote><p>与 watchEffect() 相比，watch() 使我们可以：</p><ul><li>懒执行副作用；</li><li>更加明确是应该由哪个状态触发侦听器重新执行；</li><li>可以访问所侦听状态的前一个值和当前值</li></ul></blockquote><p>综上所述，使用watchEffect虽然比较省事，但如果功能复杂很容易出现问题，灵活性也不如watch。比如，在watchEffect内调用一个函数，但这个函数内读取了某个响应式数据，导致这个数据被意外监听。所以，我推荐&#x3D;&#x3D;任何情况都使用<strong>watch</strong>&#x3D;&#x3D;。</p><h1 id="watch详解"><a href="#watch详解" class="headerlink" title="watch详解"></a>watch详解</h1><h2 id="第一个参数：侦听源"><a href="#第一个参数：侦听源" class="headerlink" title="第一个参数：侦听源"></a>第一个参数：侦听源</h2><p>watch的第一个参数指定要监听哪些响应式数据。这些数据必须是响应式的，但可以包括以下几种：</p><ul><li>一个ref</li><li>一个响应式对象</li><li>一个函数，这个函数返回一个值</li><li>由以上类型的值组成的数组</li></ul><p>当第一个参数是响应式对象时，默认开启深度监听。<br>当第一个参数是函数时，该函数会立即执行。<br>当第一个参数是getter函数时，有以下三种情况：</p><ul><li>如果该函数返回响应式对象，回调函数不触发；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue === oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>如果返回响应式对象的某个属性，回调函数触发；<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue === oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>如果返回响应式对象，但开启<code>&#123;deep: true&#125;</code>，回调函数触发。但，此时新值和旧值相同。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue === oldValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h2 id="第二个参数：回调函数"><a href="#第二个参数：回调函数" class="headerlink" title="第二个参数：回调函数"></a>第二个参数：回调函数</h2><p>watch的第二个参数会在监听的数据发生变化时被调用。如果监听的多个数据都发生变化，在一个事件循环周期内回调只执行一次。<br>该回调函数有3个参数：新值、旧值、一个用来<strong>清理副作用</strong>的方法。<br>当监听数组时，新值和旧值也都是数组，与监听源一一对应。</p><h3 id="副作用清理"><a href="#副作用清理" class="headerlink" title="副作用清理"></a>副作用清理</h3><p>副作用清理的使用场景：异步未返回时，watch的回调就再次执行。<br>使用方法：把清理副作用的方法传入到<code>onCleanup</code>中，如下所示，<code>cancel</code>并不会马上执行，而是下一次执行watch的回调函数时执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(id, <span class="title function_">async</span> (newId, oldId, onCleanup) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">doAsyncWork</span>(newId) <span class="comment">// !!!注意：没有await</span></span><br><span class="line">  <span class="title function_">onCleanup</span>(cancel)</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>vue3.5+引入了onWatcherCleanup，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onWatcherCleanup &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(id, <span class="title function_">async</span> (newId) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; response, cancel &#125; = <span class="title function_">doAsyncWork</span>(newId)</span><br><span class="line">  <span class="title function_">onWatcherCleanup</span>(cancel)</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那么，onCleanup和onWatcherCleanup有什么不同呢？</p><ol><li>语义友好，onWatcherCleanup明确表示这个方法与watch的清理操作相关；</li><li>onWatcherCleanup更好的和vue3.5+的新特性结合，vue3.5+新增了watch选项、优化了watcher的管理机制；</li><li>出现错误时，vue会为onWatcherCleanup返回更详细的错误信息；</li></ol><p>&#x3D;&#x3D;总结：如果你的vue版本是3.5+，请选择onWatcherCleanup。&#x3D;&#x3D;</p><h2 id="第三个参数：配置对象"><a href="#第三个参数：配置对象" class="headerlink" title="第三个参数：配置对象"></a>第三个参数：配置对象</h2><p>第三个可选的参数是一个对象，支持以下选项：</p><ul><li>immediate: 立即触发回调，第一次调用时旧值是<code>undefined</code>；</li><li>deep: 如果源是对象，进行深度遍历。在3.5+中可以设置为最大遍历深度的数字；</li><li>once: 回调函数只执行一次；</li><li>flush: 设置回调函数的刷新时机；</li><li>onTrack&#x2F;onTrigger: 调试侦听器的依赖；</li></ul><p>前3个选项比较好理解也经常用，接下来了解一下后面2个。</p><h3 id="flush"><a href="#flush" class="headerlink" title="flush"></a>flush</h3><p>flush的值有2个：<code>post</code>和<code>sync</code>。<br>默认情况下，watch的回调函数会在父组件更新之后、所属组件的DOM更新<strong>之前</strong>被调用。当你在回调函数中访问所属组件的DOM时，获取到的是<strong>更新前的状态</strong>。<br>当设置flush为post时，在回调函数中获取到的DOM是更新之后的状态。</p><p>默认情况下，回调函数会被批量处理，一个事件循环内只执行一次。<br>当设置flush为sync时，监听的数据变化时就马上触发回调函数。所以要慎重使用，可以监听布尔值，避免监听可能多次同步修改的数据源。</p><h3 id="onTrack-onTrigger"><a href="#onTrack-onTrigger" class="headerlink" title="onTrack&#x2F;onTrigger"></a>onTrack&#x2F;onTrigger</h3><p>注意：这两个方法仅在开发模式下生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(source, callback, &#123;</span><br><span class="line">  <span class="title function_">onTrack</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onTrigger</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">debugger</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>onTrack在响应式数据被追踪时调用，onTrigger在响应式数据发生变化时被调用。<br>可以用这2个方法在开发环境进行调试。</p><h2 id="返回值：一个停止监听的函数"><a href="#返回值：一个停止监听的函数" class="headerlink" title="返回值：一个停止监听的函数"></a>返回值：一个停止监听的函数</h2><p>watch的返回值可以用来停止、暂停、恢复监听，类型定义如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">WatchHandle</span> &#123;</span><br><span class="line">  (): <span class="keyword">void</span> <span class="comment">// 可调用，与 `stop` 相同</span></span><br><span class="line">  <span class="attr">pause</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">  <span class="attr">resume</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">  <span class="attr">stop</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用场景：在组件销毁时，或达到某个条件时，停止监听。</p><h1 id="watch源码解析"><a href="#watch源码解析" class="headerlink" title="watch源码解析"></a>watch源码解析</h1><p>首先解释几个名词，假设监听源是source，监听的回调函数是cb，</p><ul><li><strong>traverse</strong>: 一个深度优先遍历对象的方法。当source是<strong>响应式对象</strong>时，用traverse遍历source，那么响应式对象的每一个属性都执行了<strong>读取操作</strong>，所以当响应式对象任一属性发生变化时都能触发回调函数的执行。</li><li><strong>getter</strong>: 一个获取source的函数。根据source的类型，对source进行读取操作，使source的变化能被监听。</li><li><strong>effect</strong>: 副作用函数。 当响应式对象某个属性的值发生变化时，需要重新执行的函数。</li><li><strong>onWatcherCleanup</strong>: 一个注册清理副作用的函数，接收一个函数作为参数，比如把一个清除定时器的函数传给它。注意这个副作用不是指effect，而是指定时器、异步等，它们会影响下一次cb的执行。</li><li><strong>boundCleanup</strong>: 是onWatcherCleanup的绑定版本，把effect传给onWatcherCleanup。</li><li><strong>cleanup</strong>: 执行传给onWatcherCleanup的那些清理副作用的函数。</li><li><strong>ReactiveEffect</strong>: 一个类，它的实例是effect，它具有的属性和方法如下所示，<ul><li>active: 布尔值，表示副作用函数是否处于活动状态，source变化时，当active是true，cb才重新执行；</li><li>deps: 数组，包含副作用函数的依赖项；</li><li>fn: 副作用函数本身；</li><li>scheduler: 一个调度器函数，控制副作用函数的执行时机；</li><li>scope: 副作用函数的作用域；</li><li>run: 一个方法，用于执行副作用函数；</li><li>stop: 一个方法，用于停止副作用函数；</li><li>pause: 一个方法，用于暂停副作用函数的执行；</li><li>resume: 一个方法，用于恢复副作用函数的执行；</li><li>onStop: 一个方法，stop被调用时执行；</li></ul></li></ul><p>完整源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">watch</span>(<span class="params">source, cb, options</span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * immediate: 是否立即执行回调函数</span></span><br><span class="line"><span class="comment">   * deep: 是否深度监听</span></span><br><span class="line"><span class="comment">   * once: 是否只监听一次</span></span><br><span class="line"><span class="comment">   * scheduler: 调度器，用于控制回调函数的执行时机</span></span><br><span class="line"><span class="comment">   * augmentJob: 对job函数进行增强，即执行job函数时做些额外操作</span></span><br><span class="line"><span class="comment">   * call: 传入一个方法，处理方法执行中出现的异常。第一个参数是要被调用的函数fn，第二个参数表示fn的类型，</span></span><br><span class="line"><span class="comment">   *       第三个参数是传递给fn的参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> &#123; immediate, deep, once, scheduler, augmentJob, call &#125; = options;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据deep配置和isShallow(source)确定如何读取source</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">reactiveGetter</span> = (<span class="params">source</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (deep) <span class="keyword">return</span> source</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isShallow</span>(source) || deep === <span class="literal">false</span> || deep === <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">traverse</span>(source, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">traverse</span>(source)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> effect; <span class="comment">// 副作用函数实例</span></span><br><span class="line">  <span class="keyword">let</span> getter; <span class="comment">// 读取数据</span></span><br><span class="line">  <span class="keyword">let</span> cleanup;</span><br><span class="line">  <span class="keyword">let</span> boundCleanup;</span><br><span class="line">  <span class="comment">// 当数据源是(或包含)响应式对象时，由于引用类型的特性，新旧对象相同，无法确定是否发生了改变，所以需要强制触发回调函数的调用</span></span><br><span class="line">  <span class="keyword">let</span> forceTrigger = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> isMultiSource = <span class="literal">false</span>; <span class="comment">// 是否监听多个数据源</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(source)) &#123;</span><br><span class="line">    getter = <span class="function">() =&gt;</span> source.<span class="property">value</span></span><br><span class="line">    forceTrigger = <span class="title function_">isShallow</span>(source)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isReactive</span>(source)) &#123;</span><br><span class="line">    getter = <span class="function">() =&gt;</span> <span class="title function_">reactiveGetter</span>(source)</span><br><span class="line">    forceTrigger = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(source)) &#123;</span><br><span class="line">    isMultiSource = <span class="literal">true</span></span><br><span class="line">    forceTrigger = source.<span class="title function_">some</span>(<span class="function"><span class="params">s</span> =&gt;</span> <span class="title function_">isReactive</span>(s) || <span class="title function_">isShallow</span>(s))</span><br><span class="line">    getter = <span class="function">() =&gt;</span></span><br><span class="line">      source.<span class="title function_">map</span>(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isRef</span>(s)) &#123;</span><br><span class="line">          <span class="keyword">return</span> s.<span class="property">value</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isReactive</span>(s)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reactiveGetter</span>(s)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(s)) &#123;</span><br><span class="line">          <span class="keyword">return</span> call ? <span class="title function_">call</span>(s, <span class="title class_">WatchErrorCodes</span>.<span class="property">WATCH_GETTER</span>) : <span class="title function_">s</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// warnInvalidSource 打印警告信息</span></span><br><span class="line">          __DEV__ &amp;&amp; <span class="title function_">warnInvalidSource</span>(s)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// 当source是函数时，cb可以不传，source作为cb，相当于watchEffect</span></span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      getter = call</span><br><span class="line">        ? <span class="function">() =&gt;</span> <span class="title function_">call</span>(source, <span class="title class_">WatchErrorCodes</span>.<span class="property">WATCH_GETTER</span>)</span><br><span class="line">        : source</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      getter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 当source作为cb时，source 函数可能会创建一些需要在函数执行结束后清理的资源，例如定时器、事件监听器等，</span></span><br><span class="line">        <span class="comment">// 因此，这种情况需要调用cleanup清除之前的副作用。</span></span><br><span class="line">        <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">          <span class="comment">// 在清理副作用时，需要暂停依赖收集，以避免在清理过程中触发不必要的副作用。</span></span><br><span class="line">          <span class="title function_">pauseTracking</span>()</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">cleanup</span>()</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="title function_">resetTracking</span>()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// activeWatcher：vue需要知道响应式数据是被哪个watcher访问的，以便这些数据变化时通知对应watcher</span></span><br><span class="line">        <span class="comment">// 在副作用函数执行前，暂存原来的activeWatcher，并将当前副作用effect赋值给activeWatcher</span></span><br><span class="line">        <span class="keyword">const</span> currentEffect = activeWatcher</span><br><span class="line">        activeWatcher = effect</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> call</span><br><span class="line">            ? <span class="title function_">call</span>(source, <span class="title class_">WatchErrorCodes</span>.<span class="property">WATCH_CALLBACK</span>, [boundCleanup])</span><br><span class="line">            : <span class="title function_">source</span>(boundCleanup)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 在副作用函数执行结束后，恢复原来的activeWatcher</span></span><br><span class="line">          activeWatcher = currentEffect</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getter = <span class="variable constant_">NOOP</span> <span class="comment">// NOOP是一个空函数</span></span><br><span class="line">    __DEV__ &amp;&amp; <span class="title function_">warnInvalidSource</span>(source)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理deep选项</span></span><br><span class="line">  <span class="keyword">if</span> (cb &amp;&amp; deep) &#123;</span><br><span class="line">    <span class="keyword">const</span> baseGetter = getter</span><br><span class="line">    <span class="keyword">const</span> depth = deep === <span class="literal">true</span> ? <span class="title class_">Infinity</span> : deep</span><br><span class="line">    getter = <span class="function">() =&gt;</span> <span class="title function_">traverse</span>(<span class="title function_">baseGetter</span>(), depth)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// scope：当前作用域</span></span><br><span class="line">  <span class="keyword">const</span> scope = <span class="title function_">getCurrentScope</span>()</span><br><span class="line">  <span class="comment">// watchHandle是watch的返回值，可以暂停、恢复、停止监听，直接调用就是停止监听</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">watchHandle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    effect.<span class="title function_">stop</span>()</span><br><span class="line">    <span class="keyword">if</span> (scope &amp;&amp; scope.<span class="property">active</span>) &#123;</span><br><span class="line">      <span class="title function_">remove</span>(scope.<span class="property">effects</span>, effect)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理once选项</span></span><br><span class="line">  <span class="keyword">if</span> (once &amp;&amp; cb) &#123;</span><br><span class="line">    <span class="keyword">const</span> _cb = cb</span><br><span class="line">    cb = <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">_cb</span>(...args)</span><br><span class="line">      <span class="title function_">watchHandle</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// INITIAL_WATCHER_VALUE 是&#123;&#125;</span></span><br><span class="line">  <span class="comment">// 初始化旧值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue = isMultiSource</span><br><span class="line">    ? <span class="keyword">new</span> <span class="title class_">Array</span>(source.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="variable constant_">INITIAL_WATCHER_VALUE</span>)</span><br><span class="line">    : <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// job的作用是在数据源发生变化时，执行回调函数，并更新旧值。</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">job</span> = (<span class="params">immediateFirstRun</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果effect没有处于活动状态，或者effect的dirty标志位为false且immediateFirstRun为false，则直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !(effect.<span class="property">flags</span> &amp; <span class="title class_">EffectFlags</span>.<span class="property">ACTIVE</span>) ||</span><br><span class="line">      (!effect.<span class="property">dirty</span> &amp;&amp; !immediateFirstRun)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="keyword">const</span> newValue = effect.<span class="title function_">run</span>()</span><br><span class="line">      <span class="comment">// 如果deep选项为true，或者需要强制触发回调，或者新值和旧值不相等，则执行回调函数。</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        deep ||</span><br><span class="line">        forceTrigger ||</span><br><span class="line">        (isMultiSource</span><br><span class="line">          ? newValue.<span class="title function_">some</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span> <span class="title function_">hasChanged</span>(v, oldValue[i]))</span><br><span class="line">          : <span class="title function_">hasChanged</span>(newValue, oldValue))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">          <span class="title function_">cleanup</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> currentWatcher = activeWatcher</span><br><span class="line">        activeWatcher = effect</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// watch的第二个参数cb，cb接受3个参数：新值、旧值、用来清理副作用的cleanup函数</span></span><br><span class="line">          <span class="keyword">const</span> args = [</span><br><span class="line">            newValue,</span><br><span class="line">            oldValue === <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">              ? <span class="literal">undefined</span></span><br><span class="line">              : isMultiSource &amp;&amp; oldValue[<span class="number">0</span>] === <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">                ? []</span><br><span class="line">                : oldValue,</span><br><span class="line">            boundCleanup,</span><br><span class="line">          ]</span><br><span class="line">          call</span><br><span class="line">            ? <span class="title function_">call</span>(cb, <span class="title class_">WatchErrorCodes</span>.<span class="property">WATCH_CALLBACK</span>, args)</span><br><span class="line">            :</span><br><span class="line">            <span class="title function_">cb</span>(...args)</span><br><span class="line">          oldValue = newValue</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          activeWatcher = currentWatcher</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 执行source函数</span></span><br><span class="line">      effect.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果用户自定义了augmentJob函数，则调用该函数对job进行增强。</span></span><br><span class="line">  <span class="keyword">if</span> (augmentJob) &#123;</span><br><span class="line">    <span class="title function_">augmentJob</span>(job)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果用户自定义了scheduler函数，则将该函数作为effect的调度器</span></span><br><span class="line">  effect.<span class="property">scheduler</span> = scheduler</span><br><span class="line">    ? <span class="function">() =&gt;</span> <span class="title function_">scheduler</span>(job, <span class="literal">false</span>)</span><br><span class="line">    : job</span><br><span class="line"></span><br><span class="line">  <span class="comment">// boundCleanup是对onWatcherCleanup的包裹</span></span><br><span class="line">  boundCleanup = <span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">onWatcherCleanup</span>(fn, <span class="literal">false</span>, effect)</span><br><span class="line"></span><br><span class="line">  cleanup = effect.<span class="property">onStop</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cleanups = cleanupMap.<span class="title function_">get</span>(effect)</span><br><span class="line">    <span class="keyword">if</span> (cleanups) &#123;</span><br><span class="line">      <span class="keyword">if</span> (call) &#123;</span><br><span class="line">        <span class="title function_">call</span>(cleanups, <span class="title class_">WatchErrorCodes</span>.<span class="property">WATCH_CLEANUP</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> cleanup <span class="keyword">of</span> cleanups) <span class="title function_">cleanup</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      cleanupMap.<span class="title function_">delete</span>(effect)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    effect.<span class="property">onTrack</span> = options.<span class="property">onTrack</span></span><br><span class="line">    effect.<span class="property">onTrigger</span> = options.<span class="property">onTrigger</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="title function_">job</span>(<span class="literal">true</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 执行source函数，并更新旧值</span></span><br><span class="line">      oldValue = effect.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (scheduler) &#123;</span><br><span class="line">    <span class="title function_">scheduler</span>(job.<span class="title function_">bind</span>(<span class="literal">null</span>, <span class="literal">true</span>), <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    effect.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  watchHandle.<span class="property">pause</span> = effect.<span class="property">pause</span>.<span class="title function_">bind</span>(effect)</span><br><span class="line">  watchHandle.<span class="property">resume</span> = effect.<span class="property">resume</span>.<span class="title function_">bind</span>(effect)</span><br><span class="line">  watchHandle.<span class="property">stop</span> = watchHandle</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> watchHandle</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> watch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm error-could not determine executable to run</title>
      <link href="/2024/10/10/could-not-determine-executable-to-run/"/>
      <url>/2024/10/10/could-not-determine-executable-to-run/</url>
      
        <content type="html"><![CDATA[<h1 id="遇见问题"><a href="#遇见问题" class="headerlink" title="遇见问题"></a>遇见问题</h1><p>在用我自己的脚手架创建项目时，遇到了一个报错，但别人同样的操作没有报错。<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/image.png" alt="报错信息"><br>然后打开.log文件，看到了更详细一点的报错信息。<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/image%20(1).png" alt="报错2"></p><h1 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h1><p>搜索<code>Error: could not determine executable to run</code>和<code>getBinFromManifest</code>发现，并没有明确的原因，很多人解决的方法<a href="https://stackoverflow.com/questions/67833794/npm-err-could-not-determine-executable-to-run">（解决方案集合）</a>都完全不一样。我一一都试了也不行。<br>然后再看报错信息的后面几行，发现了有什么地方不对劲，<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/image%20(2).png" alt="报错3"><br>我要使用的<code>create-pro</code>的版本根本不是0.0.0，而打开第14行的链接，这个npm包也不是我要用的那个。我的库是放在某个scope下的，这个链接指向的包与我的包同名，但不在scope内。<br>但是我要用的库已经全局安装过了，不明白为什么npm拉错了包。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm create pro // 原命令</span></span><br><span class="line">npm create @chen/pro // √</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>遇到这个报错的时候，如果也是使用脚手架，可以看看包是否在scope内。不然，可以先看看命令有没有语法错误，然后试试重启vscode、重新安装依赖、赋予当前用户对node完全控制的权限等方法。</p>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🛠如何使用CICD实现自动化部署</title>
      <link href="/2024/10/08/use-cicd-auto-deploy/"/>
      <url>/2024/10/08/use-cicd-auto-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h1><p>CICD 是“持续集成”（Continuous Integration）和“持续交付&#x2F;部署”（Continuous Delivery&#x2F;Deployment）的缩写。它是一种软件开发实践，旨在通过自动化工具和流程提高软件开发的质量和效率。</p><p>持续集成要求开发人员频繁地将代码提交到共享的版本控制系统中。</p><p>持续集成的流程：</p><ol><li>开发人员提交代码到版本控制系统（如 Git）。</li><li>自动化构建系统自动拉取最新的代码。&#x20;</li><li>执行自动化构建和测试。&#x20;</li><li>发现并报告错误或失败的测试。</li></ol><p>持续交付是在持续集成的基础上进一步扩展，确保每次提交的代码都可以随时部署到生产环境中。</p><p>持续交付的流程：</p><ol><li>自动化构建和测试。</li><li>自动化部署到测试环境。</li><li>手动或自动化部署到生产环境。</li></ol><p>持续部署是在持续交付的基础上进一步扩展，自动将通过测试的代码部署到生产环境中。</p><p>持续部署的流程：</p><ol><li>自动化构建和测试。</li><li>自动化部署到测试环境。&#x20;</li><li>自动化部署到生产环境。</li></ol><h1 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h1><p>GitHub Actions 是 GitHub 提供的一种强大的自动化工具，用于自动化构建、测试和部署代码。它允许你在 GitHub 仓库中直接编写和运行工作流（workflows），从而实现持续集成（CI）和持续部署（CD）。</p><p>Workflow：一个工作流（workflow）是由一系列步骤（steps）组成的 YAML 文件，用于定义自动化任务。</p><p>Job：一个工作流可以包含一个或多个作业（job），每个作业在不同的虚拟环境中运行。</p><p>Step：每个作业由一系列步骤（step）组成，每个步骤可以执行 shell 命令、运行脚本或使用预定义的动作（action）。</p><p>Action：动作（action）是 GitHub Actions 中的基本构建块，可以是自定义的脚本、容器或预定义的社区动作。</p><p>工作流的触发方式有很多，一般使用<strong>push</strong>。</p><p>常用动作如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- name: Checkout Repository</span><br><span class="line">  uses: actions/checkout@v3 # 检出仓库中的代码</span><br><span class="line"></span><br><span class="line">- name: Setup Node.js</span><br><span class="line">  uses: actions/setup-node@v3 # 设置node环境</span><br><span class="line">  with:</span><br><span class="line">    node-version: 16</span><br><span class="line"></span><br><span class="line">- name: Install Dependencies</span><br><span class="line">  run: npm install # 运行shell脚本或命令</span><br><span class="line"></span><br><span class="line">env: # 定义环境变量</span><br><span class="line">  NODE_ENV: production</span><br><span class="line">  DATABASE_URL: $&#123;&#123; secrets.DATABASE_URL &#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="创建工作流"><a href="#创建工作流" class="headerlink" title="创建工作流"></a>创建工作流</h1><p>在项目根目录下，创建文件.github&#x2F;workflows&#x2F;deploy.yml，内容如下所示，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">name: Deploy to GitHub Pages # 定义工作流的名称</span><br><span class="line"></span><br><span class="line">on: # 定义触发工作流的事件，如push、pull_request等</span><br><span class="line">  push: # 当有代码推送到特定分支时触发工作流</span><br><span class="line">    branches: # 限定触发工作的分支，数组</span><br><span class="line">      - main</span><br><span class="line">if: contains(github.event.head_commit.message, &#x27;deploy&#x27;) # 当提交一个包含 deploy 关键字的 commit 时触发</span><br><span class="line"># 以上，总的来说，在main分支提交包含 deploy 的commit 时，会触发工作流</span><br><span class="line"></span><br><span class="line">jobs: # 定义工作流中的作业（job）</span><br><span class="line">  build-and-deploy: # 定义一个名为 build-and-deploy 的作业，每个作业有一个唯一的名称</span><br><span class="line">    runs-on: ubuntu-latest # 指定作业运行的操作系统环境</span><br><span class="line"></span><br><span class="line">    steps: # 定义作业中的步骤（step）</span><br><span class="line">    - name: Checkout Repository # name 定义步骤的名称，便于识别和调试</span><br><span class="line">      uses: actions/checkout@v3 # 使用预定义的 actions/checkout 动作来检出代码。</span><br><span class="line">      # uses 后面指定动作的来源和版本，actions/checkout@v3 表示使用 actions/checkout 的第 3 版本。</span><br><span class="line"></span><br><span class="line">    - name: Setup Node.js</span><br><span class="line">      uses: actions/setup-node@v3 # 使用预定义的 actions/setup-node 动作来设置 Node.js 环境。</span><br><span class="line">      with: # 定义动作的输入参数</span><br><span class="line">        node-version: 20</span><br><span class="line">    </span><br><span class="line">    - name: Clear Cache</span><br><span class="line">      run: | # 执行 shell 命令或脚本。run 后面指定要执行的命令或脚本，| 表示多行命令。</span><br><span class="line">        rm -rf package-lock.json node_modules # 删除 package-lock.json 和 node_modules 目录。</span><br><span class="line"></span><br><span class="line">    - name: Install Dependencies</span><br><span class="line">      run: npm install # 安装项目依赖</span><br><span class="line"></span><br><span class="line">    - name: Build Project</span><br><span class="line">      run: npm run build # 构建项目</span><br><span class="line"></span><br><span class="line">    - name: Deploy to GitHub Pages</span><br><span class="line">      uses: peaceiris/actions-gh-pages@v3 # 使用预定义的 peaceiris/actions-gh-pages 动作来部署项目到 GitHub Pages。</span><br><span class="line">      with:</span><br><span class="line">        github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">        publish_dir: ./dist</span><br><span class="line">        user_name: &#x27;your name&#x27;</span><br><span class="line">        user_email: &#x27;your email&#x27;</span><br></pre></td></tr></table></figure><p>另外，项目需要添加base路径配置，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">base</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;/your repository/&#x27;</span> : <span class="string">&#x27;/&#x27;</span>,</span><br></pre></td></tr></table></figure><p>然后确保<code>Settings/Pages/Build and deployment中</code>，branch为<strong>gh-pages</strong>，目录为&#x2F;(root)。</p><p>最后，通过<code>Settings/Pages/Github Pages</code>下显示的地址就可以访问项目了。</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241007235921.png" alt="image"></p><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><p>问题1：推送无权限</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241007225937.png" alt="image"></p><p>解决办法：</p><p>检查权限设置，在<code>Settings/Actions/General/Workflow permissions</code>配置中，选择<code>Read and write permissions</code>。</p><p>问题2：Cannot find module @rollup&#x2F;rollup-linux-x64-gnu.</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/20241007230511.png" alt="image"></p><p>解决办法：</p><p>清除缓存，在<strong>npm install</strong>前添加如下配置，</p><pre><code>   - name: Clear Cache      run: |        rm -rf package-lock.json node_modules</code></pre>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CICD </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🧐文本溢出+完整内容提示</title>
      <link href="/2024/09/25/text-ellipsis/"/>
      <url>/2024/09/25/text-ellipsis/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在开发中，经常会遇到超出省略并显示…的需求。有时，还需要做到在鼠标移入的时候显示具体内容。这些都很简单，但如果要实现“<strong>文本如果超出就在鼠标移入时显示具体内容，文本不超出鼠标移入就不显示</strong>”，就有一点点麻烦。而且，文本长度通常不固定，需要这种处理的文本有多个。所以，在此总结一下如何实现这个功能。</p><h1 id="文本超出显示…"><a href="#文本超出显示…" class="headerlink" title="文本超出显示…"></a>文本超出显示…</h1><p>分为单行文本和多行文本2种情况，代码如下所示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 单行文本</span><br><span class="line"><span class="selector-class">.text-single</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多行文本</span><br><span class="line"><span class="selector-class">.text-multi</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">2</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法一：根据scrollWidth和offsetWidth判断是否显示tooltip"><a href="#方法一：根据scrollWidth和offsetWidth判断是否显示tooltip" class="headerlink" title="方法一：根据scrollWidth和offsetWidth判断是否显示tooltip"></a>方法一：根据scrollWidth和offsetWidth判断是否显示tooltip</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in info&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">:visible</span>=<span class="string">&quot;nameVisible[item.key]&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;item.content&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> @<span class="attr">mouseenter</span>=<span class="string">&quot;(e: any) =&gt; handleMouseEnterName(e, item.key)&quot;</span> @<span class="attr">mouseleave</span>=<span class="string">&quot;handleMouseLeaveName(item.key)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; item.content &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">function handleMouseEnter(e: any, key: string) &#123;</span><br><span class="line">  if (e.target.scrollWidth &gt; e.target.clientWidth) &#123;</span><br><span class="line">    nameVisible.value[key] = true;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    nameVisible.value[key] = false;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function handleMouseLeave(key: string) &#123;</span><br><span class="line">  nameVisible.value[key] = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法二：借助title属性"><a href="#方法二：借助title属性" class="headerlink" title="方法二：借助title属性"></a>方法二：借助title属性</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;this is title&quot;</span>&gt;</span>show title when hover<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>仅设置title属性还达不到想要的效果，而且不能修改title的样式。<br>如果要实现想要的效果，具体思路如下：用2份相同的文本A和B，B设置title属性，并且上移N行，父元素设置超出不显示。单行省略时N是2，超出2行省略时N是4。<br>原因：假设单行省略，B上移2行后，如果文本只有一行，B移出了父元素范围不显示，鼠标移入A不显示title；如果文本有多行，B覆盖了A，鼠标移入显示title。</p><p><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/73dea461a6644cefa6eb83e02723d14c~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg5rKz6LGa6byT6byT:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiNjM4MTYxNDYwNDAzMjg3In0=&rk3s=e9ecf3d6&x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&x-orig-expires=1727360824&x-orig-sign=q3n2O7WUPkXjjIBDSx0zrSdXVXA=" alt="633840727-9c53a45a583a5b50_fix732.webp"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span>&gt;</span>元素会被移出正常文档流，并不为元素预留<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">title</span>=<span class="string">&quot;元素会被移出正常文档流，并不为元素预留&quot;</span>&gt;</span>元素会被移出正常文档流，并不为元素预留<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">.wrap&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">    height: 1.5em;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.title&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: -3em;</span><br><span class="line">&#125;</span><br><span class="line">.txt&#123;</span><br><span class="line">  display: block;</span><br><span class="line">    max-height: 3em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此基础上，我们可以通过data-*属性和伪元素来设置title样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 隐藏title */</span></span><br><span class="line"><span class="selector-class">.title</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自定义title */</span></span><br><span class="line"><span class="selector-class">.title</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-title);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>参考链接：<br><a href="https://github.com/iplaces/blog/issues/3">文本溢出与 Tooltip，如何更好的处理二者</a><br><a href="https://segmentfault.com/a/1190000040057525#item-1">CSS 文本超出提示效果</a><br><a href="https://segmentfault.com/q/1010000045092125">设置title样式</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tooltip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS变量和CSS函数</title>
      <link href="/2024/09/23/css-var-func/"/>
      <url>/2024/09/23/css-var-func/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>CSS变量和CSS函数可以帮助开发者方便地实现功能。</p><h1 id="CSS变量"><a href="#CSS变量" class="headerlink" title="CSS变量"></a>CSS变量</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-bg-color</span>: brown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-bg-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS变量名以–开头；<br>变量可以继承父元素的值；<br>var第2个参数为备用值，变量不生效时被使用；</p><h1 id="CSS函数"><a href="#CSS函数" class="headerlink" title="CSS函数"></a>CSS函数</h1><p>常用的css函数包括：calc()、linear-gradient()、translate(), rotate(), scale()、rgba()、hsla()、attr()、clamp()、min()、max()。  </p><h2 id="calc-执行计算"><a href="#calc-执行计算" class="headerlink" title="calc()执行计算"></a>calc()执行计算</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">30px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="linear-gradient-创建一个线性渐变"><a href="#linear-gradient-创建一个线性渐变" class="headerlink" title="linear-gradient()创建一个线性渐变"></a>linear-gradient()创建一个线性渐变</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.background</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, red, yellow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="transform函数改变元素的形状、位置和尺寸"><a href="#transform函数改变元素的形状、位置和尺寸" class="headerlink" title="transform函数改变元素的形状、位置和尺寸"></a>transform函数改变元素的形状、位置和尺寸</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.moved</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="rgba-、hsla-定义颜色"><a href="#rgba-、hsla-定义颜色" class="headerlink" title="rgba()、hsla()定义颜色"></a>rgba()、hsla()定义颜色</h2><p>rgba(红，绿，蓝，透明度)<br>hsla(色调，饱和度，亮度，透明度)  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">99</span>, <span class="number">71</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="attr-引用元素的属性值"><a href="#attr-引用元素的属性值" class="headerlink" title="attr()引用元素的属性值"></a>attr()引用元素的属性值</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-tooltip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clamp-限制一个值在一个特定范围内"><a href="#clamp-限制一个值在一个特定范围内" class="headerlink" title="clamp()限制一个值在一个特定范围内"></a>clamp()限制一个值在一个特定范围内</h2><p>它接受三个参数：最小值、优选值和最大值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">2rem</span>, <span class="number">4vw</span> + <span class="number">1rem</span>, <span class="number">8rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的工作方式是：如果优选值小于最小值，那么返回最小值；如果优选值大于最大值，那么返回最大值；如果优选值在最小值和最大值之间，那么返回优选值。<br>例如，font-size: clamp(12px, 5vw, 24px); 这个 CSS 规则会设置字体大小为视口宽度的 5%，但是不会小于 12px，也不会大于 24px。这在响应式设计中非常有用，可以确保元素的大小在不同的设备和屏幕尺寸上都能保持合适的比例，同时也不会过小或过大。   </p><h2 id="min-、max-返回一组数值中最小或最大一个值"><a href="#min-、max-返回一组数值中最小或最大一个值" class="headerlink" title="min()、max()返回一组数值中最小或最大一个值"></a>min()、max()返回一组数值中最小或最大一个值</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">100%</span>, <span class="number">600px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数的类型：<br>&lt;length&gt;：长度值，如 px, em, rem, vw, vh 等。<br>&lt;number&gt;：数字值。<br>&lt;percentage&gt;：百分比。<br>&lt;calc()&gt;：另一个 calc() 函数的表达式。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>💐Docker基础知识总结</title>
      <link href="/2024/09/02/docker-tutorial/"/>
      <url>/2024/09/02/docker-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="1-docker的作用"><a href="#1-docker的作用" class="headerlink" title="1.docker的作用"></a>1.docker的作用</h1><p>打包、分发、部署<br>打包：就是把你软件运行所需的依赖、第三方库、软件打包到一起，变成一个安装包；<br>分发：你可以把你打包好的“安装包”上传到一个镜像仓库，其他人可以非常方便的获取和安装；<br>部署：拿着“安装包”就可以一个命令运行起来你的应用，自动模拟出一模一样的运行环境，不管是在 Windows&#x2F;Mac&#x2F;Linux。   </p><h1 id="2-docker命令"><a href="#2-docker命令" class="headerlink" title="2.docker命令"></a>2.docker命令</h1><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t test:v1 .     </span><br></pre></td></tr></table></figure><p>-t 指定镜像名字和版本号；<br>. 指在当前目录build，将当前目录作为构建上下文；<br>参考链接：<a href="https://docs.docker.com/engine/reference/commandline/build/">docker build命令</a></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -dt -p 8089:8089 demo</span></span><br></pre></td></tr></table></figure><p>-p port1:port2 指定端口号，port1要访问的端口号，port2docker内部使用的端口号；<br>-d 后台运行，-i 以交互模式运行容器，-t为容器重新分配一个伪输入终端，-it在一个新终端里运行容器，-dt在终端的后台运行容器；<br>参考链接：<a href="https://docs.docker.com/engine/reference/commandline/run/">docker run命令</a>  </p><p>其他常见命令如下所示：<br>docker ps 查看当前运行中的容器<br>docker exec -it  containerid sh  &#x2F;&#x2F; 进入容器，在容器内可以执行npm run start等命令<br>docker images 查看镜像列表<br>docker rm container-id 删除指定 id 的容器<br>docker stop&#x2F;start container-id 停止&#x2F;启动指定 id 的容器<br>docker rmi image-id 删除指定 id 的镜像</p><h1 id="3-Dockerfile文件"><a href="#3-Dockerfile文件" class="headerlink" title="3.Dockerfile文件"></a>3.Dockerfile文件</h1><p>文件中命令解释如下所示：  </p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine <span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app <span class="comment"># 指定shell语句运行的目录，如果目录不存在会自动创建</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> a.txt /app/ <span class="comment"># 将本地文件拷贝到容器的某目录下</span></span></span><br><span class="line"><span class="comment"># ADD a.txt /app/ # 拷贝本地或远程文件,可以自动解压缩，还会使构建缓存失效</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm i <span class="comment"># 运行shell语句，构建时运行</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">  [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;start&quot;</span>]  <span class="comment"># 指定镜像启动运行的脚本</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;start&quot;</span>] <span class="comment"># 类似CMD  </span></span></span><br><span class="line"><span class="keyword">MAINTAINER</span> &lt;name&gt;  <span class="comment"># 指定生成镜像的作者，LABEL更灵活。  </span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8089</span> <span class="comment"># 暴露镜像在容器内运行的端口号  </span></span><br><span class="line"><span class="keyword">ENV</span> PORT=<span class="number">8089</span> <span class="comment"># 指定环境变量，运行时也生效  </span></span><br><span class="line"><span class="keyword">ARG</span>   <span class="comment"># 构建参数，运行时无效，可以构建时候临时修改变量</span></span><br></pre></td></tr></table></figure><p>教程1：<a href="https://docker.easydoc.net/doc/81170005/cCewZWoN/lTKfePfP">https://docker.easydoc.net/doc/81170005/cCewZWoN/lTKfePfP</a><br>教程2：<a href="https://www.bilibili.com/video/BV1k7411B7QL/?spm_id_from=333.337.search-card.all.click&vd_source=6452cc89d77d512e999c37668481d36b">https://www.bilibili.com/video/BV1k7411B7QL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=6452cc89d77d512e999c37668481d36b</a><br>教程3：<a href="https://yeasy.gitbook.io/docker_practice/appendix/best_practices#dockerfile-zhi-ling">https://yeasy.gitbook.io/docker_practice/appendix/best_practices#dockerfile-zhi-ling</a>  </p><h1 id="4-dockerfile配置方案"><a href="#4-dockerfile配置方案" class="headerlink" title="4.dockerfile配置方案"></a>4.dockerfile配置方案</h1><p>方案1：<br>本地打包，然后复制到容器中。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node 启动</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json /app/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./.output /app/.output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8089</span></span><br><span class="line"><span class="keyword">ENV</span> PORT=<span class="number">8089</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /dist /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/nginx.conf</span></span><br></pre></td></tr></table></figure><p>方案2：把本地整个文件夹复制到容器中，在容器中打包。需要添加.dockerignore文件，避免上传的文件夹比较大。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /app &amp;&amp; yarn &amp;&amp; yarn build</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;run&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">cd</span> /app &amp;&amp; yarn &amp;&amp; yarn build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /app/dist /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/nginx.conf</span></span><br></pre></td></tr></table></figure><p>方案1需要在docker build前执行一遍yarn build，<br>方案2打包出来的镜像比较大。</p><h1 id="5-报错解决"><a href="#5-报错解决" class="headerlink" title="5.报错解决"></a>5.报错解决</h1><p>This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2<br>docker版本和本地电脑中node版本不匹配，升级docker中的node，或使用yarn。</p><h1 id="6-调试docker-build"><a href="#6-调试docker-build" class="headerlink" title="6.调试docker build"></a>6.调试docker build</h1><p>在dockerfile中只设置基础镜像，然后启动，在终端中运行需要的步骤，如果成功就把每个步骤的命令写入dockerfile文件中。</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14</span>-alpine</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;tail&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;/dev/null&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>进入调试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo .</span><br><span class="line">docker run -dt -p 8089:8089 demo</span><br><span class="line">docker <span class="built_in">exec</span> -it  containerid sh</span><br></pre></td></tr></table></figure><p>然后可以在终端中执行Dockerfile中想要添加的RUN命令。  </p><p>调试后关闭容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker stop <span class="built_in">id</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🔑输入密码时判断是否开启大写锁定</title>
      <link href="/2024/07/23/is-caps-lock/"/>
      <url>/2024/07/23/is-caps-lock/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>任何人在任何时候都有可能悄无声息的把大写锁定打开。在大部分输入时，用户可以轻易地发现输入的是大写。但，在输入密码时，用户就不容易发现了。为了更好的用户体验，我们可以在用户输入密码时提示大写锁定已开启。你也一定见过这种场景吧。</p><h1 id="提示用户大写锁定已开启"><a href="#提示用户大写锁定已开启" class="headerlink" title="提示用户大写锁定已开启"></a>提示用户大写锁定已开启</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#your-input-element&#x27;</span>);</span><br><span class="line"></span><br><span class="line">inputElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;CapsLock&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大写锁定是打开的&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大写锁定是关闭的&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码是在监听用户在输入框输入时判断的，当然也可以在按下任何键的时候判断。</p><h1 id="getModifierState"><a href="#getModifierState" class="headerlink" title="getModifierState"></a>getModifierState</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getModifierState</span>(key)</span><br></pre></td></tr></table></figure><p>KeyboardEvent.getModifierState() 方法返回指定修饰键的当前状态：如果修饰键处于活动状态（即修饰键被按下或锁定），则返回 true ，否则返回 false。</p><p>参数key还可以是Alt、NumLock等。对修饰符及不同平台的支持可见此<a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState#modifier_keys_on_firefox">链接</a>。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="检测快捷键组合"><a href="#检测快捷键组合" class="headerlink" title="检测快捷键组合"></a>检测快捷键组合</h3><p>检查多个修饰键是否同时被按下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;Control&#x27;</span>) &amp;&amp; event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;Alt&#x27;</span>) &amp;&amp; event.<span class="property">key</span> === <span class="string">&#x27;S&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 执行Ctrl+Alt+S的快捷操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优化输入体验"><a href="#优化输入体验" class="headerlink" title="优化输入体验"></a>优化输入体验</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;NumLock&#x27;</span>) &amp;&amp; event.<span class="property">target</span>.<span class="property">type</span> === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 提示用户NumLock可能影响输入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="创建自定义键盘快捷操作"><a href="#创建自定义键盘快捷操作" class="headerlink" title="创建自定义键盘快捷操作"></a>创建自定义键盘快捷操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;Shift&#x27;</span>) &amp;&amp; event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;Alt&#x27;</span>) &amp;&amp; event.<span class="property">key</span> === <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 执行自定义操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="仅能使用getModifierState的场景"><a href="#仅能使用getModifierState的场景" class="headerlink" title="仅能使用getModifierState的场景"></a>仅能使用getModifierState的场景</h2><h3 id="检测大写锁定"><a href="#检测大写锁定" class="headerlink" title="检测大写锁定"></a>检测大写锁定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;CapsLock&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Caps Lock is active&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="检测数字锁定"><a href="#检测数字锁定" class="headerlink" title="检测数字锁定"></a>检测数字锁定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;NumLock&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Num Lock is active&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>某些情况下，可能误触数字锁定键，或者初始某些键盘初始就是数字锁定的。当你输入u，显示4；当你输入k，显示的是2。这时候就需要按一下F11解除数字锁定。</p><h3 id="检测滚动锁定"><a href="#检测滚动锁定" class="headerlink" title="检测滚动锁定"></a>检测滚动锁定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;ScrollLock&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Scroll Lock is active&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="检测其他特殊修饰键"><a href="#检测其他特殊修饰键" class="headerlink" title="检测其他特殊修饰键"></a>检测其他特殊修饰键</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;AltGraph&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;AltGraph is active&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="title function_">getModifierState</span>(<span class="string">&#x27;OS&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;OS key (Windows key or Command key) is active&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState">MDN: getModifierState</a><br><a href="https://davidwalsh.name/detect-caps-lock">David Walsh: detect-caps-lock</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeKey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】200行JS实现的虚拟DOM</title>
      <link href="/2024/07/04/virtual-node/"/>
      <url>/2024/07/04/virtual-node/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这篇文章中，作者将演示如何用200多行JS实现一个虚拟DOM。而且实现的是一个功能齐全、性能足够的npm库。主要目标是说明react、vue等框架背后的基本技术。react、vue、Elm都允许用户描述网页外观，从而简化了交互式网页创建，不必使用添加&#x2F;删除元素来实现该页面，它们都是通过虚拟DOM来做到的。</p><p>Elm是一个纯函数式的语言，它声明式的创建网页。</p><h1 id="虚拟DOM的目标"><a href="#虚拟DOM的目标" class="headerlink" title="虚拟DOM的目标"></a>虚拟DOM的目标</h1><p>它与性能无关。</p><p>虚拟DOM是一种抽象，它用于简化修改UI的操作。</p><p>用户描述期待的外观，库负责将DOM从当前状态转换成用户期望的状态。</p><h1 id="关键思想"><a href="#关键思想" class="headerlink" title="关键思想"></a>关键思想</h1><p>该库将接管单个DOM并在其中进行操作。</p><p>该元素最初应该是空的，而且假设除了该库没有任何东西能修改它，这是用户应用程序的根。</p><p>如果只有我们能修改它，那么我们不需要检查就可以知道元素里都有什么。如何知道？通过追踪我们对它的所有修改。</p><p>我们将通过保留包含每个HTML元素简化表示的结构，来追踪根节点的内容。准确的说，是每个DOM节点。</p><p>因为这个表示是真实DOM的映射，不在真实的DOM中，所以称其为虚拟节点。它们组成虚拟DOM。</p><p>用户永远不会创建真实的 DOM 节点，只会创建那些虚拟的节点。他们会告诉我们通过使用虚拟节点整个页面应该是什么样子。然后我们的库将负责修改真实的 DOM，使其符合我们的预期。</p><p>为了知道要修改什么，我们的库将获取用户创建的虚拟 DOM，并将其与表示页面当前外观的虚拟 DOM 进行比较。这个过程称为比较。它将记录差异，例如应添加或删除哪些元素以及应添加或删除哪些属性。比较的输出是虚拟 DOM 之间的差异。</p><p>然后我们将该差异的更改应用到真实的 DOM 中。一旦我们完成修改，用户创建的虚拟 DOM 就成为真实 DOM 的当前真实表示。</p><p>所以，对于UI部分，我们需要以下3点：</p><ul><li><p>创建DOM的虚拟表示；</p></li><li><p>对比虚拟DOM节点；</p></li><li><p>将虚拟DOM的差异更新到真实的HTML元素上；</p></li></ul><p>构建之后，我们将看到如何通过在短短几行代码中添加状态处理来充分利用这种虚拟DOM作为一个强大的库。</p><blockquote><p>总的来说，用一个对象表示一个DOM节点，对象之间构成树状关系。这种对象只有当前库能够修改，追踪库对这种对象的所有修改。发生变化时，创建新的对象，对比新旧对象差异，然后按差异修改真实DOM。</p></blockquote><h1 id="代表DOM"><a href="#代表DOM" class="headerlink" title="代表DOM"></a>代表DOM</h1><p>我们希望这个结构包含尽可能少的信息，以忠实的表示页面中的内容。</p><p>DOM节点具有标签名、属性和子节点。所以表示DOM的对象的结构如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exampleButton = &#123; </span><br><span class="line">    tag : <span class="string">&quot;button&quot;</span>, </span><br><span class="line">    <span class="attr">properties</span>: &#123; </span><br><span class="line">        <span class="attr">class</span>: <span class="string">&quot;primary&quot;</span>, </span><br><span class="line">        <span class="attr">disabled</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">onClick</span>: doSomething </span><br><span class="line">    &#125;, </span><br><span class="line">    children : [] <span class="comment">// 数组元素类型与当前对象相同 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>文本节点只有文字内容，需要单独表示，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exampleText = &#123; <span class="attr">text</span>: <span class="string">&quot;Hello World&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>我们可以通过检查tag或text属性是否存在来区分DOM节点和文本节点。</p><p>方便起见，我们可以创建一个函数来创建这些节点，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">tag, properties, children</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> &#123; tag, properties, children); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">text</span>(<span class="params">content</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> &#123; text : content &#125;; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，我们可以轻松的创建出复杂的嵌套结构，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pausedScreen = <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, &#123;&#125;, [ </span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&quot;h2&quot;</span>, &#123;&#125;, <span class="title function_">text</span>(<span class="string">&quot;Game Paused&quot;</span>)), </span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">onClick</span>: resumeGame &#125;, [ <span class="title function_">text</span>(<span class="string">&quot;Resume&quot;</span>) ]), </span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">onClick</span>: quitGame &#125;, [ <span class="title function_">text</span>(<span class="string">&quot;Quit&quot;</span>) ]) </span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p>在开始比较之前，先思考一下比较操作的期望输出是什么。</p><p>比较操作描述如何修改元素，我们可以根据修改类型来判断输出。</p><ul><li><p>创建：应返回要添加的虚拟DOM节点；</p></li><li><p>删除：无返回；</p></li><li><p>替换：返回新的DOM节点；</p></li><li><p>修改某节点：要添加或删除的属性、对子节点的修改数组；</p></li><li><p>无变化：不需要任何操作。</p></li></ul><p>你可能想知道为什么有替换，因为除非用户为每个虚拟DOM节点提供一个唯一标识符，否则我们无法确定子元素的顺序是否发生变化。</p><p>比如，初始DOM描述如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>, </span><br><span class="line">    <span class="attr">properties</span>: &#123;&#125;, </span><br><span class="line">    <span class="attr">chidlren</span>: [ &#123; <span class="attr">text</span>: <span class="string">&quot;One&quot;</span> &#125;, &#123; <span class="attr">text</span>: <span class="string">&quot;Two&quot;</span> &#125;, &#123; <span class="attr">text</span>: <span class="string">&quot;Three&quot;</span> &#125; ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发生修改后的DOM描述如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>, </span><br><span class="line">    <span class="attr">properties</span>: &#123;&#125;, </span><br><span class="line">    <span class="attr">chidlren</span>: [ &#123; <span class="attr">text</span>: <span class="string">&quot;Three&quot;</span> &#125; &#123; <span class="attr">text</span>: <span class="string">&quot;Two&quot;</span> &#125;, &#123; <span class="attr">text</span>: <span class="string">&quot;One&quot;</span> &#125;, ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一和三交换了位置，我们必须将第一个对象的每个子对象与第二个对象的每个子对象进行比较，这效率太低了。所以，我们通过children数组的索引来识别元素。这意味着我们仅需交互第一个和第三个子对象。</p><p>所以，当插入一个元素作为最后一个子元素时，使用create。否则，使用replace。</p><p>如果没有唯一ID标识子元素，我们将通过O(n²)的比较才知道交换了位置。</p><p>现在，让我们来直接深入并实现这个diff函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">diffOne</span>(<span class="params">l, r</span>) &#123; </span><br><span class="line">    <span class="keyword">const</span> isText = l.<span class="property">text</span> !== <span class="literal">undefined</span>; </span><br><span class="line">    <span class="comment">// 处理文本节点 </span></span><br><span class="line">    <span class="keyword">if</span> (isText) &#123; </span><br><span class="line">        <span class="comment">// replace替换 noop无变化 </span></span><br><span class="line">        <span class="keyword">return</span> l.<span class="property">text</span> !== r.<span class="property">text</span> ? &#123;<span class="attr">replace</span>: r&#125; : &#123;<span class="attr">noop</span>: <span class="literal">true</span>&#125;; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 替换整个节点 </span></span><br><span class="line">    <span class="keyword">if</span> (l.<span class="property">tag</span> !== r.<span class="property">tag</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">replace</span>: r&#125;; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 接下来是修改 </span></span><br><span class="line">    <span class="comment">// 获取删除的属性 </span></span><br><span class="line">    <span class="keyword">const</span> remove = []; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> prop <span class="keyword">in</span> l.<span class="property">properties</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (r.<span class="property">properties</span>[prop] === <span class="literal">undefined</span>) &#123; </span><br><span class="line">            remove.<span class="title function_">push</span>(prop); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 获取新增和修改的属性 </span></span><br><span class="line">    <span class="keyword">const</span> set = &#123;&#125;; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> prop <span class="keyword">in</span> r.<span class="property">properties</span>) &#123; </span><br><span class="line">        <span class="keyword">if</span> (r.<span class="property">properties</span>[prop] !== l.<span class="property">properties</span>[prop]) &#123; </span><br><span class="line">            set[prop] = r.<span class="property">properties</span>[prop]; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 对比children </span></span><br><span class="line">    <span class="keyword">const</span> children = <span class="title function_">diffList</span>(l.<span class="property">children</span>, r.<span class="property">children</span>); </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">modify</span>: &#123;remove, set, children&#125;&#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作为一种优化，我们发现，当没有属性更改而且所有子元素修改都是noop时，可以设置该元素为noop。</p><p>对比children的方法如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">diffList</span>(<span class="params">ls, ls</span>) &#123; </span><br><span class="line">    <span class="keyword">const</span> length = <span class="title class_">Math</span>.<span class="title function_">max</span>(ls.<span class="property">length</span>, rs.<span class="property">length</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123;length&#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">if</span> (ls[i] === <span class="literal">undefined</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">create</span>: rs[i]&#125;; </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs[i] === <span class="literal">undefined</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">remove</span>: <span class="literal">true</span>&#125;; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="title function_">diffOne</span>(ls[i], rs[i]); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="应用差异"><a href="#应用差异" class="headerlink" title="应用差异"></a>应用差异</h1><p>我们已经可以创建一个虚拟 DOM 并对其进行比较。现在是时候将 diff 应用于真实的 DOM 了。</p><p>apply函数接收2个参数，第一个参数是一个真实的DOM节点，第二个参数是上一步中的子节点的差异数组。</p><p>apply函数没有任何返回值，它的主要目的是执行修改DOM的副作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">apply</span>(<span class="params">el, childrenDiff</span>) &#123; </span><br><span class="line">    <span class="keyword">const</span> children = <span class="title class_">Array</span>.<span class="title function_">from</span>(el.<span class="property">childNodes</span>); </span><br><span class="line">    childrenDiff.<span class="title function_">forEach</span>(<span class="function">(<span class="params">diff, i</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">const</span> action = <span class="title class_">Object</span>.<span class="title function_">keys</span>(diff)[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">switch</span> (action) &#123; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;remove&#x27;</span>: </span><br><span class="line">                children[i].<span class="title function_">remove</span>(); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;modify&#x27;</span>: </span><br><span class="line">                <span class="title function_">modify</span>(children[i], diff.<span class="property">modify</span>); </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;create&#x27;</span>: </span><br><span class="line">                <span class="comment">// 添加&#123;&#125;是为了让下面创建的child在块级作用域中 </span></span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="keyword">const</span> child = <span class="title function_">create</span>(diff.<span class="property">create</span>); </span><br><span class="line">                    el.<span class="title function_">appendChild</span>(child); </span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                &#125; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;replace&#x27;</span>: </span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="keyword">const</span> child = <span class="title function_">create</span>(diff.<span class="property">replace</span>); </span><br><span class="line">                    children[i].<span class="title function_">replaceWith</span>(child); </span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                &#125; </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;noop&#x27;</span>: </span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>在处理创建和修改之前，先考虑一下如何处理事件监听器。</p><p>期望方便添加和删除监听器，不会留下监听器未绑定，一个节点的每个事件只有一个监听器，事件名作为key且不能重复。</p><p>我们可以向DOM对象添加一个自定义的特殊属性，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element[<span class="string">&quot;_ui&quot;</span>] = &#123; listeners : &#123; <span class="attr">click</span>: doSomething &#125; &#125;;</span><br></pre></td></tr></table></figure><p>创建一个listener函数，一旦触发事件，该函数就会获取此事件，并分配给对应的用户自定义函数来处理，如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">listener</span>(<span class="params">event</span>) &#123; </span><br><span class="line">    <span class="keyword">const</span> el = event.<span class="property">currentTarget</span>; </span><br><span class="line">    <span class="keyword">const</span> handler = el.<span class="property">_ui</span>.<span class="property">listeners</span>[event.<span class="property">type</span>]; </span><br><span class="line">    <span class="title function_">handler</span>(event); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用这种办法，在修改监听器函数时，不需要调用addEventListener和removeEventListener，只需要修改listeners中对象的值。</p><p>接下来，我们创建一个函数来将事件监听器添加到DOM节点上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setListener</span>(<span class="params">el, event, handle</span>) &#123; </span><br><span class="line">    <span class="keyword">if</span> (el.<span class="property">_ui</span>.<span class="property">listeners</span>[event] === <span class="literal">undefined</span>) &#123; </span><br><span class="line">        el.<span class="title function_">addEventListener</span>(event, listener); </span><br><span class="line">    &#125; </span><br><span class="line">    el.<span class="property">_ui</span>.<span class="property">listeners</span>[event] = handle; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，我们还需要判断properties中的属性名是否是事件监听器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">eventName</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&quot;on&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>一部分属性需要调用setAttribute设置，另一部分属性需要直接在DOM节点上设置。比如，给复选框设置是否选中，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">checkboxDom.<span class="property">checked</span> = <span class="literal">true</span>; <span class="comment">// √ </span></span><br><span class="line">checkboxDom.<span class="title function_">setAttribute</span>(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>); <span class="comment">// × 不生效</span></span><br></pre></td></tr></table></figure><p>可以将其中一部分属性放在列表中，根据是否存在于列表中来决定设置属性的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="keyword">new</span> <span class="title class_">Set</span>([ <span class="string">&quot;autoplay&quot;</span>, <span class="string">&quot;checked&quot;</span>, <span class="string">&quot;checked&quot;</span>, <span class="string">&quot;contentEditable&quot;</span>, <span class="string">&quot;controls&quot;</span>,</span><br><span class="line">  <span class="string">&quot;default&quot;</span>, <span class="string">&quot;hidden&quot;</span>, <span class="string">&quot;loop&quot;</span>, <span class="string">&quot;selected&quot;</span>, <span class="string">&quot;spellcheck&quot;</span>, <span class="string">&quot;value&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;title&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accessKey&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;dropzone&quot;</span>, <span class="string">&quot;lang&quot;</span>, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;preload&quot;</span>, <span class="string">&quot;poster&quot;</span>,</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>, <span class="string">&quot;label&quot;</span>, <span class="string">&quot;srclang&quot;</span>, <span class="string">&quot;sandbox&quot;</span>, <span class="string">&quot;srcdoc&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;value&quot;</span>, <span class="string">&quot;accept&quot;</span>,</span><br><span class="line">  <span class="string">&quot;placeholder&quot;</span>, <span class="string">&quot;acceptCharset&quot;</span>, <span class="string">&quot;action&quot;</span>, <span class="string">&quot;autocomplete&quot;</span>, <span class="string">&quot;enctype&quot;</span>, <span class="string">&quot;method&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;htmlFor&quot;</span>, <span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>, <span class="string">&quot;step&quot;</span>, <span class="string">&quot;wrap&quot;</span>, <span class="string">&quot;useMap&quot;</span>, <span class="string">&quot;shape&quot;</span>,</span><br><span class="line">  <span class="string">&quot;coords&quot;</span>, <span class="string">&quot;align&quot;</span>, <span class="string">&quot;cite&quot;</span>, <span class="string">&quot;href&quot;</span>, <span class="string">&quot;target&quot;</span>, <span class="string">&quot;download&quot;</span>, <span class="string">&quot;download&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hreflang&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;headers&quot;</span>, <span class="string">&quot;scope&quot;</span>, <span class="string">&quot;span&quot;</span> ]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setProperty</span>(<span class="params">prop, value, el</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="title function_">has</span>(prop)) &#123;</span><br><span class="line">    el[prop] = value;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.<span class="title function_">setAttribute</span>(prop, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建和修改"><a href="#创建和修改" class="headerlink" title="创建和修改"></a>创建和修改</h2><p>根据虚拟DOM对象创建真实DOM对象的方法如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="comment">// 文本节点</span></span><br><span class="line">  <span class="keyword">if</span> (vnode.<span class="property">text</span>!== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(vnode.<span class="property">text</span>);</span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 元素节点</span></span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">tag</span>);</span><br><span class="line">  el.<span class="property">_ui</span> = &#123;<span class="attr">listeners</span>: &#123;&#125;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> prop <span class="keyword">in</span> vnode.<span class="property">properties</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> event = <span class="title function_">eventName</span>(prop);</span><br><span class="line">    <span class="keyword">const</span> value = vnode.<span class="property">properties</span>[prop];</span><br><span class="line">    <span class="keyword">if</span> (event !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">setListener</span>(el, event, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setProperty</span>(prop, value, el);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> childVNode <span class="keyword">of</span> vnode.<span class="property">children</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> child = <span class="title function_">create</span>(childVNode);</span><br><span class="line">    el.<span class="title function_">appendChild</span>(child);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">modify</span>(<span class="params">el, diff</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> prop <span class="keyword">in</span> diff.<span class="property">remove</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> event = <span class="title function_">eventName</span>(prop);</span><br><span class="line">    <span class="keyword">if</span> (event === <span class="literal">null</span>) &#123;</span><br><span class="line">      el.<span class="title function_">removeAttribute</span>(prop);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="property">_ui</span>.<span class="property">listeners</span>[event] = <span class="literal">undefined</span>;</span><br><span class="line">      el.<span class="title function_">removeEventListener</span>(event, listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> prop <span class="keyword">in</span> diff.<span class="property">set</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = diff.<span class="property">set</span>[prop];</span><br><span class="line">    <span class="keyword">const</span> event = <span class="title function_">eventName</span>(prop);</span><br><span class="line">    <span class="keyword">if</span> (event === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">setProperty</span>(prop, value, el);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">setListener</span>(el, event, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">apply</span>(el, diff.<span class="property">children</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，modify和apply存在递归调用。</p><h1 id="处理状态"><a href="#处理状态" class="headerlink" title="处理状态"></a>处理状态</h1><p>我们现在有了一个完整的虚拟DOM渲染实现。使用h和text可以创建一个虚拟DOM，使用apply和diffList将其具体化为真实DOM并更新它。</p><p>我们可以到此为止，但我认为如果没有结构化的方法来处理状态更改，那么实现是不完整的。总之，虚拟 DOM 的全部意义在于，当状态发生变化时，您可以重复地重新创建它。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>有两种类型的用户定义值：</p><ul><li><p>应用程序状态<strong>state</strong>：包含渲染VDOM所需的所有信息的值；</p></li><li><p>应用程序消息<strong>msg</strong>：包含有关如何更改状态的信息的值；</p></li></ul><p>我们会要求用户实现两个功能：</p><ul><li><p><strong>view</strong>函数：参数是应用程序状态，返回值是VDOM；</p></li><li><p><strong>update</strong>函数：参数是应用程序状态和一条应用程序消息，返回值是一个新的应用程序状态；</p></li></ul><p>用户在程序开始时提供这两个函数，VDOM 库将控制何时调用它们。用户从不直接调用它们。</p><p>另外，用户根据我们返回的<strong>enqueue</strong>函数来发出要通过 update 函数处理的消息。即，调用enqueue时传的参数会是update函数的第2个参数。</p><p>最后，用户还需要提供初始状态和VDOM挂载的节点。</p><p>我们定义一个名为 init 的函数，它将获取用户所需的所有输入并启动应用程序。它将返回该应用程序的 enqueue 函数。这种设计允许我们在同一页面中运行多个 VDOM 应用程序，并且每个应用程序都有自己的 enqueue 功能。</p><p>以实现一个计数器为例，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">view</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, &#123;&#125;, [ <span class="title function_">text</span>(<span class="string">`Counter: <span class="subst">$&#123;state.counter&#125;</span>`</span>) ])</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">state, msg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; counter : state.<span class="property">counter</span> + msg &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.my-application&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; enqueue &#125; = <span class="title function_">init</span>(root, initialState, update, view);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">enqueue</span>(<span class="number">1</span>), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h2><p>思考一下如何实现init函数。</p><p>我们肯定会为每条消息调用一次 update 。但我们不需要每次状态更改时都调用 view ，因为这可能会导致我们更新 DOM 的频率超过浏览器能够显示 DOM 更新的频率。我们希望<em>每个动画帧</em>最多调用一次 view 。</p><p>此外，我们希望用户能够根据需要多次调用 enqueue ，并且可以<em>从任何地方调用</em>，而不会导致我们的应用程序崩溃。这意味着我们应该接受 enqueue 被调用，即使是在 update 函数中。</p><p>我们将通过解耦消息队列、更新状态和更新 DOM 来实现这一点。</p><p>调用 enqueue 只会将消息添加到数组中。然后，在每个动画帧上，我们将获取所有排队的消息，并通过在每个动画帧上调用 update 来处理它们。处理完所有消息后，我们将使用 view 函数呈现结果状态。</p><p>具体实现如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">root, initialState, update, view</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> state = initialState;</span><br><span class="line">  <span class="keyword">let</span> nodes = []; <span class="comment">// 虚拟DOM</span></span><br><span class="line">  <span class="keyword">let</span> queue = []; <span class="comment">// 消息队列</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">enqueue</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    queue.<span class="title function_">push</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据当前状态渲染页面</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNodes = <span class="title function_">view</span>(state); <span class="comment">// 根据初始状态返回虚拟node</span></span><br><span class="line">    <span class="title function_">apply</span>(root, <span class="title function_">diffList</span>(nodes, newNodes)); <span class="comment">// 对比新旧虚拟node差异，然后更新真实DOM</span></span><br><span class="line">    nodes = newNodes; <span class="comment">// 将虚拟DOM设置为新的</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">updateState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> msgs = queue;</span><br><span class="line">      <span class="comment">// 将队列替换为空数组，以便我们在本轮中不处理新排队的消息</span></span><br><span class="line">      queue = [];</span><br><span class="line">      <span class="keyword">for</span> (msg <span class="keyword">of</span> msgs) &#123;</span><br><span class="line">        state = <span class="title function_">update</span>(state, msg);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">draw</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(updateState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>();         <span class="comment">// 根据初始状态渲染</span></span><br><span class="line">  <span class="title function_">updateState</span>();  <span class="comment">// 启动状态更新周期</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; enqueue &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前，不能从update和view中调用enqueue，因为enqueue从init返回，而执行init时期望已定义update和view。</p><p>想在update中调用enqueue，可以将enqueue作为update的第3个参数，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state = <span class="title function_">update</span>(state, msg, enqueue)</span><br></pre></td></tr></table></figure><p>接下来思考如何在view中调用enqueue。</p><p>用户在渲染期间不会调用 enqueue 。他们会调用它来响应某些事件，例如 onClick 或 onInput 。因此，用户为这些事件创建的处理函数接收 enqueue 作为参数以及事件对象是有意义的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="title function_">h</span>(</span><br><span class="line">    <span class="string">&quot;button&quot;</span>,</span><br><span class="line">    &#123; onClick : <span class="function">(<span class="params">_event, enqueue</span>) =&gt;</span> &#123; <span class="title function_">enqueue</span>(<span class="number">1</span>) &#125; &#125;,</span><br><span class="line">    [<span class="title function_">text</span>(<span class="string">&quot;Increase counter&quot;</span>)]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们可以通过将事件处理程序返回的与 undefined 不同的任何值都视为消息来使其变得更加容易。所以可以简写为如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> button = <span class="title function_">h</span>(</span><br><span class="line">    <span class="string">&quot;button&quot;</span>,</span><br><span class="line">    &#123; onClick : <span class="function">() =&gt;</span> <span class="number">1</span> &#125;,</span><br><span class="line">    [<span class="title function_">text</span>(<span class="string">&quot;Increase counter&quot;</span>)]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们调度事件的单个 listener 函数需要访问 enqueue 。传递它的最简单方法是通过已保存用户定义侦听器的<br>**_ui ** 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">listener</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = event.<span class="property">currentTarget</span>;</span><br><span class="line">  <span class="keyword">const</span> handler = el.<span class="property">_ui</span>.<span class="property">listeners</span>[event.<span class="property">type</span>];</span><br><span class="line">  <span class="keyword">const</span> enqueue = el.<span class="property">_ui</span>.<span class="property">enqueue</span>;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="title function_">handler</span>(event);</span><br><span class="line">  <span class="keyword">if</span> (msg !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title function_">enqueue</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要在节点创建时将 enqueue 添加到 _ui ，我们需要将其传递给 apply、 modify 和 create 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">apply</span>(<span class="params">el, enqueue, childrenDiff</span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modify</span>(<span class="params">el, enqueue, diff</span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">enqueue, vnode</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="keyword">new</span> <span class="title class_">Set</span>([ <span class="string">&quot;autoplay&quot;</span>, <span class="string">&quot;checked&quot;</span>, <span class="string">&quot;checked&quot;</span>, <span class="string">&quot;contentEditable&quot;</span>, <span class="string">&quot;controls&quot;</span>,</span><br><span class="line">  <span class="string">&quot;default&quot;</span>, <span class="string">&quot;hidden&quot;</span>, <span class="string">&quot;loop&quot;</span>, <span class="string">&quot;selected&quot;</span>, <span class="string">&quot;spellcheck&quot;</span>, <span class="string">&quot;value&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;title&quot;</span>,</span><br><span class="line">  <span class="string">&quot;accessKey&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;dropzone&quot;</span>, <span class="string">&quot;lang&quot;</span>, <span class="string">&quot;src&quot;</span>, <span class="string">&quot;alt&quot;</span>, <span class="string">&quot;preload&quot;</span>, <span class="string">&quot;poster&quot;</span>,</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>, <span class="string">&quot;label&quot;</span>, <span class="string">&quot;srclang&quot;</span>, <span class="string">&quot;sandbox&quot;</span>, <span class="string">&quot;srcdoc&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;value&quot;</span>, <span class="string">&quot;accept&quot;</span>,</span><br><span class="line">  <span class="string">&quot;placeholder&quot;</span>, <span class="string">&quot;acceptCharset&quot;</span>, <span class="string">&quot;action&quot;</span>, <span class="string">&quot;autocomplete&quot;</span>, <span class="string">&quot;enctype&quot;</span>, <span class="string">&quot;method&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>, <span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;htmlFor&quot;</span>, <span class="string">&quot;max&quot;</span>, <span class="string">&quot;min&quot;</span>, <span class="string">&quot;step&quot;</span>, <span class="string">&quot;wrap&quot;</span>, <span class="string">&quot;useMap&quot;</span>, <span class="string">&quot;shape&quot;</span>,</span><br><span class="line">  <span class="string">&quot;coords&quot;</span>, <span class="string">&quot;align&quot;</span>, <span class="string">&quot;cite&quot;</span>, <span class="string">&quot;href&quot;</span>, <span class="string">&quot;target&quot;</span>, <span class="string">&quot;download&quot;</span>, <span class="string">&quot;download&quot;</span>,</span><br><span class="line">  <span class="string">&quot;hreflang&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;headers&quot;</span>, <span class="string">&quot;scope&quot;</span>, <span class="string">&quot;span&quot;</span> ]);</span><br><span class="line"><span class="comment">// 给真实DOM添加属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setProperty</span>(<span class="params">prop, value, el</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (props.<span class="title function_">has</span>(prop)) &#123;</span><br><span class="line">    el[prop] = value;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.<span class="title function_">setAttribute</span>(prop, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当DOM触发点击等事件时调用这个方法。执行绑定的监听回调函数，把监听回调函数的返回值作为消息传递给enqueue，enqueue来更新消息队列。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listener</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = event.<span class="property">currentTarget</span>;</span><br><span class="line">  <span class="keyword">const</span> handler = el.<span class="property">_ui</span>.<span class="property">listeners</span>[event.<span class="property">type</span>];</span><br><span class="line">  <span class="keyword">const</span> enqueue = el.<span class="property">_ui</span>.<span class="property">enqueue</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> msg = <span class="title function_">handler</span>(event);</span><br><span class="line">  <span class="keyword">if</span> (msg !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="title function_">enqueue</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在虚拟DOM创建真实DOM时绑定监听回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setListener</span>(<span class="params">el, event, handle</span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">_ui</span>.<span class="property">listeners</span>[event] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    el.<span class="title function_">addEventListener</span>(event, listener);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  el.<span class="property">_ui</span>.<span class="property">listeners</span>[event] = handle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断event是否是可以监听的事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eventName</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="title function_">indexOf</span>(<span class="string">&quot;on&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">slice</span>(<span class="number">2</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较虚拟DOM</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffOne</span>(<span class="params">l, r</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> isText = l.<span class="property">text</span> !== <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">if</span> (isText) &#123;</span><br><span class="line">    <span class="keyword">return</span> l.<span class="property">text</span> !== r.<span class="property">text</span></span><br><span class="line">      ? &#123; <span class="attr">replace</span>: r &#125;</span><br><span class="line">      : &#123; noop : <span class="literal">true</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (l.<span class="property">tag</span> !== r.<span class="property">tag</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">replace</span>: r &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> remove = [];</span><br><span class="line">  <span class="keyword">const</span> set = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> l.<span class="property">properties</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.<span class="property">properties</span>[prop] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      remove.<span class="title function_">push</span>(prop);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> r.<span class="property">properties</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (r.<span class="property">properties</span>[prop] !== l.<span class="property">properties</span>[prop]) &#123;</span><br><span class="line">      set[prop] = r.<span class="property">properties</span>[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> children = <span class="title function_">diffList</span>(l.<span class="property">children</span>, r.<span class="property">children</span>);</span><br><span class="line">  <span class="keyword">const</span> noChildrenChange = children.<span class="title function_">every</span>(<span class="function"><span class="params">e</span> =&gt;</span> e.<span class="property">noop</span>);</span><br><span class="line">  <span class="keyword">const</span> noPropertyChange =</span><br><span class="line">        (remove.<span class="property">length</span> === <span class="number">0</span>) &amp;&amp;</span><br><span class="line">        (<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(set)).<span class="property">length</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (noChildrenChange &amp;&amp; noPropertyChange)</span><br><span class="line">    ? &#123; noop : <span class="literal">true</span> &#125;</span><br><span class="line">    : &#123; <span class="attr">modify</span>: &#123; remove, set, children &#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffList</span>(<span class="params">ls, rs</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> length = <span class="title class_">Math</span>.<span class="title function_">max</span>(ls.<span class="property">length</span>, rs.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; length &#125;)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">_,i</span>) =&gt;</span></span><br><span class="line">      (ls[i] === <span class="literal">undefined</span>)</span><br><span class="line">      ? &#123; <span class="attr">create</span>: rs[i] &#125;</span><br><span class="line">      : (rs[i] == <span class="literal">undefined</span>)</span><br><span class="line">      ? &#123; <span class="attr">remove</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      : <span class="title function_">diffOne</span>(ls[i], rs[i])</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据新旧虚拟DOM比较结果，创建新的真实DOM</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">enqueue, vnode</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (vnode.<span class="property">text</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(vnode.<span class="property">text</span>);</span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">tag</span>);</span><br><span class="line">  el.<span class="property">_ui</span> = &#123; listeners : &#123;&#125;, enqueue &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> vnode.<span class="property">properties</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> event = <span class="title function_">eventName</span>(prop);</span><br><span class="line">    <span class="keyword">const</span> value = vnode.<span class="property">properties</span>[prop];</span><br><span class="line">    (event === <span class="literal">null</span>)</span><br><span class="line">      ? <span class="title function_">setProperty</span>(prop, value, el)</span><br><span class="line">      : <span class="title function_">setListener</span>(el, event, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> childVNode <span class="keyword">of</span> vnode.<span class="property">children</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> child = <span class="title function_">create</span>(enqueue, childVNode);</span><br><span class="line">    el.<span class="title function_">appendChild</span>(child);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据单个新旧虚拟DOM比较结果，修改真实DOM</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modify</span>(<span class="params">el, enqueue, diff</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">of</span> diff.<span class="property">remove</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> event = <span class="title function_">eventName</span>(prop);</span><br><span class="line">    <span class="keyword">if</span> (event === <span class="literal">null</span>) &#123;</span><br><span class="line">      el.<span class="title function_">removeAttribute</span>(prop);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      el.<span class="property">_ui</span>.<span class="property">listeners</span>[event] = <span class="literal">undefined</span>;</span><br><span class="line">      el.<span class="title function_">removeEventListener</span>(event, listener);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> prop <span class="keyword">in</span> diff.<span class="property">set</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = diff.<span class="property">set</span>[prop];</span><br><span class="line">    <span class="keyword">const</span> event = <span class="title function_">eventName</span>(prop);</span><br><span class="line">    (event === <span class="literal">null</span>)</span><br><span class="line">      ? <span class="title function_">setProperty</span>(prop, value, el)</span><br><span class="line">      : <span class="title function_">setListener</span>(el, event, value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">apply</span>(el, enqueue, diff.<span class="property">children</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历子虚拟DOM差异，修改真实DOM</span></span><br><span class="line"><span class="comment">// apply和modify互相递归调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">apply</span>(<span class="params">el, enqueue, childrenDiff</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> children = <span class="title class_">Array</span>.<span class="title function_">from</span>(el.<span class="property">childNodes</span>);</span><br><span class="line"></span><br><span class="line">  childrenDiff.<span class="title function_">forEach</span>(<span class="function">(<span class="params">diff, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> action = <span class="title class_">Object</span>.<span class="title function_">keys</span>(diff)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;remove&quot;</span>:</span><br><span class="line">        children[i].<span class="title function_">remove</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;modify&quot;</span>:</span><br><span class="line">        <span class="title function_">modify</span>(children[i], enqueue, diff.<span class="property">modify</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;create&quot;</span>: &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">const</span> child = <span class="title function_">create</span>(enqueue, diff.<span class="property">create</span>);</span><br><span class="line">        el.<span class="title function_">appendChild</span>(child);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;replace&quot;</span>: &#123;</span><br><span class="line">        <span class="keyword">const</span> child = <span class="title function_">create</span>(enqueue, diff.<span class="property">replace</span>);</span><br><span class="line">        children[i].<span class="title function_">replaceWith</span>(child);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;noop&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unexpected diff option: &quot;</span> + <span class="title class_">Object</span>.<span class="title function_">keys</span>(diff));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建虚拟DOM</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">h</span>(<span class="params">tag, properties, children</span>) &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VirtualNode</span>(&#123; tag, properties, children &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">text</span>(<span class="params">content</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VirtualNode</span>(&#123; <span class="attr">text</span>: content &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">root, initialState, update, view</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> state = initialState;</span><br><span class="line">  <span class="keyword">let</span> nodes = [];</span><br><span class="line">  <span class="keyword">let</span> queue = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">enqueue</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">    queue.<span class="title function_">push</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNodes = <span class="title function_">view</span>(state);</span><br><span class="line">    <span class="title function_">apply</span>(root, enqueue, <span class="title function_">diffList</span>(nodes, newNodes));</span><br><span class="line">    nodes = newNodes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">updateState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> msgs = queue;</span><br><span class="line">      queue = [];</span><br><span class="line"></span><br><span class="line">      msgs.<span class="title function_">forEach</span>(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          state = <span class="title function_">update</span>(state, msg, enqueue);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">draw</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(updateState);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>();</span><br><span class="line">  <span class="title function_">updateState</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; enqueue &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 导出init、h、text</span></span><br></pre></td></tr></table></figure><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>计数器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./smvc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; init, h, text &#125; = <span class="variable constant_">SMVC</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> initialState = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> <span class="title function_">update</span> = (<span class="params">state, msg, enqueue</span>) =&gt; state + msg;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> <span class="title function_">view</span> = (<span class="params">state</span>) =&gt; [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">h</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">style</span>: <span class="string">&quot;color: red&quot;</span>, <span class="attr">onClick</span>: <span class="function">() =&gt;</span> <span class="number">2</span> &#125;, [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">h</span>(<span class="string">&quot;p&quot;</span>, &#123;&#125;, [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">text</span>(<span class="string">`The count is <span class="subst">$&#123;state&#125;</span>. Click here to increment.`</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          ])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        ])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      ];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> &#123; enqueue &#125; = <span class="title function_">init</span>(root, initialState, update, view);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">enqueue</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/lazamar/smvc/blob/main/demos/todoMVC.js">todo MVC</a></p><p><a href="https://github.com/lazamar/smvc/blob/main/demos/million.js">大量node</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><a href="https://lazamar.github.io/virtual-dom/">原文链接</a></p><p><a href="https://github.com/lazamar/smvc/tree/main">该文章所实现的库</a></p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> VDOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨如何判断接口是否在设定时间内返回</title>
      <link href="/2024/07/02/api-return-within-time/"/>
      <url>/2024/07/02/api-return-within-time/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>某些情况下，我们可能想要知道接口是否在设定时间内返回。比如，请求发出30s还没返回就可以提示用户当前堵塞是否继续排队。比如，某个请求正常情况下3s返回结果，如果等30s没结果就可以丢弃这次结果。比如，超过设定时间后自动重试。</p><h1 id="axios设置timeout"><a href="#axios设置timeout" class="headerlink" title="axios设置timeout"></a>axios设置timeout</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>; </span><br><span class="line"><span class="comment">// 设置超时时间为10秒 </span></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="number">10000</span>; </span><br><span class="line"><span class="comment">// 发送请求 </span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>, &#123; <span class="attr">timeout</span>: timeout &#125;) </span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功:&#x27;</span>, response.<span class="property">data</span>); </span><br><span class="line">&#125;) </span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (axios.<span class="title function_">isCancel</span>(error)) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求取消:&#x27;</span>, error.<span class="property">message</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">code</span> === <span class="string">&#x27;ECONNABORTED&#x27;</span> &amp;&amp; error.<span class="property">message</span>.<span class="title function_">includes</span>(<span class="string">&#x27;timeout&#x27;</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求失败:&#x27;</span>, error); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="vueuse的useFetch-timeout"><a href="#vueuse的useFetch-timeout" class="headerlink" title="vueuse的useFetch+timeout"></a>vueuse的useFetch+timeout</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; data &#125; = <span class="title function_">useFetch</span>(url, &#123; <span class="attr">timeout</span>: <span class="number">1000</span> &#125;)</span><br></pre></td></tr></table></figure><p>如果只是在到达设定时间后进行一些处理，不丢弃超时结果，则如下所示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; canAbort &#125; = <span class="title function_">useFetch</span>(url); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (canAbort.<span class="property">value</span>) &#123; </span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h1 id="fetch-AbortController"><a href="#fetch-AbortController" class="headerlink" title="fetch+AbortController"></a>fetch+AbortController</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个AbortController实例 </span></span><br><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>(); </span><br><span class="line"><span class="comment">// 获取abort信号 </span></span><br><span class="line"><span class="keyword">const</span> signal = controller.<span class="property">signal</span>; </span><br><span class="line"><span class="comment">// 发送fetch请求，并将signal传递给fetch选项 </span></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123; signal &#125;) </span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123; </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>(); </span><br><span class="line">&#125;) </span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功:&#x27;</span>, data); </span><br><span class="line">&#125;) </span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">name</span> === <span class="string">&#x27;AbortError&#x27;</span>) &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求被取消&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求失败:&#x27;</span>, error); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">    controller.<span class="title function_">abort</span>(); </span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>🍉 AbortController不支持IE。</p><h1 id="Promise-race-setTimeout"><a href="#Promise-race-setTimeout" class="headerlink" title="Promise.race + setTimeout"></a>Promise.race + setTimeout</h1><p>🍇 先复习一下Promise.race，接收一个包含多个promise对象的数组作为参数，<em>只要有一个</em>promise改变状态，Promise.race就立刻返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timerPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>); </span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;timer end&quot;</span>); <span class="comment">// 这里会执行，但Promise.race().then接收不到 </span></span><br><span class="line">    &#125;, <span class="number">10000</span>); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchPromise</span> = (<span class="params"></span>) =&gt; &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> !== <span class="number">200</span>) &#123; </span><br><span class="line">            <span class="comment">// 接口错误处理 </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123; &#125;); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">     &#125;); </span><br><span class="line"> &#125;) </span><br><span class="line"> <span class="title class_">Promise</span>.<span class="title function_">race</span>([timerPromise, fetchPromise]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res); </span><br><span class="line">     <span class="keyword">if</span> (res === <span class="string">&#x27;timeout&#x27;</span>) &#123; </span><br><span class="line">         <span class="comment">// 处理超时后逻辑 </span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123; &#125;); </span><br><span class="line">     &#125; </span><br><span class="line">     <span class="keyword">return</span> res; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>打印结果：<br>start fetch<br>get fetch res<br>timer1</p><p>另外，需要注意，fetchPromise.then是先于Promise.race().then执行的。</p><p>这种方案可以实现在超时的时候进行一些操作，而不一定抛弃请求结果。比如下面的代码就可以在超时之后进行一些操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timerPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1&quot;</span>); </span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;timer end&quot;</span>); </span><br><span class="line">    &#125;, <span class="number">10000</span>); </span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchPromise</span> = (<span class="params"></span>) =&gt; &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>().<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; </span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> !== <span class="number">200</span>) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123; &#125;); </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// !!! 在这里进行一些操作，就算先计时结束，这里也会执行。比如设置一些全局变量等。                     console.log(&#x27;after timeout&#x27;); </span></span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;) </span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([timerPromise, fetchPromise]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res); </span><br><span class="line">    <span class="keyword">if</span> (res === <span class="string">&#x27;timeout&#x27;</span>) &#123; </span><br><span class="line">        <span class="comment">// 处理超时后逻辑 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123; &#125;); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> res; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
            <tag> fetch </tag>
            
            <tag> timeout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx实现目录浏览功能及权限校验</title>
      <link href="/2024/06/26/nginx-autoindex-auth/"/>
      <url>/2024/06/26/nginx-autoindex-auth/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>需要实现的功能是，打开 <a href="http://a.b.c.d/">http://a.b.c.d</a> 可以访问服务器上的某个目录。而且，在第一次登录及登录过期时会进行登录，登录成功后才可以访问到目录。</p><h1 id="开启目录浏览功能"><a href="#开启目录浏览功能" class="headerlink" title="开启目录浏览功能"></a>开启目录浏览功能</h1><p>使用 <strong>autoindex</strong> 指令可以开启目录浏览功能。<br>不仅要设置autoindex，还必须要设置root或alias。</p><h2 id="访问-时，根目录开启目录浏览"><a href="#访问-时，根目录开启目录浏览" class="headerlink" title="访问 &#x2F; 时，根目录开启目录浏览"></a>访问 &#x2F; 时，根目录开启目录浏览</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localtion / &#123; </span><br><span class="line">    root /; </span><br><span class="line">    autoindex on; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问存在的path时，该子目录开启目录浏览"><a href="#访问存在的path时，该子目录开启目录浏览" class="headerlink" title="访问存在的path时，该子目录开启目录浏览"></a>访问存在的path时，该子目录开启目录浏览</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /a/ &#123; </span><br><span class="line">    root /; </span><br><span class="line">    autoindex on; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问不存在的path时，某个子目录开启目录浏览功能"><a href="#访问不存在的path时，某个子目录开启目录浏览功能" class="headerlink" title="访问不存在的path时，某个子目录开启目录浏览功能"></a>访问不存在的path时，某个子目录开启目录浏览功能</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /x/ &#123; </span><br><span class="line">    <span class="attribute">alias</span> /b/; <span class="comment"># 注意 最后一个/是必需的 </span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他autoindex指令"><a href="#其他autoindex指令" class="headerlink" title="其他autoindex指令"></a>其他autoindex指令</h2><ul><li><p><em>autoindex_exact_size</em> on | off;：控制是否显示文件的精确大小。默认为 on。</p></li><li><p><em>autoindex_format html</em> | xml | json | jsonp;：指定目录列表的格式。默认为 html。</p></li><li><p><em>autoindex_localtime</em> on | off;：控制是否显示文件的最后修改时间为本地时间。默认为 off。</p></li></ul><h1 id="root和alias的区别"><a href="#root和alias的区别" class="headerlink" title="root和alias的区别"></a>root和alias的区别</h1><p>相同点：都用于指定请求的文件在文件系统中的位置。</p><p>不同点：</p><p>第一，root 可以在 http、server 或 location 块中使用，alias 只能在 <strong>location</strong> 块中使用。</p><p>第二，nginx将uri<strong>拼接</strong>在root指定的路径后面，但alias会<strong>替代</strong>指定的路径。</p><p>举例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /docs/ &#123; </span><br><span class="line">    root /var/www/html; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配到这条规则时，nginx查找的文件是 <em>&#x2F;var&#x2F;www&#x2F;html&#x2F;docs&#x2F;index.html</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /docs/ &#123; </span><br><span class="line">    alias /var/www/html/; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配到这条规则时，nginx查找的文件是 <em>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.html</em></p><h1 id="权限校验"><a href="#权限校验" class="headerlink" title="权限校验"></a>权限校验</h1><h2 id="校验方法一：auth-basic-user-file"><a href="#校验方法一：auth-basic-user-file" class="headerlink" title="校验方法一：auth_basic_user_file"></a>校验方法一：<strong>auth_basic_user_file</strong></h2><p>将用户名密码保存在一个文件中，将文件路径添加到配置中。</p><p>密码可以通过<a href="https://tool.oschina.net/htpasswd">tool-htpasswd</a>生成，windows上加密算法选md5，linux上选crypt。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123; </span><br><span class="line">    root /; </span><br><span class="line">    autoindex on; </span><br><span class="line">    auth_basic &quot;Authorized users only&quot;; </span><br><span class="line">    auth_basic_user_file /pwd/htpasswd; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>htpasswd生成的密码的前缀指示了加密方法。nginx会根据密码文件的内容自动识别加密方式。</p><h2 id="校验方法二：请求自己的登录接口"><a href="#校验方法二：请求自己的登录接口" class="headerlink" title="校验方法二：请求自己的登录接口"></a>校验方法二：请求自己的登录接口</h2><p>具体思路：访问时判断是否有指定cookie，如果没有跳登录，如果有正常访问。登录接口需要能跳转回来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123; </span><br><span class="line">    if ($cookie_my_cookie = &#x27;&#x27;) &#123; </span><br><span class="line">        return http://x.x.x.x/login?redirect_url=http://a.b.c.d; </span><br><span class="line">    &#125; </span><br><span class="line">    root /; </span><br><span class="line">    autoindex on; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果接口不能把token注入到cookie中，而是放在了跳转回来的query参数里，则需要自己注入cookie并且把url里的query清空，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location / &#123; </span><br><span class="line">    if ($cookie_my_cookie = &#x27;&#x27;) &#123; </span><br><span class="line">        return http://x.x.x.x/login?redirect_url=http://a.b.c.d/login; </span><br><span class="line">    &#125; </span><br><span class="line">    root /; </span><br><span class="line">    autoindex on; </span><br><span class="line">&#125; </span><br><span class="line">location /login/ &#123; </span><br><span class="line">    add_header Set-Cookie &quot;my_cookie=$args&quot;; </span><br><span class="line">    rewrite ^/login(.*) /? permanent; # 注意 /后面的?是必需的 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="涉及的Nginx知识点"><a href="#涉及的Nginx知识点" class="headerlink" title="涉及的Nginx知识点"></a>涉及的Nginx知识点</h1><h2 id="nginx变量"><a href="#nginx变量" class="headerlink" title="nginx变量"></a>nginx变量</h2><p><strong>$args</strong>：query参数；</p><p><strong>$cookie_my_cookie</strong>：cookie中name为my_cookie的值；</p><h2 id="nginx-if语句"><a href="#nginx-if语句" class="headerlink" title="nginx if语句"></a>nginx if语句</h2><p>只有if，没有else。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if ($cookie_my_cookie = &quot;&quot;) &#123; </span><br><span class="line">    # 如果cookie为空，执行下面的操作 </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if ($cookie_my_cookie ~* &quot;value&quot;) &#123; </span><br><span class="line">    # 如果cookie包含value，执行下面的操作 </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">if ($cookie_my_cookie !~* &quot;value&quot;) &#123; </span><br><span class="line">    # 如果cookie不包含value，执行下面的操作 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><h3 id="return指令"><a href="#return指令" class="headerlink" title="return指令"></a>return指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /x/ &#123; </span><br><span class="line">    return 301 http://localhost:8083/abc; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果访问&#x2F;x?123，会跳转到&#x2F;abc。</p><p>return不仅可以返回一个url，也可以返回一句话或者一个json。</p><p>第一个参数是<strong>状态码</strong>，第二个参数是可选的<strong>消息体</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123; </span><br><span class="line">    default_type text/html; </span><br><span class="line">    return 200 &quot;Hello, World!&quot;; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">location / &#123; </span><br><span class="line">    default_type application/json; </span><br><span class="line">    return 200 &quot;&#123;a:1&#125;&quot;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>text&#x2F;plain：适用于返回的文本内容，默认值。</p></li><li><p>text&#x2F;html：适用于返回的HTML内容。</p></li><li><p>application&#x2F;json：适用于返回的JSON格式内容。</p></li><li><p>application&#x2F;xml：适用于返回的XML格式内容。</p></li><li><p>application&#x2F;octet-stream：适用于返回的二进制数据。</p></li></ul><h3 id="rewrite指令"><a href="#rewrite指令" class="headerlink" title="rewrite指令"></a>rewrite指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /x/ &#123; </span><br><span class="line">    rewrite ^/x(.*) /y? permanent; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不加?会保留原来的query参数，加?会不保留。</p><h3 id="try-files指令"><a href="#try-files指令" class="headerlink" title="try_files指令"></a>try_files指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /x/ &#123; </span><br><span class="line">    try_files $uri$uri/ /index.html; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果找不到，就返回index.html。</p><p><em>$uri</em>：尝试匹配确切的请求路径。</p><p>*$uri&#x2F;*：尝试匹配请求路径的目录版本。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start nginx <span class="comment"># 启动 </span></span><br><span class="line">nginx -s reload <span class="comment"># 刷新 </span></span><br><span class="line">nginx -s stop <span class="comment"># 关闭 </span></span><br><span class="line">tasklist /fi <span class="string">&quot;imagename eq nginx.exe&quot;</span> <span class="comment"># 查看全部nginx进程 </span></span><br><span class="line">taskkill /pid pid /f <span class="comment"># 关闭某个nginx进程 </span></span><br><span class="line">taskkill /f /im nginx.exe <span class="comment"># 关闭所有nginx进程</span></span><br></pre></td></tr></table></figure><h2 id="location-a和location-a-的区别"><a href="#location-a和location-a-的区别" class="headerlink" title="location &#x2F;a和location &#x2F;a&#x2F;的区别"></a>location &#x2F;a和location &#x2F;a&#x2F;的区别</h2><p>location &#x2F;a匹配&#x2F;a、&#x2F;a&#x2F;、&#x2F;ab</p><p>location &#x2F;a&#x2F;匹配&#x2F;a&#x2F;、&#x2F;a&#x2F;b</p><h2 id="刷新不生效"><a href="#刷新不生效" class="headerlink" title="刷新不生效"></a>刷新不生效</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendfile off;</span><br></pre></td></tr></table></figure><p>还可以查看nginx进程是否有很多个，如果是全部关闭再启动。</p><h2 id="配置本地域名映射"><a href="#配置本地域名映射" class="headerlink" title="配置本地域名映射"></a>配置本地域名映射</h2><p>找到<strong>hosts</strong>文件，在C:\Windows\System32\drivers\etc下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost my.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tailwind使用指南</title>
      <link href="/2024/06/18/tailwind-guide/"/>
      <url>/2024/06/18/tailwind-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>tailwind学习曲线比较陡峭，熟悉之后会方便开发，但熟悉之前需要频繁查文档。下面讲一下如何使用tailwind及常用样式，帮助快速上手。我使用的技术栈是<strong>vite+vue</strong>。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -D tailwindcss postcss autoprefixer </span><br><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; </span><br><span class="line">    <span class="attr">content</span>: [ <span class="string">&quot;./index.html&quot;</span>, <span class="string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>, ], </span><br><span class="line">    <span class="attr">theme</span>: &#123; <span class="attr">extend</span>: &#123;&#125;, &#125;, </span><br><span class="line">    <span class="attr">plugins</span>: [], </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入tailwind样式"><a href="#引入tailwind样式" class="headerlink" title="引入tailwind样式"></a>引入tailwind样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// style<span class="selector-class">.css</span> </span><br><span class="line"><span class="keyword">@tailwind</span> base; </span><br><span class="line"><span class="keyword">@tailwind</span> components; </span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure><p>在main.ts中导入该文件。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-3xl font-bold underline&quot;</span>&gt;</span> Hello world! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="常用样式"><a href="#常用样式" class="headerlink" title="常用样式"></a>常用样式</h1><p>tailwind<em>预设</em>了一部分属性值，比如 w-1 表示 width: 0.25rem; &#x2F;* 4px *&#x2F;。但新手可以不使用预设值，直接用 [] 设置自定义的值。</p><div class="w-1"></div> <div class="w-[4px]"></div><h2 id="宽高"><a href="#宽高" class="headerlink" title="宽高"></a>宽高</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>w-[10px]</td><td>width: 10px;</td></tr><tr><td>h-[10px]</td><td>height: 10px;</td></tr><tr><td>min-w-[10px]</td><td>min-width: 10px;</td></tr><tr><td>max-w-[10px]</td><td>max-width: 10px;</td></tr><tr><td>size-[10px]</td><td>width: 10px;height: 10px;</td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>block</td><td>display: block;</td></tr><tr><td>flex</td><td>display: flex;</td></tr><tr><td>hidden</td><td>display: none;</td></tr><tr><td>box-border</td><td>box-sizing: border-box;</td></tr><tr><td>float-left</td><td>float: left;</td></tr><tr><td>overflow-hidden</td><td>overflow: hidden;</td></tr><tr><td>overflow-x-auto</td><td>overflow-x: auto;</td></tr><tr><td>absolute</td><td>position: absolute;</td></tr><tr><td>top-[10px]</td><td>top: 10px;</td></tr></tbody></table><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>flex-col</td><td>flex-direction: column;</td></tr><tr><td>flex-nowrap</td><td>flex-wrap: nowrap;</td></tr><tr><td>justify-center</td><td>justify-content: center;</td></tr><tr><td>items-center</td><td>align-items: center;</td></tr></tbody></table><h2 id="margin-padding"><a href="#margin-padding" class="headerlink" title="margin &amp; padding"></a>margin &amp; padding</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>m-[10px]</td><td>margin: 10px;</td></tr><tr><td>mx-[10px]</td><td>margin-left: 10px;margin-right: 10px;</td></tr><tr><td>ml-[10px]</td><td>margin-left: 10px;</td></tr></tbody></table><p>padding就是把m换成p。<strong>x</strong>代表left和right。<strong>y</strong>代表top和bottom。</p><h2 id="font"><a href="#font" class="headerlink" title="font"></a>font</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>text-[16px]</td><td>font-size: 16px;</td></tr><tr><td>font-bold</td><td>font-weight: 700;</td></tr><tr><td>text-center</td><td>text-align: center;</td></tr><tr><td>tracking-[2px]</td><td>letter-spacing: 2px;</td></tr><tr><td>text-[#000]</td><td>color: #000;</td></tr><tr><td>line-clamp-2</td><td>超出2行省略</td></tr><tr><td>leading-[30px]</td><td>line-height: 30px;</td></tr></tbody></table><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>bg-[#000]</td><td>background-color: #000;</td></tr><tr><td>bg-[url(&#x2F;src&#x2F;assets&#x2F;xx.png)]</td><td>background-image: url(&#x2F;src&#x2F;assets&#x2F;xx.png);</td></tr><tr><td>bg-no-repeat</td><td>background-repeat: no-repeat;</td></tr><tr><td>bg-cover</td><td>background-size: cover;</td></tr><tr><td>bg-center</td><td>background-position: center;</td></tr></tbody></table><h2 id="border"><a href="#border" class="headerlink" title="border"></a>border</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>border-[2px]</td><td>border-width: 2px;</td></tr><tr><td>border-[#000]</td><td>border-color: #000;</td></tr><tr><td>border-solid</td><td>border-style: solid;</td></tr><tr><td>rounded-[4px]</td><td>border-radius: 4px;</td></tr><tr><td>divide-[#000]</td><td>颜色为#000的分割线</td></tr></tbody></table><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>translate-x-[10px]</td><td>transform: translateX(10px);</td></tr><tr><td>scale-[1.1]</td><td>transform: scale(1.1);</td></tr><tr><td>rotate-[60deg]</td><td>transform: rotate(60deg);</td></tr><tr><td>origin-center</td><td>transform-origin: center;</td></tr><tr><td>transition-[height]</td><td>transition-property: height;</td></tr><tr><td>duration-[2000ms]</td><td>transition-duration: 2000ms;</td></tr><tr><td>ease-linear</td><td>transition-timing-function: linear;</td></tr><tr><td>delay-[2000ms]</td><td>transition-delay: 2000ms;</td></tr></tbody></table><p>animation推荐theme.extend中设置。</p><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>class</td><td>属性</td></tr><tr><td>cursor-pointer</td><td>cursor: pointer;</td></tr><tr><td>pointer-events-none</td><td>pointer-events: none;</td></tr></tbody></table><h1 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h1><p>在tailwind.config.js中可以自定义主题。可以设置的样式包括<strong>screens</strong>、<strong>colors</strong>、<strong>borderRadius</strong>等等。</p><p>在theme中设置表示覆盖某属性原来的所有选项。但，如果想保留某属性默认的选项，但又想添加新的选项，可以在theme.extend中配置。</p><p>比如，很多地方都需要设置border-radius: 6px，那可以进行如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; </span><br><span class="line">    <span class="attr">theme</span>: &#123; </span><br><span class="line">        <span class="attr">borderRadius</span>: &#123; </span><br><span class="line">            <span class="attr">DEFAULT</span>: <span class="string">&#x27;6px&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;lg&#x27;</span>: <span class="string">&#x27;12px&#x27;</span>, </span><br><span class="line">        &#125;, </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rounded&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rounded-lg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第一个div的border-radius为6px，第二个div的border-radius为12px。</p><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><h2 id="动态设置class"><a href="#动态设置class" class="headerlink" title="动态设置class"></a>动态设置class</h2><p>利用 <strong>data-*</strong> 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-x</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg-red data-[x=a]:bg-green&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="特殊属性不支持"><a href="#特殊属性不支持" class="headerlink" title="特殊属性不支持"></a>特殊属性不支持</h2><p>如果某些属性，tailwind不支持，可以用 <strong>@layer utilities {}</strong> 设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@layer</span> utilities &#123; </span><br><span class="line">    <span class="selector-class">.stroke-progress</span> &#123; </span><br><span class="line">        -webkit-<span class="selector-tag">text</span>-<span class="attribute">stroke</span>: <span class="number">0.4rem</span> <span class="number">#010507</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用tailwind同时使用UI组件库"><a href="#使用tailwind同时使用UI组件库" class="headerlink" title="使用tailwind同时使用UI组件库"></a>使用tailwind同时使用UI组件库</h2><p>如果舍不得UI组件的某些功能，想和组件库搭配使用</p><p>可以用 <strong>@layer components{}</strong> 修改UI库组件的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@layer</span> components &#123; </span><br><span class="line">    <span class="selector-class">.el-dialog</span> &#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="elementplus下拉框样式"><a href="#elementplus下拉框样式" class="headerlink" title="elementplus下拉框样式"></a>elementplus下拉框样式</h2><p>tailwind+elementplus，给组件的下拉框设置样式时，需要设置 <strong>:teleported&#x3D;”false”</strong> ，@layer才会生效。</p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tailwind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】如何实现一个纯CSS计时器</title>
      <link href="/2024/06/17/css-timer/"/>
      <url>/2024/06/17/css-timer/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有时我们会在页面上使用计时器。通常我们会用js实现计时器功能，但某些时候更适合用css，比如某些邮件客户端不支持运行js。</p><h1 id="4个属性"><a href="#4个属性" class="headerlink" title="4个属性"></a>4个属性</h1><ul><li>counter()：一个css函数，返回一个代表计数器的当前值的字符串。它通常和伪元素搭配使用，但是理论上可以在支持值的任何地方使用。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter(计数器名称);</span><br></pre></td></tr></table></figure><ul><li>@property：自定义css属性，兼容性不是特别好，值的类型可以是<em>integer</em>、<em>number</em>、<em>color</em>、<em>url</em>、<em>percentage</em>、<em>transform-function</em>等。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">@property</span> --property-name &#123; </span><br><span class="line">    syntax: <span class="string">&quot;&lt;color&gt;&quot;</span>; // 值类型检测 </span><br><span class="line">    inherits: false; // 是否允许继承 </span><br><span class="line">    initial-value: <span class="number">#c0ffee</span>; // 默认值 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/9dfff96036164eb2abe5299c708b6184~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="caniuse"></p><ul><li>伪元素</li><li>@keyframes</li></ul><h1 id="3个要求"><a href="#3个要求" class="headerlink" title="3个要求"></a>3个要求</h1><p>实现的效果如下图所示，鼠标移动到框内开始倒计时。<br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/3521f2df17864273846772fb9422bc15~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="效果"></p><p>实现这个计时器需要做到以下3点：</p><ul><li>可以从5递减到0的数字；</li><li>一种计时5秒并递减每个秒数的方法；</li><li>一种在页面上显示递减数字的方法；</li></ul><p>第一点，我们可以用 <strong>@property</strong> 创建一个自定义属性。</p><pre><code>@property --n &#123;    syntax: &quot;&lt;integer&gt;&quot;;    inherits: false;    initial-value: 0; &#125;</code></pre><p>注意，是整数类型，包括0、正整数、负整数。如果希望是带小数点的数字可以用<em>number</em>。</p><p>第二点，我们可以用 <strong>@keyframes</strong> 实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> count &#123; </span><br><span class="line">    <span class="selector-tag">from</span> &#123; <span class="attr">--n</span>: <span class="number">5</span>; &#125; </span><br><span class="line">    <span class="selector-tag">to</span> &#123; <span class="attr">--n</span>: <span class="number">0</span>; &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.timer</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">    <span class="attribute">animation</span>: <span class="number">5s</span> linear count; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三点，我们可以用 <strong>counter-reset</strong> 实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.timer</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">    <span class="attribute">animation</span>: <span class="number">5s</span> linear count; </span><br><span class="line">    <span class="attribute">animation-fill-mode</span>: forwards; </span><br><span class="line">    <span class="attribute">counter-reset</span>: n <span class="built_in">calc</span>(<span class="number">0</span> + <span class="built_in">var</span>(--n)); </span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">counter</span>(n); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>content不接受数字类型的值，所以需要借助counter()。<br>前面提过，counter()，接收计数器名字做参数，返回计数器当前值。</p><p>使用计数器前必须使用counter-reset初始化计数器。<br>counter-reset：第一个参数必选，计数器名；第二个参数，计数器初始值，默认是0。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>完整代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> --n &#123;</span><br><span class="line">  syntax: <span class="string">&quot;&lt;integer&gt;&quot;</span>;</span><br><span class="line">  inherits: false;</span><br><span class="line">  initial-value: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> count &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attr">--n</span>: <span class="number">5</span>; &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attr">--n</span>: <span class="number">0</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.timer</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: <span class="number">5s</span> linear count;</span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">  <span class="attribute">counter-reset</span>: n <span class="built_in">calc</span>(<span class="number">0</span> + <span class="built_in">var</span>(--n));</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.timer</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1</span>lh;</span><br><span class="line">  <span class="attribute">aspect-ratio</span>: <span class="number">1</span> / <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">92pt</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dashed black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>借助这些知识，可以设计更复杂的计数器，比如向上计数，美化ui，与其他loading（比如圆形进度条等）结合。</p><p><a href="https://codepen.io/rpsthecoder/pen/XWwdLPK">演示1</a><br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/2f2cdbb17e124c78bef09c91a18d5ba1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="1"></p><p><a href="https://codepen.io/rpsthecoder/pen/ExzxrWX">演示2</a><br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/fc09a13466944f2b8b931ccf75585dcd~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="2"></p><p>另外，css自定义属性也可以在js中创建和修改，创建用 <strong>registerProperty(</strong>) ，修改用 <strong>setProperty()</strong> 。如果想知道动画是否完成，可以用 <em>animationend</em> 监听。</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://frontendmasters.com/blog/how-to-make-a-css-timer">原文</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_counter_styles/Using_CSS_counters">MDN：使用css计数器</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> timer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现自定义脚手架</title>
      <link href="/2024/04/23/custom-cli/"/>
      <url>/2024/04/23/custom-cli/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要自定义脚手架？"><a href="#为什么要自定义脚手架？" class="headerlink" title="为什么要自定义脚手架？"></a>为什么要自定义脚手架？</h1><p>首先，每次创建项目后都需要很多重复性操作，比如安装UI库、css预处理器。在业务层面，每次也要添加一些必备的功能，比如登录、404页面等。其次，可以锻炼自己的技术。</p><h1 id="脚手架的功能"><a href="#脚手架的功能" class="headerlink" title="脚手架的功能"></a>脚手架的功能</h1><p>脚手架创建项目的流程：</p><ol><li><p><strong>让用户选择模板；</strong></p></li><li><p><strong>根据用户输入填充模板；</strong></p></li><li><p><strong>下载模板文件到创建的新文件夹中；</strong></p></li></ol><p>从框架来看，创建项目的时候需要选择是vue框架还是react框架，以及是否需要添加 typescript。</p><p>从插件来看，需要安装UI库、CSS预处理器、路由、全局状态管理器。</p><p>从项目功能来看，还需要封装fetch请求、登录、未登录页面、404页面、部署配置文件。</p><p>再参考一下vite，所以我们可以先设置几个模板，然后把小功能填充到模板里面。</p><h1 id="具体的逻辑"><a href="#具体的逻辑" class="headerlink" title="具体的逻辑"></a>具体的逻辑</h1><p><strong>1.判断远程是否有更新版本，如果有询问用户是否更新。</strong></p><p>当前版本从package.json中获取。</p><p>远程版本用<code>exec()</code>获取：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;npm show xx version&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>2.询问用户想要的功能</strong></p><p>用<code>inquirer</code>库。</p><p>询问项目名、框架、是否添加 typescript、是否添加 electron 和 是否添加登录</p><p><strong>3.拉取模板，拷贝模板到当前项目。</strong></p><p>模板就是完整的最基础的项目，如果是必需的功能就直接加进去，如果需要用户选择是否添加则把该功能所在文件改为<strong>ejs</strong>文件。</p><p>在拷贝中判断文件是否是ejs文件，如果是则把用户的选择都传进去。</p><p>如果已经有同名项目，则在项目名后加（n）。</p><p><em>注：拷贝的时候模板需要用相对路径获取。</em></p><p><em>可以用ora库添加loading。</em></p><h1 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h1><p><strong>1.npm create命令</strong></p><p>npm create等价于npm init</p><p>npm init 是新建package.json文件，但 npm create xx 会先安装一个create-xx的包，然后执行这个包中的create-xx命令</p><p>通过npm exec create-xx来执行，npm exec可以执行本地或远程包中的命令。</p><p>所以，我们可以<strong>设置package.json中项目名为xx</strong>，发布脚手架后，用户就可以通过<strong>npm create xx</strong>来通过脚手架创建项目。</p><p><strong>2.npm link</strong></p><p>可以通过以下命令在本地测试脚手架。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm link 将当前目录链接到全局</span><br><span class="line"></span><br><span class="line">npm list -g --depth=<span class="number">0</span> 查看全局list</span><br><span class="line"></span><br><span class="line">npm unlink -g xx 删除，如果是全局一定要加-g</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.命令无法执行</strong></p><p>bin&#x2F;xx.js文件开头要加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>script声明命令时，文件需要添加.js后缀</p><p><strong>4.ejs条件渲染时留下空行</strong></p><p>&lt;%_ … _%&gt;是不可行的。需要将开始标签紧贴着前一行，结束标签紧贴着可能显示的行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,&lt;% <span class="keyword">if</span> (flag) &#123; %&gt; </span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span>,&lt;% &#125; %&gt; </span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.生成的项目中不包含.ignore文件</strong></p><p>将.ignore重命名为ignore，复制完所有文件后，单独复制ignore文件为.ignore，并删除复制后的ignore</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">copyFileSync</span>(<span class="string">`<span class="subst">$&#123;sourceDir&#125;</span>/gitignore`</span>, <span class="string">`<span class="subst">$&#123;targetDir&#125;</span>/.gitignore`</span>); fs.<span class="title function_">unlinkSync</span>(<span class="string">`<span class="subst">$&#123;targetDir&#125;</span>/gitignore`</span>);</span><br></pre></td></tr></table></figure><p><strong>6.引用requirer时报错Error [ERR_REQUIRE_ESM]: require() of ES Module … from … is not supported</strong></p><p>降版本，可以降到v8.2.0</p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> cli </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给svg设置cursor不生效</title>
      <link href="/2024/02/26/svg-cursor/"/>
      <url>/2024/02/26/svg-cursor/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>项目中一般用 svg 做小图标或背景图，背景图不需要设置 cursor， 小图标会写成单个的 IconXx.vue 文件。前不久遇到一个需求，需要展示 svg，并且可点击，这就需要设置 cursor，但直接设置不会生效。</p><h1 id="svg-插入页面的方法"><a href="#svg-插入页面的方法" class="headerlink" title="svg 插入页面的方法"></a>svg 插入页面的方法</h1><p>SVG 文件可通过以下标签嵌入 HTML 文档：<code>&lt;embed&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;iframe&gt;</code>。<br>SVG的代码可以直接嵌入到HTML页面中，或您可以直接链接到SVG文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;circle1.svg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;circle1.svg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/svg+xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;circle1.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span> <span class="attr">r</span>=<span class="string">&quot;40&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;circle1.svg&quot;</span>&gt;</span>查看 SVG 文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="在-svg-代码中设置-cursor"><a href="#在-svg-代码中设置-cursor" class="headerlink" title="在 svg 代码中设置 cursor"></a>在 svg 代码中设置 cursor</h1><p>这样不但可以设置整个 svg 的光标，而且可以设置里面单个元素的光标。<br>缺点是需要能修改 svg 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">svg</span> &#123; <span class="attribute">cursor</span>: pointer; &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* OR */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.element-name</span> &#123; <span class="attribute">cursor</span>: pointer; &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="包裹一下-svg"><a href="#包裹一下-svg" class="headerlink" title="包裹一下 svg"></a>包裹一下 svg</h1><p>在 svg 的外层添加一层 div，给这个 div 设置光标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;svg-wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;img.svg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.svg-wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svg </tag>
            
            <tag> cursor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git LFS解决大文件上传</title>
      <link href="/2024/02/04/git-lfs/"/>
      <url>/2024/02/04/git-lfs/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>git 限制上传文件大小在 100M 以内。在日常工作中，偶尔会遇到某次提交的文件总量过大或者某个文件过大，所以在此记录一下如何解决这个问题。</p><h1 id="分批次提交"><a href="#分批次提交" class="headerlink" title="分批次提交"></a>分批次提交</h1><p>如果是提交很多文件，但单文件都不大的时候，可以选择分批次提交。如果已经 commit 才发现文件总量过大，则需要撤销 commit 。以下是会用到的 git 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog 查看所有操作的历史记录</span><br><span class="line">git reset HEAD^2 上上一个版本</span><br><span class="line">git reset @~ 撤销一次commit</span><br></pre></td></tr></table></figure><p>如果仅撤销上一次，则直接用第3条命令。<br>如果在尝试解决问题时进行了多次 commit，则可以通过第1条命令查询想要回退到的版本，然后通过第2条命令回退。</p><h1 id="LFS"><a href="#LFS" class="headerlink" title="LFS"></a>LFS</h1><p>首先，下载<a href="https://git-lfs.com/">git LFS</a>。<br>然后，关联需要用 LFS 上传的文件，比如下面的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git lfs track <span class="string">&#x27;xx.mp4&#x27;</span></span><br></pre></td></tr></table></figure><p>最后，按照正常的提交流程进行提交。</p><p>以下是可能用到的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联某类型文件</span></span><br><span class="line">git lfs track <span class="string">&#x27;*.mp4&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找大于 nM 的文件</span></span><br><span class="line">find ./ -size +100M</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的hover菜单缝隙问题</title>
      <link href="/2024/01/21/secondary-menu/"/>
      <url>/2024/01/21/secondary-menu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经常遇到hover时显示二级菜单的需求，在这个需求中，需要注意的是鼠标经过缝隙的时候菜单会隐藏。使用transition可以在经过缝隙时仍显示菜单，但如果在缝隙停留时间超出动画时间则菜单仍会隐藏。</p><h1 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h1><p>可以用transition来解决鼠标经过<strong>缝隙</strong>时二级菜单隐藏的问题。<br>但transition只有零点几秒的动画时间，如果鼠标<strong>停留</strong>缝隙的时间超出动画时间则二级菜单仍会隐藏。<br><a href="https://code.juejin.cn/pen/7326198843110850623">jcode</a></p><h1 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h1><p>可以给触发菜单的元素和二级菜单之间填充一个透明的元素，这个透明元素是二级菜单的<strong>伪元素</strong>。这样，无论鼠标停留在缝隙多久，二级菜单都不会隐藏。<br><a href="https://code.juejin.cn/pen/7326202794765975562">jcode</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>css博大精深！</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二级菜单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么只这一个接口502呢？</title>
      <link href="/2024/01/20/post-502/"/>
      <url>/2024/01/20/post-502/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前几天遇到了一个没见过的bug，在此记录一下。前几天，新写了一个页面，里面有get请求、json参数的post请求、form参数的post请求，然后把这个项目打包出来的dist放入node中。更新到线上以后，发现仅有json参数的post请求出现nginx 502报错，其他接口都正常。</p><h1 id="解决问题的思路"><a href="#解决问题的思路" class="headerlink" title="解决问题的思路"></a>解决问题的思路</h1><p>刚开始搜索了一下<strong>nginx 502</strong>，没发现什么有用信息。  </p><p>首先是发现其他get接口都正常，点击按钮时这个post接口报错，当时就有点懵。然后检查了同一个项目另一个post接口，发现另一个post接口也正常。所以，推理得<strong>json类型参数的post请求</strong>有问题。  </p><p>本地环境，这个json参数的请求没问题，测试环境是用dist+nginx部署的，这个请求也没问题。线上环境是<strong>dist+node</strong>部署，所以就定位到了http-proxy-middleware这个库。</p><p>在node+dist项目中，如果接口就是这个node的就不用代理了，但如果前端代码中请求了别的项目的接口，就需要用http-proxy-middleware添加代理配置。</p><p>搜索<strong>http-proxy-middleware json请求502</strong>，就发现了解决方案。</p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>在node项目中，会使用bodyParser这个库来解析post请求的参数，这个库会改写所有post请求的body，所以前端代码请求其他项目的post请求的body也会被修改。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在代理别的项目的接口时修改body。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/myapi&#x27;</span>, <span class="title function_">createProxyMiddleware</span>(&#123;</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;http://x.x.x.x:x&#x27;</span>,</span><br><span class="line">  <span class="attr">pathRewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="string">&quot;/myapi/&quot;</span>, <span class="string">&quot;/&quot;</span>),</span><br><span class="line">  <span class="attr">on</span>: &#123;</span><br><span class="line">    <span class="attr">proxyReq</span>: <span class="function">(<span class="params">proxyReq, req: Request, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!req.<span class="property">body</span> || !<span class="title class_">Object</span>.<span class="title function_">keys</span>(req.<span class="property">body</span>).<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> contentType = proxyReq.<span class="title function_">getHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">writeBody</span> = (<span class="params">bodyData: string</span>) =&gt; &#123;</span><br><span class="line">          proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Length&#x27;</span>, <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(bodyData));</span><br><span class="line">          proxyReq.<span class="title function_">write</span>(bodyData);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (contentType === <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">writeBody</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (contentType === <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">writeBody</span>(querystring.<span class="title function_">stringify</span>(req.<span class="property">body</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>在这个issue<a href="https://github.com/chimurai/http-proxy-middleware/issues/320">参考issue</a>中发现了解决办法，然后又在<a href="https://github.com/chimurai/http-proxy-middleware?tab=readme-ov-file#intercept-and-manipulate-requests">http-proxy-middleware的readme</a>中发现了相关记载。</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/3aa13c5da7ea435998ff9c2ac28314c5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 502 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个看起来只有2个字长度却有8的字符串引起的bug</title>
      <link href="/2023/12/14/zero-with-character/"/>
      <url>/2023/12/14/zero-with-character/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们有一个需求，用户的昵称如果长度超过6就截取前6个字符并显示…。今天，测试突然提了一个bug，某个用户的昵称只显示了…，鼠标hover的时候又显示2个字的昵称。刚看到这个问题的时候我也是一头雾水。</p><h1 id="找出原因"><a href="#找出原因" class="headerlink" title="找出原因"></a>找出原因</h1><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/5c4b9b1adfc34b1987f357a1410f6ed6~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"><br>在看到这个现象后，我发现其他昵称都显示正常，但实在摸不着头脑这到底是怎么回事。然后查看了一下其他2个字的昵称是没问题的，然后通过<code>console.log</code>发现这个昵称居然长度有8，走了截取的分支。然后通过google发现这里面应该包含了零宽字符。<br>其实，第一时间就应该想到这个字符串不对劲的，但完全忘记了<code>零宽字符</code>的存在，走了不少弯路。    </p><p>在查找的过程中发现，<code>Array.from</code>可以查看字符串的真实长度，除了<code>emoji</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/d2c30abafa5a48398261240a4424145e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"><br>不过<code>Array.from</code>并不能解决我的问题。</p><h1 id="使用正则匹配unicode码点过滤零宽字符"><a href="#使用正则匹配unicode码点过滤零宽字符" class="headerlink" title="使用正则匹配unicode码点过滤零宽字符"></a>使用正则匹配unicode码点过滤零宽字符</h1><p>在网上找了个方法来过滤掉这些看不见的字符，最常见的解决方案就是下面这行代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="title function_">replace</span>(<span class="regexp">/[\u200b-\u200f\uFEFF\u202a-\u202e]/g</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p>然而并没有用，我开始怀疑是不是这个方法有问题，然后遍历了这个昵称，把它的每个字符都转换成码点，发现这个昵称里的零宽字符并不是常见的这几种。      </p><p>后来，又找到了一个比较完善的码点正则，但它太完善了，很长很长，也会过滤掉<code>emoji</code>，这可不行，用户昵称可能会包含<code>emoji</code>的。（这里就不贴出来代码了，太长了而且不适合我的情况。）</p><h1 id="使用正则匹配unicode类别"><a href="#使用正则匹配unicode类别" class="headerlink" title="使用正则匹配unicode类别"></a>使用正则匹配unicode类别</h1><p>一个字符有多种unicode属性，而正则支持按unicode属性匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">stripNonPrintableAndNormalize</span>(<span class="params">text, stripSurrogatesAndFormats</span>) &#123;</span><br><span class="line">    <span class="comment">// strip control chars. optionally, keep surrogates and formats</span></span><br><span class="line">    <span class="keyword">if</span>(stripSurrogatesAndFormats) &#123;</span><br><span class="line">      text = text.<span class="title function_">replace</span>(<span class="regexp">/\p&#123;C&#125;/gu</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      text = text.<span class="title function_">replace</span>(<span class="regexp">/\p&#123;Cc&#125;/gu</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      text = text.<span class="title function_">replace</span>(<span class="regexp">/\p&#123;Co&#125;/gu</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      text = text.<span class="title function_">replace</span>(<span class="regexp">/\p&#123;Cn&#125;/gu</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other common tasks are to normalize newlines and other whitespace</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// normalize newline</span></span><br><span class="line">    text = text.<span class="title function_">replace</span>(<span class="regexp">/\n\r/g</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    text = text.<span class="title function_">replace</span>(<span class="regexp">/\p&#123;Zl&#125;/gu</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    text = text.<span class="title function_">replace</span>(<span class="regexp">/\p&#123;Zp&#125;/gu</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// normalize space</span></span><br><span class="line">    text = text.<span class="title function_">replace</span>(<span class="regexp">/\p&#123;Zs&#125;/gu</span>, <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;⁮⁡⁪⁡⁠⁮河豚&quot;</span>.<span class="property">length</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stripNonPrintableAndNormalize</span>(<span class="string">&quot;⁮⁡⁪⁡⁠⁮河豚&quot;</span>, <span class="literal">true</span>).<span class="property">length</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/333d342f3653422d8aafe3c1cf9b8116~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个昵称其实就是包含了<code>&amp;nobreak;</code>，通过unicode类别匹配可以过滤掉它。 </p><p>我之前有在原贴用户主页的控制台中看见了<code>&amp;nobreak;</code>，但当时居然没当回事，以为是别人对昵称做的处理。如果直接搜它马上就能解决问题了，有不少人遇到<code>non-break-space</code>引发的bug。谨以此记，吸取教训。  </p><p>参考链接：<a href="https://stackoverflow.com/questions/11598786/how-to-replace-non-printable-unicode-characters-javascript">stackoverflow中的解决办法</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape">unicode属性</a></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零宽字符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canvas之measureText测量文本</title>
      <link href="/2023/10/17/canvas-measureText/"/>
      <url>/2023/10/17/canvas-measureText/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇文章讲的是关于<code>canvas</code>的一个方法：<code>measureText</code>，这个方法接受一个字符串参数，返回关于这个字符串的宽度和水平线到顶部或底部的距离等等。主要涉及的知识点有：获取文本宽度、文本在垂直方向的对齐方式、基线、行高。</p><h1 id="获取字符串宽度"><a href="#获取字符串宽度" class="headerlink" title="获取字符串宽度"></a>获取字符串宽度</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">&quot;canvas&quot;</span> width=<span class="string">&quot;200&quot;</span> height=<span class="string">&quot;200&quot;</span>&gt;&lt;/canvas&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="title function_">measureText</span>(<span class="string">&#x27;我你他&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>打印出来是一个对象，其中的<code>width</code>属性就是传入的字符串的宽度。有2点需要注意一下，第一点是需要设置<code>canvas</code>中的文字<code>font</code>属性与需要测量的字符串的值一致。第2点是<code>width</code>值有一点点误差，我只测试了在<code>Chrome</code>中的情况，误差如下。</p><ul><li>中文，<code>width</code>是整数，无误差。</li><li>英文，测量值略小于实际值0.01左右，实际值&#x3D;测量值的四舍五入保留2位小数再向上取整保留2位小数。</li><li>数字，测量值略小于实际值0.01左右，实际值&#x3D;测量值的四舍五入保留2位小数再向上取整保留2位小数。<br>比如测量值是85.7109，实际值是85.72。测量值是62.1796875，实际值是62.19。</li></ul><h1 id="基线相关的基本概念"><a href="#基线相关的基本概念" class="headerlink" title="基线相关的基本概念"></a>基线相关的基本概念</h1><p><code>measureText</code>的返回值是<code>TextMetrics</code>对象，它的属性除了<code>width</code>，还有一些是与基线、顶线相关的值，下面先了解一下相关概念。借用一下别人的图片。</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/71bf2577b6bd43ad84d11966bd6ac5a1~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="line.jfif"></p><ul><li>基线，x的下沿</li><li>内容区，从顶线到底线的区域</li><li>行高，内容区+上下空白区域的高度，等于相邻行的基线之间的距离</li><li>行距，从上一行基线到下一行顶线的距离</li><li>行内框，内容区+上下空白区域，它的高度就是<code>line-height</code>指定的高度</li><li>行框，一行内多个字符串的行内框的最大值</li></ul><p>接下来了解一下<code>TextMetrics</code>对象其他属性的含义。<br><code>ctx</code>的<code>textBaseline</code>指定文字在垂直方向的对齐方式，文本基线的位置，之前那个基线(x的下沿)是标准的字母基线。</p><ul><li>fontBoundingBoxAscent，从文本基线到行框顶部的距离</li><li>fontBoundingBoxDescent，从文本基线到行框底部的距离</li><li>actualBoundingBoxAscent，从文本基线到顶线的距离</li><li>actualBoundingBoxDescent，从文本基线到底线的距离</li><li>actualBoundingBoxLeft，从水平对齐方式的对齐点到行框最左边的距离</li><li>actualBoundingBoxRight，从水平对齐方式的对齐点到行框最右边的距离</li></ul><p>总结，前4个属性暂不清楚有什么使用场景，后面2个属性可以用来计算文本宽度，<code>MDN</code>推荐用这2个值相加来获取倾斜字符串的绝对宽度。如果不是斜体，我推荐用<code>width</code>。</p><h1 id="了解测量文本可以解决什么问题"><a href="#了解测量文本可以解决什么问题" class="headerlink" title="了解测量文本可以解决什么问题"></a>了解测量文本可以解决什么问题</h1><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><p>最常见的就是一行中图片和文字如何垂直居中。<br>默认是基于基线对齐的，设置为基于中线就可以做到垂直居中了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">img</span> &#123;</span><br><span class="line">    <span class="attr">width</span>: 30px;</span><br><span class="line">    vertical-<span class="attr">align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">name</span> &#123;</span><br><span class="line">    vertical-<span class="attr">align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片下方有空白区域"><a href="#图片下方有空白区域" class="headerlink" title="图片下方有空白区域"></a>图片下方有空白区域</h3><p>这段空白就是底线到行框的距离，行框的大小又取决于行高，所以设置<code>line-height</code>或<code>font-size</code>为0即可。</p><h1 id="measureText的应用场景"><a href="#measureText的应用场景" class="headerlink" title="measureText的应用场景"></a>measureText的应用场景</h1><h3 id="动态调整文字大小"><a href="#动态调整文字大小" class="headerlink" title="动态调整文字大小"></a>动态调整文字大小</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getFontSize</span> = (<span class="params">str, parentWidth</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">  context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width &#125; = context.<span class="title function_">measureText</span>(str);</span><br><span class="line">  <span class="keyword">if</span> (parentWidth - width &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">14</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">16</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如用户拖拽某个卡片大小时，或某个容器的字符串不固定长度时就可以这样来调整<code>font-size</code>。</p><h3 id="绝对定位的不定长文本水平居中"><a href="#绝对定位的不定长文本水平居中" class="headerlink" title="绝对定位的不定长文本水平居中"></a>绝对定位的不定长文本水平居中</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getTextPos</span> = (<span class="params">str, parentWidth</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">  context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width &#125; = context.<span class="title function_">measureText</span>(str);</span><br><span class="line">  <span class="keyword">return</span> (parentWidth - width) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">textDom.<span class="property">style</span>.<span class="property">left</span> = <span class="title function_">getTextPos</span>(<span class="string">&#x27;abcdefg中文&#x27;</span>, parentDom.<span class="property">width</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure><p>正常情况下，就算是不定长文本也可以设置<code>text-align: center</code>来水平居中。但，如果这段不定长文本是绝对定位的就需要计算一下应该设置的位置。</p><h3 id="判断字符串会不会容器范围"><a href="#判断字符串会不会容器范围" class="headerlink" title="判断字符串会不会容器范围"></a>判断字符串会不会容器范围</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isBeyond</span> = (<span class="params">str, parentWidth</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">  context.<span class="property">font</span> = <span class="string">&#x27;16px Microsoft YaHei&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; width &#125; = context.<span class="title function_">measureText</span>(str);</span><br><span class="line">  <span class="keyword">return</span> width - parentWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>需要获取文本宽度的情况可以考虑这个方法。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次开发node接口-干货总结</title>
      <link href="/2023/10/17/node-api/"/>
      <url>/2023/10/17/node-api/</url>
      
        <content type="html"><![CDATA[<p>技术栈：<code>node</code> + <code>express</code> + <code>mongoose</code><br><a href="https://github.com/chendx97/node-template">git地址</a>，可直接使用。</p><h1 id="nodemon-热更新"><a href="#nodemon-热更新" class="headerlink" title="nodemon 热更新"></a>nodemon 热更新</h1><p>使用<code>nodemon</code>启动项目，可以在修改代码时不用重新启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装</span><br><span class="line">npm i nodemon</span><br></pre></td></tr></table></figure><p>安装之后，修改启动命令，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon index.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h2><p><code>body-parser</code>解析请求参数，使我们可以通过<code>req.body.xx</code>访问参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br></pre></td></tr></table></figure><h2 id="cookie-parser"><a href="#cookie-parser" class="headerlink" title="cookie-parser"></a>cookie-parser</h2><p><code>cookie-parser</code>解析请求携带的<code>cookie</code>，使我们可以通过<code>req.cookies</code>访问<code>cookie</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> email = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">cookies</span>[config.<span class="property">cookieName</span>]).<span class="property">email</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br></pre></td></tr></table></figure><h1 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h1><p>借助路由中间件，我们可以格式化接口返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routers/index.js</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">jsonSuccess</span> = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      <span class="attr">result</span>: data,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  res.<span class="property">jsonFail</span> = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">code</span>: <span class="number">500</span>,</span><br><span class="line">      <span class="attr">message</span>: message.<span class="property">message</span> || <span class="string">&#x27;服务器出了点问题&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h1 id="mongoose指令"><a href="#mongoose指令" class="headerlink" title="mongoose指令"></a>mongoose指令</h1><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p><code>find</code>查找所有符合条件的数据；<br><code>findOne</code>查找第一个符合条件的数据；<br><code>findById</code>查找符合条件的数据，查询条件为<code>id</code>；  </p><p><code>Model.find(conditions, [projection], [options], [callback])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="title function_">find</span>(</span><br><span class="line">    &#123;<span class="attr">age</span>:&#123;<span class="attr">$gte</span>:<span class="number">18</span>,<span class="attr">$lte</span>:<span class="number">80</span>&#125;&#125;, <span class="comment">// age字段大于等于18且小于等于80 的数据</span></span><br><span class="line">    &#123;<span class="attr">_id</span>:<span class="number">0</span>,<span class="attr">__v</span>:<span class="number">0</span>&#125;, <span class="comment">// 数据文档不返回_id和__v字段</span></span><br><span class="line">    &#123;<span class="attr">sort</span>:&#123;<span class="attr">age</span>:-<span class="number">1</span>&#125;&#125; <span class="comment">// 根据age字段以大到小顺序返回数据文档</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>$gte</code>是操作符，类似的操作符还有不少：   </p><ul><li><code>$eq</code> 相等  </li><li><code>$ne</code> 不相等   </li><li><code>$gt</code> 大于</li><li><code>$gte</code> 大于等于</li><li><code>$lt</code> 小于</li><li><code>$lte</code> 小于等于</li><li><code>$in</code> 与数组中任意一个匹配</li><li><code>$nin</code> 与数组中每一个都不匹配</li><li><code>$and</code> 满足数组中所有条件</li><li><code>$nor</code> 所有条件都不满足</li><li><code>$or</code> 满足数组的其中一个条件</li><li><code>$not</code> 不满足条件</li><li><code>$exists</code> 存在指定字段</li><li><code>$type</code> 属于指定类型</li><li><code>$all</code> 匹配包含查询数组所有条件的数组字段</li><li><code>$elemMatch</code> 匹配数组字段中的某个值满足指定的所有条件</li><li><code>$size</code> 匹配数组字段的<code>length</code> 与查询条件相同   Same as querySame as query conditions</li></ul><p><code>projection</code>指定查询结果包含或不包含哪些字段，也可以写成字符串：<code>&quot;-_id -__v&quot;</code>，不能包含不包含同时使用。<br><code>findOne</code>和<code>findById</code>的区别在于<code>id</code>为<code>undefined</code>的情况，<code>findOne(&#123; _id: undefined &#125;)</code>返回任意一条数据，<code>findById(undefined)</code>返回<code>null</code>。</p><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p><code>save([options], [options.safe], [options.validateBeforeSave], [fn])</code>增加一条，需要写实例化；<br><code>Model.create(doc(s), [callback])</code>增加一条或多条；<br><code>Model.insertMany(doc(s), [options], [callback])</code>增加多条；   </p><p><code>save()</code>的示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/user.js</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserSchema</span> = mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">unique</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, <span class="title class_">UserSchema</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserModel</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routers/user.js</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = <span class="built_in">require</span>(<span class="string">&#x27;../models/user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增项目</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(req.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">await</span> user.<span class="title function_">save</span>(); <span class="comment">// save</span></span><br><span class="line">    res.<span class="title function_">jsonSuccess</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.<span class="title function_">jsonFail</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><p><code>findOneAndDelete</code>找到第一个符合条件的并删除；<br><code>findByIdAndDelete</code>查询条件为<code>id</code>；<br><code>deleteMany</code>删除所有符合条件的；   </p><p><code>Model.findOneAndDelete(filter, options, callback)</code></p><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><p><code>findOneAndUpdate</code>和<code>findByIdAndUpdate</code>都是先查找然后再修改；<br><code>updateOne</code>也是查找符合条件的第一条数据并修改；<br><code>updateMany</code>是批量修改数据；  </p><p><code>Model.findOneAndUpdate(filter, update, [options], [callback])</code></p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> info = <span class="keyword">await</span> <span class="title class_">User</span>.<span class="title function_">findByIdAndUpdate</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">_id</span>: req.<span class="property">body</span>.<span class="property">id</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">$set</span>: &#123;</span><br><span class="line">            <span class="attr">pass</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="解析excel文件"><a href="#解析excel文件" class="headerlink" title="解析excel文件"></a>解析excel文件</h1><p>使用<code>multer</code>解析form-data数据，<a href="https://www.npmjs.com/package/multer">npm地址</a>。<br>使用<code>node-xlsx</code>解析excel，<a href="https://www.npmjs.com/package/node-xlsx">npm地址</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>();</span><br><span class="line"><span class="keyword">const</span> xlsx = <span class="built_in">require</span>(<span class="string">&#x27;node-xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;file&#x27;</span>), <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> sheets = xlsx.<span class="title function_">parse</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../test.xlsx&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> data = sheets[<span class="number">0</span>].<span class="property">data</span>; <span class="comment">// 二维数组</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用<code>req.file.mimetype</code>可以获取文件的<code>MIME type</code>，可以以此来判断文件类型，<code>excel</code>文件的<code>MIME type</code>是<code>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</code>或<code>application/vnd.ms-excel</code>。</p><h1 id="下载文件接口"><a href="#下载文件接口" class="headerlink" title="下载文件接口"></a>下载文件接口</h1><p>使用<code>sendFile</code>可以直接返回文件类型数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/download&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filePath = path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../test.xlsx&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">sendFile</span>(filePath);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    res.<span class="title function_">jsonFail</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleDownload</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/download&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">await</span> response.<span class="title function_">blob</span>();</span><br><span class="line">  <span class="title function_">saveAs</span>(blob, <span class="string">&#x27;test.xlsx&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="docker部署配置"><a href="#docker部署配置" class="headerlink" title="docker部署配置"></a>docker部署配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockefile文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Node.js的官方镜像作为基础 </span></span><br><span class="line">FROM node:14 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器中创建一个工作目录 </span></span><br><span class="line">WORKDIR /app </span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制应用程序文件到容器中 </span></span><br><span class="line">COPY package*.json ./ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖项 </span></span><br><span class="line">RUN npm install </span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制应用程序代码到容器中 </span></span><br><span class="line">COPY . . </span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露容器的端口 </span></span><br><span class="line">EXPOSE 3000 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义容器启动时运行的命令 </span></span><br><span class="line">CMD [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0到1实现一个npm库</title>
      <link href="/2023/10/11/npm-lib/"/>
      <url>/2023/10/11/npm-lib/</url>
      
        <content type="html"><![CDATA[<h1 id="项目的目录结构"><a href="#项目的目录结构" class="headerlink" title="项目的目录结构"></a>项目的目录结构</h1><p>首先创建一个空项目，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vue@lastest</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>然后把<code>components</code>从<code>src</code>中挪到根目录下，把<code>src</code>改名为<code>examples</code>，修改<code>index.html</code>中<code>main.ts</code>的路径。<br>具体的项目结构如下所示：</p><ul><li>components</li><li>examples</li><li>node_modules</li><li>public</li><li>index.html</li><li>package.json</li><li>vite.config.ts</li></ul><h1 id="导出组件"><a href="#导出组件" class="headerlink" title="导出组件"></a>导出组件</h1><p>在<code>components/index.ts</code>中定义导出的组件。<br>以下代码是导出单个组件，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyButton</span> <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyButtonPlugin</span> = &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app: App</span>) =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, <span class="title class_">MyButton</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyButtonPlugin</span>;</span><br></pre></td></tr></table></figure><p>如果有多个组件需要导出，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/Button/index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyButton</span> <span class="keyword">from</span> <span class="string">&#x27;./Button&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyButtonPlugin</span> = &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app: App</span>) =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, <span class="title class_">MyButton</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyButtonPlugin</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/index.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyButton</span> <span class="keyword">from</span> <span class="string">&quot;./Button&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyTable</span> <span class="keyword">from</span> <span class="string">&quot;./Table&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">components</span>: any = &#123;</span><br><span class="line">  <span class="title class_">MyButton</span>,</span><br><span class="line">  <span class="title class_">MyTable</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyUI</span> = &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">Vue: App</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(components).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">use</span>(components[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出多个组件，方便按需引入</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MyButton</span>, <span class="title class_">MyTable</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyUI</span>;</span><br></pre></td></tr></table></figure><p><em><code>app.use</code>用来安装插件，插件可以是具有<code>install</code>方法的对象，也可以是当作<code>install</code>方法的函数。</em></p><h1 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h1><p>在<code>examples/main.ts</code>中使用<code>app.use</code>来安装插件，然后就可以全局使用了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整个引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyUI</span> <span class="keyword">from</span> <span class="string">&#x27;../components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">MyUI</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyButton</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">MyButton</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">&lt;my-button /&gt;</span><br></pre></td></tr></table></figure><h1 id="打包组件库"><a href="#打包组件库" class="headerlink" title="打包组件库"></a>打包组件库</h1><p>首先修改<code>package.json</code>文件，去掉<code>private</code>字段，添加<code>main</code>字段，<code>files</code>字段，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;dist/index.umd.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="string">&quot;components&quot;</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>然后修改<code>vite.config.ts</code>配置，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;components&quot;</span>),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;MyUI&quot;</span>,</span><br><span class="line">      <span class="attr">fileName</span>: <span class="function">(<span class="params">format, fileName</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;fileName&#125;</span>.<span class="subst">$&#123;format&#125;</span>.js`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">globals</span>: &#123;</span><br><span class="line">          <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>测试打包后的文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;../dist/index.es.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../dist/style.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(test);</span><br></pre></td></tr></table></figure><h1 id="发布库"><a href="#发布库" class="headerlink" title="发布库"></a>发布库</h1><p>如果没有<code>npm</code>账号需要先注册一下。<br>如果<code>npm</code>源不是默认源，需要修改为默认源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>注：每次<code>push</code>的时候都要修改<code>package.json</code>中的<code>version</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇源码阅读之fetch-event-source</title>
      <link href="/2023/09/16/fetch-event-source/"/>
      <url>/2023/09/16/fetch-event-source/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终于遇到一个简单的库来学习它的源码了。这个项目只有2个主要文件，代码加起来不到500行，是真的很mini了。<br>客户端向服务端发起请求用<code>xhr</code>或<code>fetch</code>，客户端与服务端双向通信用<code>websocket</code>，而服务端主动发起请求用<code>sse</code>。<code>chatGPT</code>就是用<code>sse</code>回复提问的。<br><code>window</code>中有一个叫<code>EventSource</code>的构造函数。一个<code>EventSource</code>实例会对服务器开启一个持久化的连接，以<code>text/event-stream</code>格式发送事件，此连接会一直保持开启直到通过调用<code>EventSource.close()</code>关闭。但使用<code>EventSource</code>时只能把参数加到<code>url</code>后面，而且也不能像<code>fetch</code>请求那样设置<code>header</code>等参数。借助<code>fetch-event-source</code>这个库就可以像发起<code>fetch</code>请求一样发起服务器单向通信请求。</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/12dd0f1f322e466893e0def92d4d8f1e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="1.webp"></p><h1 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h1><p><code>index.ts</code>是入口文件，里面只有2行代码，导出了<code>fetch.ts</code>和<code>parse.ts</code>中部分变量和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; fetchEventSource, <span class="title class_">FetchEventSourceInit</span>, <span class="title class_">EventStreamContentType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./fetch&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">EventSourceMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./parse&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>export &#123;...&#125; from &#39;xx&#39;</code>其实是<code>import</code> + <code>export</code>的缩写。、<br>上面的代码其实就是下面代码的缩写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fetchEventSource, <span class="title class_">FetchEventSourceInit</span>, <span class="title class_">EventStreamContentType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./fetch&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EventSourceMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./parse&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">fetchEventSource,</span><br><span class="line"><span class="title class_">FetchEventSourceInit</span>,</span><br><span class="line"><span class="title class_">EventStreamContentType</span>,</span><br><span class="line"><span class="title class_">EventSourceMessage</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="发起请求"><a href="#发起请求" class="headerlink" title="发起请求"></a>发起请求</h1><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/569c4d3e662449c594ca9b57531af51e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="1.5.webp"></p><ol><li><p>首先定义了变量<code>EventStreamContentType</code>，它的值是<code>sse</code>的<code>MIME Type</code>。它在2个地方使用。第一处是发起请求时设置<code>headers.accept</code>，告诉服务器只接受**<code>text/event-stream</code>**格式的数据。第2处是在连接建立时判断<code>response.headers.get(&#39;content-type&#39;)</code>是否等于<code>EventStreamContentType</code>的值，如果不是的话就抛出一个错误，声明期待的类型是<code>text/event-stream</code>。</p></li><li><p>接下来定义了变量<code>DefaultRetryInterval</code>，<code>sse</code>有<strong>自动重连</strong>机制，这里定义了每次重连的默认间隔为1s。然后定义了变量<code>LastEventId</code>，表示上一次事件的id，添加在<code>headers</code>中发送到服务端。</p></li><li><p>接下来定义了一个类型<code>FetchEventSourceInit</code>，它声明了<code>fetchEventSource</code>的第2个参数的类型。参数一共有7个。<br><code>headers</code> 请求头。<br><code>onopen</code> 连接建立时的回调函数，如果没有设置会调用默认的<code>defaultOnOpen</code>，这个默认回调里进行了返回值类型判断。<br><code>onmessage</code>每次收到消息时的回调函数，参数是消息对象，它的类型就是<code>parse.ts</code>中定义的<code>EventSourceMessage</code>。<br><code>onclose</code> 连接关闭时的回调函数。<br><code>onerror</code>连接发送错误时的回调函数，如果没有指定这个回调或返回<code>undefined</code>就会发起重新连接请求。<br><code>openWhenHidden</code> 默认为<code>false</code>，监听<code>visibilitychange</code>，当页面不可见时关闭连接，当页面重新可见时重新打开连接。<br><code>fetch</code>发起请求的方法，默认为<code>window.fetch</code>。  </p><p><code>Record&lt;string, string&gt;</code>等价于<code>&#123;[key: string]: string&#125;</code><br><code>Promise&lt;void&gt;</code>定义了一个异步函数，返回值是<code>void</code><br><code>typeof fetch</code> 获取<code>fetch</code>的类型，<code>typeof</code>后面跟的是变量，表示类型定义  </p></li><li><p>接下来就是最重要的<code>fetchEventSource</code>，它是一个异步函数，接受2个参数：<code>url</code>和<code>FetchEventSourceInit</code>类型的对象。<br>在这个方法中，首先定义了接受的媒体类型。然后添加监听<code>visibilitychange</code>事件，然后添加监听<code>abort</code>事件供使用者可以手动打断连接，然后发起连接，拿到返回值后将返回值传递给<code>onopen</code>，然后调用<code>getBytes</code>解析返回值，解析之后关闭连接。<br>用<code>try...catch</code>包裹发起连接和解析返回值以及关闭连接的过程，如果捕获到错误且不是主动打断的就发起重连。<br>再说一下主动打断连接这里，<code>fetchEventSource</code>的第2个参数可以传入一个信号<code>signal</code>，这个属性在<code>FetchEventSourceInit</code>中没有定义。借助<code>AbortController</code>中断连接，具体信息可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/AbortController">AbortController-MDN</a>。</p></li></ol><p><code>??</code>类似<code>||</code>，相同点在于根据前面的值判断返回前面的还是后面的，不同点在于<code>??</code>的第一个值为<code>null</code>或<code>undefined</code>时返回第二个值，<code>||</code>会将第一个值先转换为布尔值。比如</p><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 ?? 2 // 0</span><br><span class="line">0 || 2 // 2</span><br></pre></td></tr></table></figure></code></pre><p>5. <code>defaultOnOpen</code>定义默认<code>onopen</code>回调，主要是检查返回值类型。</p><h1 id="解析消息"><a href="#解析消息" class="headerlink" title="解析消息"></a>解析消息</h1><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/f8f916378b15441497a3b83ca5ad0fd5~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="2.PNG"><br>首先使用<code>response.body</code>来获取响应的主体内容，并通过<code>getBytes</code>函数将其转换为字节数组。然后，使用<code>getLines</code>函数将字节数组拆分成行，并使用<code>getMessages</code>函数将每行解析为事件消息。</p><h2 id="处理ReadableStream数据"><a href="#处理ReadableStream数据" class="headerlink" title="处理ReadableStream数据"></a>处理ReadableStream数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了一个数据读取器</span></span><br><span class="line"><span class="keyword">const</span> reader = response.<span class="title function_">getReader</span>();</span><br><span class="line"><span class="comment">// 创建了一个文本解码器</span></span><br><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> <span class="title class_">TextDecoder</span>();</span><br><span class="line"></span><br><span class="line">reader.<span class="title function_">read</span>().<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">processText</span>(<span class="params">&#123; done, value &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// Result 对象包含了两个属性：</span></span><br><span class="line">  <span class="comment">// done  - 当 stream 传完所有数据时则变成 true</span></span><br><span class="line">  <span class="comment">// value - 数据片段。当 done 为 true 时始终为 undefined</span></span><br><span class="line">  <span class="keyword">if</span> (done) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将字节流转换为字符</span></span><br><span class="line">  <span class="keyword">const</span> text = decoder.<span class="title function_">decode</span>(value)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内容</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 再次调用这个函数以读取更多数据</span></span><br><span class="line">  <span class="keyword">return</span> reader.<span class="title function_">read</span>().<span class="title function_">then</span>(processText);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="处理过程分析"><a href="#处理过程分析" class="headerlink" title="处理过程分析"></a>处理过程分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="title function_">getBytes</span>(response.<span class="property">body</span>!, <span class="title function_">getLines</span>(<span class="title function_">getMessages</span>(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">        <span class="comment">// store the id and send it back on the next retry:</span></span><br><span class="line">        headers[<span class="title class_">LastEventId</span>] = id;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// don&#x27;t send the last-event-id header anymore:</span></span><br><span class="line">        <span class="keyword">delete</span> headers[<span class="title class_">LastEventId</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="function"><span class="params">retry</span> =&gt;</span> &#123;</span><br><span class="line">    retryInterval = retry;</span><br><span class="line">&#125;, onmessage)));</span><br></pre></td></tr></table></figure><p>首先执行的是<code>getBytes</code>方法，它创建一个读取器，用<code>while</code>循环读取流数据，每读取一段就执行<code>onChunk</code>解析流数据，<code>onChunk</code>就是在<code>fetch.ts</code>中<code>getLines</code>的返回值。<br><code>onChunk</code>将字节块按行分割，并将每行的字节子数组和字段长度传递给<code>onLine</code>回调函数。<code>onLine</code>则是<code>getMessages</code>的返回值。<br><code>getMessages</code>创建了一个解码器，返回一个名为onLine的函数，用于处理每个传入的行数据。它将行的字节子数组解码为字符串，并根据字段的类型进行相应的处理。比如，如果字段是<code>data</code>，它会将值追加到<code>message.data</code>中，如果<code>message.data</code>已经存在，则在原有值的基础上添加新值，并使用换行符分隔。<br>将字节流先按行分割再解析是为了更好的处理数据，因为数据都是<code>field:value</code>格式的。</p><p><code>TextDecoder</code>表示一个文本解码器，可以将字节流数据转换成指定码位流，默认是utf-8。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在调试这个库的时候，在<code>html</code>中引入打包后的<code>esm</code>文件会报错文件找不到，因为文件名没有添加后缀。<br>接口返回值的类型必须是<code>text/event-stream</code>类型的，就算是流数据也不行。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>getBytes</code>的第2个参数是<code>getLines</code>的返回值，<code>getLines</code>的参数又是<code>getMessages</code>的返回值，嵌套的比较深。<br><code>onChunk</code>将字节块切割成一行一行的字节，涉及字节数据的知识。</p>]]></content>
      
      
      <categories>
          
          <category> 源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用canvas实现一个简单的画板</title>
      <link href="/2023/09/13/draw-board/"/>
      <url>/2023/09/13/draw-board/</url>
      
        <content type="html"><![CDATA[<h2 id="1-画板的功能"><a href="#1-画板的功能" class="headerlink" title="1.画板的功能"></a>1.画板的功能</h2><ul><li>修改画笔颜色；</li><li>修改画笔粗细；</li><li>橡皮擦；</li><li>重置画板；</li><li>撤销上一步；</li><li>保存成图片；</li></ul><h2 id="2-所需知识"><a href="#2-所需知识" class="headerlink" title="2.所需知识"></a>2.所需知识</h2><p><code>Element.getBoundingClientRect()</code> 方法返回元素的大小及其相对于视口的位置。<br><code>ctx.moveTo(x, y)</code> 将一个新的子路径的起始点移动到(x，y)坐标<br><code>ctx.lineTo(x, y)</code> 使用直线连接子路径的终点到x，y坐标</p><h2 id="3-一步步实现"><a href="#3-一步步实现" class="headerlink" title="3.一步步实现"></a>3.一步步实现</h2><h4 id="第一步，实现基本功能，可以画出来鼠标路径；"><a href="#第一步，实现基本功能，可以画出来鼠标路径；" class="headerlink" title="第一步，实现基本功能，可以画出来鼠标路径；"></a>第一步，实现基本功能，可以画出来鼠标路径；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=&quot;myCanvas&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</span><br><span class="line"></span><br><span class="line">class Board &#123;</span><br><span class="line">  constructor(id) &#123;</span><br><span class="line">    this.canvas = document.getElementById(id);</span><br><span class="line">    this.context = this.canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">    this.isDrawing = false;</span><br><span class="line">    this.posX = 0;</span><br><span class="line">    this.posY = 0;</span><br><span class="line">    this.init();</span><br><span class="line">  &#125;</span><br><span class="line">  init() &#123;</span><br><span class="line">    const bindDown = this.handleMouseDown.bind(this);</span><br><span class="line">    const bindMove = this.handleMouseMove.bind(this);</span><br><span class="line">    this.canvas.addEventListener(&#x27;mousedown&#x27;, bindDown);</span><br><span class="line">    this.canvas.addEventListener(&#x27;mousemove&#x27;, bindMove);</span><br><span class="line">    window.addEventListener(&#x27;mouseup&#x27;, () =&gt; &#123;</span><br><span class="line">      this.isDrawing = false;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    const rect = this.canvas.getBoundingClientRect();</span><br><span class="line">    this.posX = e.clientX - rect.left;</span><br><span class="line">    this.posY = e.clientY - rect.top;</span><br><span class="line">    this.isDrawing = true;</span><br><span class="line">  &#125;</span><br><span class="line">  handleMouseMove(e) &#123;</span><br><span class="line">    if (this.isDrawing === true) &#123;</span><br><span class="line">      const rect = this.canvas.getBoundingClientRect();</span><br><span class="line">      this.drawLine(this.context, this.posX, this.posY,</span><br><span class="line"> e.clientX - rect.left, e.clientY - rect.top);</span><br><span class="line">      this.posX = e.clientX - rect.left;</span><br><span class="line">      this.posY = e.clientY - rect.top;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  drawLine(context, x1, y1, x2, y2) &#123;</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.strokeStyle = &#x27;black&#x27;;</span><br><span class="line">    context.lineWidth = 1;</span><br><span class="line">    context.moveTo(x1, y1);</span><br><span class="line">    context.lineTo(x2, y2);</span><br><span class="line">    context.stroke();</span><br><span class="line">    context.closePath();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">new Board(&#x27;myCanvas&#x27;);</span><br></pre></td></tr></table></figure><h4 id="第二步，可以修改画笔颜色；"><a href="#第二步，可以修改画笔颜色；" class="headerlink" title="第二步，可以修改画笔颜色；"></a>第二步，可以修改画笔颜色；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=&quot;colorPicker&quot; type=&quot;color&quot; /&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;colorPicker&#x27;).addEventListener(&#x27;change&#x27;, e =&gt; &#123;</span><br><span class="line">      b.changeColor(e.target.value);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    class Board &#123;</span><br><span class="line">        constructor(id, color = &#x27;#000&#x27;) &#123;</span><br><span class="line">              this.penColor = color; </span><br><span class="line">        &#125;  </span><br><span class="line">        drawLine(context, x1, y1, x2, y2) &#123;</span><br><span class="line">          context.strokeStyle = this.penColor;          </span><br><span class="line">        &#125;</span><br><span class="line">        changeColor(color) &#123;</span><br><span class="line">        this.penColor = color;</span><br><span class="line">      &#125;              </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="第三步，修改画笔粗细；"><a href="#第三步，修改画笔粗细；" class="headerlink" title="第三步，修改画笔粗细；"></a>第三步，修改画笔粗细；</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.lineWidth = number;</span><br></pre></td></tr></table></figure><h4 id="第四步，橡皮擦；"><a href="#第四步，橡皮擦；" class="headerlink" title="第四步，橡皮擦；"></a>第四步，橡皮擦；</h4><p><code>context.globalCompositeOperation = &#39;destination-out&#39;;</code><br>参照刮刮乐功能。</p><h4 id="第五步，重置画板；"><a href="#第五步，重置画板；" class="headerlink" title="第五步，重置画板；"></a>第五步，重置画板；</h4><p><code>context.clearRect(0, 0, width, height);</code></p><h4 id="第六步，撤销上一步；"><a href="#第六步，撤销上一步；" class="headerlink" title="第六步，撤销上一步；"></a>第六步，撤销上一步；</h4><p><code>this.canvas.toDataURL()</code><br>将当前canvas保存为base64的图片，存放在数组中。再设置一个索引，撤销&#x2F;恢复修改索引的值，从数组中取出对应的图片。</p><h4 id="第七步，保存为图片；"><a href="#第七步，保存为图片；" class="headerlink" title="第七步，保存为图片；"></a>第七步，保存为图片；</h4><p>创建一个a标签，href为toDataURL()生成的图片，模拟点击事件，点击a链接。</p><h3 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;opera&quot;&gt;</span><br><span class="line">    &lt;input id=&quot;colorPicker&quot; type=&quot;color&quot; /&gt;</span><br><span class="line">    &lt;select id=&quot;fontsizeSelect&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;5&quot;&gt;5&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button id=&quot;eraser&quot;&gt;橡皮擦&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;reset&quot;&gt;重置&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;revoke&quot;&gt;撤销&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;recover&quot;&gt;恢复&lt;/button&gt;</span><br><span class="line">    &lt;button id=&quot;saveAsPic&quot;&gt;保存为图片&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;canvas id=&quot;myCanvas&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"> class Board &#123;</span><br><span class="line">      constructor(id, color = &#x27;#000&#x27;, fontsize = 1) &#123;</span><br><span class="line">        this.canvas = document.getElementById(id);</span><br><span class="line">        this.context = this.canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">        this.isDrawing = false;</span><br><span class="line">        this.posX = 0;</span><br><span class="line">        this.posY = 0;</span><br><span class="line">        this.penColor = color;</span><br><span class="line">        this.fontsize = fontsize;</span><br><span class="line">        this.isErasing = false;</span><br><span class="line">        this.step = 0;</span><br><span class="line">        this.histroyList = [];</span><br><span class="line">        this.init();</span><br><span class="line">      &#125;</span><br><span class="line">      init() &#123;</span><br><span class="line">        const bindDown = this.handleMouseDown.bind(this);</span><br><span class="line">        const bindMove = this.handleMouseMove.bind(this);</span><br><span class="line">        this.canvas.addEventListener(&#x27;mousedown&#x27;, bindDown);</span><br><span class="line">        this.canvas.addEventListener(&#x27;mousemove&#x27;, bindMove);</span><br><span class="line">        window.addEventListener(&#x27;mouseup&#x27;, () =&gt; &#123;</span><br><span class="line">          this.isDrawing = false;</span><br><span class="line">        &#125;);</span><br><span class="line">        this.canvas.addEventListener(&#x27;mouseup&#x27;, () =&gt; &#123;</span><br><span class="line">          this.step++;</span><br><span class="line">          if (this.step &lt; this.histroyList.length) &#123;</span><br><span class="line">            this.histroyList.length = this.step;</span><br><span class="line">          &#125;</span><br><span class="line">          this.histroyList.push(this.canvas.toDataURL());</span><br><span class="line">        &#125;);</span><br><span class="line">        this.histroyList.push(this.canvas.toDataURL());</span><br><span class="line">      &#125;</span><br><span class="line">      handleMouseDown(e) &#123;</span><br><span class="line">        const rect = this.canvas.getBoundingClientRect();</span><br><span class="line">        this.posX = e.clientX - rect.left;</span><br><span class="line">        this.posY = e.clientY - rect.top;</span><br><span class="line">        this.isDrawing = true;</span><br><span class="line">      &#125;</span><br><span class="line">      handleMouseMove(e) &#123;</span><br><span class="line">        const rect = this.canvas.getBoundingClientRect();</span><br><span class="line">        if (this.isErasing) &#123;</span><br><span class="line">          this.context.globalCompositeOperation = &#x27;destination-out&#x27;;</span><br><span class="line">          this.context.beginPath();</span><br><span class="line">          this.context.arc(e.clientX - rect.left, e.clientY - rect.top,</span><br><span class="line"> 10, 0, Math.PI * 2);</span><br><span class="line">          this.context.fill();</span><br><span class="line">        &#125; else if (this.isDrawing === true) &#123;</span><br><span class="line">          this.drawLine(this.context, this.posX, this.posY,</span><br><span class="line"> e.clientX - rect.left, e.clientY - rect.top);</span><br><span class="line">          this.posX = e.clientX - rect.left;</span><br><span class="line">          this.posY = e.clientY - rect.top;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      drawLine(context, x1, y1, x2, y2) &#123;</span><br><span class="line">        context.beginPath();</span><br><span class="line">        context.strokeStyle = this.penColor;</span><br><span class="line">        context.lineWidth = this.fontsize;</span><br><span class="line">        context.moveTo(x1, y1);</span><br><span class="line">        context.lineTo(x2, y2);</span><br><span class="line">        context.stroke();</span><br><span class="line">        context.closePath();</span><br><span class="line">      &#125;</span><br><span class="line">      changeColor(color) &#123;</span><br><span class="line">        this.penColor = color;</span><br><span class="line">      &#125;</span><br><span class="line">      changeFontSize(size) &#123;</span><br><span class="line">        this.fontsize = size;</span><br><span class="line">      &#125;</span><br><span class="line">      switchEraseStatus() &#123;</span><br><span class="line">        this.isErasing = !this.isErasing;</span><br><span class="line">      &#125;</span><br><span class="line">      clearBoard() &#123;</span><br><span class="line">        this.context.clearRect(0, 0, window.myCanvas.width,</span><br><span class="line"> window.myCanvas.height);</span><br><span class="line">        this.step = 0;</span><br><span class="line">        this.histroyList = [];</span><br><span class="line">      &#125;</span><br><span class="line">      revoke() &#123;</span><br><span class="line">        if (this.step &gt; 0) &#123;</span><br><span class="line">          this.step--;</span><br><span class="line">          this.context.clearRect(0, 0, window.myCanvas.width, </span><br><span class="line">window.myCanvas.height);</span><br><span class="line">          let pic = new Image();</span><br><span class="line">          pic.src = this.histroyList[this.step];</span><br><span class="line">          pic.addEventListener(&#x27;load&#x27;, () =&gt; &#123;</span><br><span class="line">            this.context.drawImage(pic, 0, 0);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&#x27;不能继续撤销了&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      recover() &#123;</span><br><span class="line">        if (this.step &lt; this.histroyList.length - 1) &#123;</span><br><span class="line">          this.step++;</span><br><span class="line">          this.context.clearRect(0, 0, window.myCanvas.width,</span><br><span class="line">     window.myCanvas.height);</span><br><span class="line">          let pic = new Image();</span><br><span class="line">          pic.src = this.histroyList[this.step];</span><br><span class="line">          pic.addEventListener(&#x27;load&#x27;, () =&gt; &#123;</span><br><span class="line">            this.context.drawImage(pic, 0, 0);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.log(&#x27;不能继续恢复了&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      saveAsPic() &#123;</span><br><span class="line">        const el = document.createElement(&#x27;a&#x27;);</span><br><span class="line">        el.href = this.canvas.toDataURL();</span><br><span class="line">        el.download = &#x27;canvas&#x27;;</span><br><span class="line">        const event = new MouseEvent(&#x27;click&#x27;);</span><br><span class="line">        el.dispatchEvent(event);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    const b = new Board(&#x27;myCanvas&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window.colorPicker.addEventListener(&#x27;change&#x27;, e =&gt; &#123;</span><br><span class="line">      b.changeColor(e.target.value);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window.fontsizeSelect.addEventListener(&#x27;change&#x27;, e =&gt; &#123;</span><br><span class="line">      b.changeFontSize(window.fontsizeSelect.value);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window.eraser.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      b.switchEraseStatus();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window.reset.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      b.clearBoard();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window.revoke.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      b.revoke();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window.recover.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      b.recover();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window.saveAsPic.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      b.saveAsPic();</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-plus自动按需引入</title>
      <link href="/2023/09/13/element-plus-use/"/>
      <url>/2023/09/13/element-plus-use/</url>
      
        <content type="html"><![CDATA[<p>前言：使用<code>unplugin-vue-components</code>后，可以实现按需引入，而且也不用再使用<code>import</code>引入需要的组件，直接使用<code>&lt;el-button&gt;</code>等组件就可以。</p><h2 id="1-安装npm包"><a href="#1-安装npm包" class="headerlink" title="1.安装npm包"></a>1.安装npm包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i unplugin-vue-components unplugin-auto-import -D</span><br></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><p><code>vue.config.js</code>（这里是vuecli配置方法，其他脚手架需要参考文档）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const AutoImport = require(&#x27;unplugin-auto-import/webpack&#x27;)</span><br><span class="line">const Components = require(&#x27;unplugin-vue-components/webpack&#x27;)</span><br><span class="line">const &#123; ElementPlusResolver &#125; = require(&#x27;unplugin-vue-components/resolvers&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">configureWebpack: &#123;</span><br><span class="line">      plugins: [</span><br><span class="line">        AutoImport(&#123;</span><br><span class="line">          resolvers: [ElementPlusResolver()],</span><br><span class="line">        &#125;),</span><br><span class="line">        Components(&#123;</span><br><span class="line">          resolvers: [ElementPlusResolver()],</span><br><span class="line">        &#125;),</span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-具体使用"><a href="#3-具体使用" class="headerlink" title="3.具体使用"></a>3.具体使用</h2><p><code>app.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;el-button&gt;按钮&lt;/el-button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="4-确认是否按需引入"><a href="#4-确认是否按需引入" class="headerlink" title="4.确认是否按需引入"></a>4.确认是否按需引入</h2><p>首先，安装<code>webpack-bundle-analyzer</code>插件，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure><p>然后执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build --report</span><br></pre></td></tr></table></figure><p>不用做任何配置，就可以看到终端打印出来打包后各文件大小。</p><h2 id="如果想看详细的打包后文件的信息，可以在vue-config-js中做如下配置：然后打开地址http-127-0-0-1-8888就可以了。据我个人测试，完整引入时，打包后chunk-js文件大小为400k左右。按需引入后，打包后chunk-js文件大小为200k左右。-4-非中使用组件如果在ts文件中使用ELMessage等组件，仍需要手动引入，代码如下。"><a href="#如果想看详细的打包后文件的信息，可以在vue-config-js中做如下配置：然后打开地址http-127-0-0-1-8888就可以了。据我个人测试，完整引入时，打包后chunk-js文件大小为400k左右。按需引入后，打包后chunk-js文件大小为200k左右。-4-非中使用组件如果在ts文件中使用ELMessage等组件，仍需要手动引入，代码如下。" class="headerlink" title="如果想看详细的打包后文件的信息，可以在vue.config.js中做如下配置：然后打开地址http://127.0.0.1:8888就可以了。据我个人测试，完整引入时，打包后chunk.js文件大小为400k左右。按需引入后，打包后chunk.js文件大小为200k左右。## 4.非&lt;template&gt;中使用组件如果在ts文件中使用ELMessage等组件，仍需要手动引入，代码如下。"></a>如果想看详细的打包后文件的信息，可以在<code>vue.config.js</code>中做如下配置：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const BundleAnalyzerPlugin = require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">new BundleAnalyzerPlugin()</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后打开地址<code>http://127.0.0.1:8888</code>就可以了。<br>据我个人测试，完整引入时，打包后<code>chunk.js</code>文件大小为<code>400k</code>左右。按需引入后，打包后<code>chunk.js</code>文件大小为<code>200k</code>左右。<br>## 4.非<code>&lt;template&gt;</code>中使用组件<br>如果在ts文件中使用<code>ELMessage</code>等组件，仍需要手动引入，代码如下。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;</span><br><span class="line">import &#x27;element-plus/theme-chalk/el-message.css&#x27;</span><br></pre></td></tr></table></figure></h2><p>参考文章：<br><a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">element-plus</a><br><a href="https://github.com/antfu/unplugin-vue-components">unplugin-vue-components</a></p>]]></content>
      
      
      <categories>
          
          <category> 指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element-plus </tag>
            
            <tag> 按需引入 </tag>
            
            <tag> 自动引入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务端主动推送消息Server-client events(SSE)</title>
      <link href="/2023/09/13/sse/"/>
      <url>/2023/09/13/sse/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，用http可以实现从客户端请求服务端的消息，用websocket可以实现客户端和服务器的双向通信，但用SSE实现服务端主动推送的比较少。<br>SSE相当于http的优点是可以由服务端主动推送消息。SSE相当于websocket的优点是断开连接后可以自动重连。</p><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>消息统一推送</li><li>数据实时更新</li><li>代替轮询</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>node的话，可以用阮老师的例子<a href="https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html">node实现SSE</a></p><p>python可以参考下面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, Response</span><br><span class="line">import time</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">def message_to_send():</span><br><span class="line">    time.sleep(5)</span><br><span class="line">    return json.dumps(&#123;&quot;message&quot;: &quot;hello&quot;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;/stream&quot;)</span><br><span class="line">def stream():</span><br><span class="line">    def event_stream():</span><br><span class="line">        while True:</span><br><span class="line">            print(&quot;send&quot;)</span><br><span class="line">            yield &quot;data:  &#123;&#125;\n\n&quot;.format(message_to_send())</span><br><span class="line"></span><br><span class="line">    return Response(</span><br><span class="line">        event_stream(),</span><br><span class="line">        mimetype=&quot;text/event-stream&quot;,</span><br><span class="line">        headers=&#123;&quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;&#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="传递post参数"><a href="#传递post参数" class="headerlink" title="传递post参数"></a>传递post参数</h1><p>默认情况下，<code>sse</code>只能进行<code>get</code>请求，参数跟在url后面。借助<code>@microsoft/fetch-event-source</code>可以传递post参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetchEventSource</span>(<span class="string">&#x27;/api/sse&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>想要跨域需要设置<code>withCredentials: true</code>或服务端设置允许跨域。（<code>@microsoft/fetch-event-source</code>可以不用设置）</li><li>接口必须设置<code>mimetype</code>为<code>text/event-stream</code></li><li>接口返回的每条消息必须以<code>\n</code>结尾，最后一条消息以<code>\n\n</code>结尾</li><li>有连接个数限制，每个域名下好像是限制6个</li><li>如果想测试自动重连，可以先关闭服务端的服务再打开</li></ul>]]></content>
      
      
      <categories>
          
          <category> 请求 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刮刮乐效果原来如此简单</title>
      <link href="/2023/09/07/guaguale/"/>
      <url>/2023/09/07/guaguale/</url>
      
        <content type="html"><![CDATA[<h2 id="1-刮刮乐（橡皮擦）效果的核心api"><a href="#1-刮刮乐（橡皮擦）效果的核心api" class="headerlink" title="1.刮刮乐（橡皮擦）效果的核心api"></a>1.刮刮乐（橡皮擦）效果的核心api</h2><pre><code>ctx.globalCompositeOperation = type;</code></pre><p>设置要在绘制新形状时应用的合成操作的类型。<br>我们这里需要用到的类型是 <code>destination-out</code><br><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/e5c12874897c4199aabb4fd83d4bec25~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="1206102951-61b0b351184c4_fix732.webp"><br>此属性的详细信息：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation">MDN文档</a></p><h2 id="2-基础版刮刮乐功能"><a href="#2-基础版刮刮乐功能" class="headerlink" title="2.基础版刮刮乐功能"></a>2.基础版刮刮乐功能</h2><p>canvs 覆盖在图片上</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/0c8a90facb104af6b99b2ca35dfd941e~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="1658915698-61b0b4e96c7e7.webp"></p><pre><code>&lt;style&gt;    body &#123;      margin: 0;    &#125;    img &#123;      width: 400px;      height: 300px;      left: 200px;      position: absolute;      z-index: -1;    &#125;    canvas &#123;      margin-left: 200px;    &#125;  &lt;/style&gt;    &lt;img src=&quot;./test.jpg&quot; alt=&quot;pic&quot;/&gt;  &lt;canvas id=&quot;canvas&quot; width=&quot;400&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;</code></pre><!----><pre><code>&lt;script&gt;   let canvas = document.querySelector(&#39;#canvas&#39;);   let context = canvas.getContext(&#39;2d&#39;);   // 绘制涂层   context.beginPath();   context.fillStyle = &#39;grey&#39;;   context.fillRect(0, 0, 400, 300);   // 监听鼠标移动事件   canvas.addEventListener(&#39;mousemove&#39;, (e) =&gt; &#123;    // 当鼠标左键按下&amp;&amp;移动鼠标时，清除鼠标附近涂层    if (e.which === 1 &amp;&amp; e.button === 0) &#123;      const x = e.clientX, y = e.clientY;      context.globalCompositeOperation = &#39;destination-out&#39;;      context.beginPath();      // 清除以鼠标位置为圆心，半径为10px的圆的范围      context.arc(x - 200, y, 10, 0, Math.PI * 2);      context.fill();    &#125;   &#125;)  &lt;/script&gt;</code></pre><h2 id="3-进阶版刮刮乐功能"><a href="#3-进阶版刮刮乐功能" class="headerlink" title="3.进阶版刮刮乐功能"></a>3.进阶版刮刮乐功能</h2><p>进阶功能：<br>点击时，以当前位置为圆心刮开一部分区域；<br>刮开x百分比（可以自定义）后后显示全部，并且使用动画逐渐变淡；<br>调用第一次刮的回调方法和刮完的回调方法，可以传入或不传；<br>涂层上面可以显示自定义文字；</p><p><img src="https://cdn.jsdelivr.net/gh/chendx97/CPics/img/338e11a92b3741d18d5378f3f5481b76~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt="14236041-61b0b553e0efc.webp"></p><p>首先改为class形式，方便多次创建刮刮乐。</p><pre><code>class Scratch &#123;      constructor(id, &#123; maskColor = &#39;grey&#39;, cursorRadius = 10 &#125; = &#123;&#125;) &#123;        this.canvas = document.getElementById(&#39;canvas&#39;);        this.context = this.canvas.getContext(&#39;2d&#39;);        this.width = this.canvas.clientWidth;        this.height = this.canvas.clientHeight;        this.maskColor = maskColor; // 涂层颜色        this.cursorRadius = cursorRadius; // 光标半径        this.init();      &#125;      init() &#123;        // 添加涂层        this.addCoat();        let bindEarse = this.erase.bind(this);        this.canvas.addEventListener(&#39;mousedown&#39;, (e) =&gt; &#123;          // 按下左键          if (e.which === 1 &amp;&amp; e.button === 0) &#123;            // 擦掉涂层            this.canvas.addEventListener(&#39;mousemove&#39;, bindEarse);          &#125;        &#125;)        document.addEventListener(&#39;mouseup&#39;, () =&gt; &#123;          this.canvas.removeEventListener(&#39;mousemove&#39;, bindEarse);        &#125;)      &#125;      addCoat() &#123;        this.context.beginPath();        this.context.fillStyle = this.maskColor;        this.context.fillRect(0, 0, this.width, this.height);      &#125;      erase(e) &#123;        const x = e.clientX, y = e.clientY;        this.context.globalCompositeOperation = &#39;destination-out&#39;;        this.context.beginPath();        this.context.arc(x - this.width / 2, y, this.cursorRadius, 0, Math.PI * 2);        this.context.fill();      &#125;    &#125;    new Scratch(&#39;canvas&#39;);</code></pre><p>然后，记录鼠标位置，mouseup时判断是点击还是点击&amp;移动鼠标，如果是点击则以当前位置为圆心刮开一部分区域；</p><pre><code>this.canvas.addEventListener(&#39;mousedown&#39;, (e) =&gt; &#123;      this.posX = e.clientX;      this.posY = e.clientY;      ...&#125;) document.addEventListener(&#39;mouseup&#39;, (e) =&gt; &#123;    if (this.posX === e.clientX &amp;&amp; this.posY === e.clientY) &#123;      this.erase(e);    &#125;     ...&#125;)</code></pre><p>然后，判断刮开面积是否超过一半，如果是清空涂层；</p><pre><code>ImageData ctx.getImageData(sx, sy, sw, sh);</code></pre><p>sx：将要被提取的图像数据矩形区域的左上角 x 坐标。<br>sy：将要被提取的图像数据矩形区域的左上角 y 坐标。<br>sw：将要被提取的图像数据矩形区域的宽度。<br>sh：将要被提取的图像数据矩形区域的高度。</p><p>ImageData 对象，包含canvas给定的矩形图像数据。可以用来判断是否被刮开。<br>每4个元素表示一个像素点的rgba值，所以可以判断第4个的值是否小于256的一半即128，如果小于128即可视为透明（被刮开）。</p><p>清空指定区域内容：</p><pre><code>void ctx.clearRect(x, y, width, height);</code></pre><!----><pre><code>document.addEventListener(&#39;mouseup&#39;, (e) =&gt; &#123;   this.getScratchedPercentage();    if (this.currPerct &gt;= this.maxEraseArea) &#123;        this.context.clearRect(0, 0, this.width, this.height);    &#125;&#125;)getScratchedPercentage() &#123;    const pixels = this.context.getImageData(0, 0, this.width, this.height).data;    let transparentPixels = 0;    for (let i = 0; i &lt; pixels.length; i += 4) &#123;         if (pixels[i + 3] &lt; 128) &#123;            transparentPixels++;          &#125;    &#125;    this.currPerct = (transparentPixels / pixels.length * 4 * 100).toFixed(2);&#125;</code></pre><p>然后，设置第一次刮的回调方法和刮完的回调方法；</p><pre><code>constructor(id, &#123; maskColor = &#39;grey&#39;, cursorRadius = 10, maxEraseArea = 50,    firstEraseCbk = () =&gt; &#123; &#125;, lastEraseCbk = () =&gt; &#123; &#125; &#125; = &#123;&#125;) &#123;    ...    this.firstEraseCbk = firstEraseCbk; // 第一次刮的回调函数    this.lastEraseCbk = lastEraseCbk; // 刮开的回调函数&#125;this.canvas.addEventListener(&#39;mousedown&#39;, (e) =&gt; &#123;     if (this.currPerct === 0) &#123;        this.firstEraseCbk();    &#125;&#125;)document.addEventListener(&#39;mouseup&#39;, (e) =&gt; &#123;    if (this.currPerct &gt;= this.maxEraseArea) &#123;        this.context.clearRect(0, 0, this.width, this.height);        this.lastEraseCbk();    &#125;&#125;)</code></pre><p>然后，刮开全部时慢慢清空涂层，设置背景色渐变效果；<br><code>requestAnimationFrame</code> 做出来的动画更流畅<br>回调函数用闭包形式可以给回调函数传参</p><pre><code>document.addEventListener(&#39;mouseup&#39;, (e) =&gt; &#123;    if (this.currPerct &gt;= this.maxEraseArea) &#123;        this.done = true;        requestAnimationFrame(this.fadeOut(255));         this.lastEraseCbk();    &#125;&#125;)fadeOut(alpha) &#123;    return () =&gt; &#123;          this.context.save();          this.context.globalCompositeOperation = &#39;source-in&#39;;          this.context.fillStyle = this.context.fillStyle + (alpha -= 1).toString(16);          this.context.fillRect(0, 0, this.width, this.height);          this.context.restore();          // 到210已经看不到涂层了          if (alpha &gt; 210) &#123;            requestAnimationFrame(this.fadeOut(alpha));          &#125;     &#125;&#125;</code></pre><p>然后，初始化涂层的时候，再涂层上显示自定义文字；</p><pre><code>addCoat() &#123;        ...        if (this.text) &#123;          this.context.font = &#39;bold 48px serif&#39;;          this.context.fillStyle = &#39;#fff&#39;;          this.context.textAlign = &#39;center&#39;;          this.context.textBaseline = &#39;middle&#39;;          this.context.fillText(this.text, this.width / 2, this.height / 2);        &#125;&#125;</code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;  &lt;style&gt;    body &#123;      margin: 0;    &#125;    img &#123;      width: 400px;      height: 300px;      left: 200px;      position: absolute;      z-index: -1;    &#125;    canvas &#123;      margin-left: 200px;    &#125;  &lt;/style&gt;&lt;/head&gt;&lt;body&gt;  &lt;img src=&quot;./test.jpg&quot; alt=&quot;pic&quot; /&gt;  &lt;canvas id=&quot;canvas&quot; width=&quot;400&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;  &lt;script&gt;    class Scratch &#123;      constructor(id, &#123; maskColor = &#39;grey&#39;, cursorRadius = 10, maxEraseArea = 50, text = &#39;&#39;,        firstEraseCbk = () =&gt; &#123; &#125;, lastEraseCbk = () =&gt; &#123; &#125; &#125; = &#123;&#125;) &#123;        this.canvasId = id;        this.canvas = document.getElementById(id);        this.context = this.canvas.getContext(&#39;2d&#39;);        this.width = this.canvas.clientWidth;        this.height = this.canvas.clientHeight;        this.maskColor = maskColor; // 涂层颜色        this.cursorRadius = cursorRadius; // 光标半径        this.maxEraseArea = maxEraseArea; // 刮开多少后自动清空涂层        this.text = text;        this.firstEraseCbk = firstEraseCbk; // 第一次刮的回调函数        this.lastEraseCbk = lastEraseCbk; // 刮开的回调函数        this.currPerct = 0; // 当前刮开多少百分比        this.done = false; // 是否刮完        this.init();      &#125;      init() &#123;        // 添加涂层        this.addCoat();        let bindEarse = this.erase.bind(this);        this.canvas.addEventListener(&#39;mousedown&#39;, e =&gt; &#123;          if (this.done) &#123;            return;          &#125;          this.posX = e.clientX;          this.posY = e.clientY;          // 按下左键          if (e.which === 1 &amp;&amp; e.button === 0) &#123;            // 擦掉涂层            this.canvas.addEventListener(&#39;mousemove&#39;, bindEarse);          &#125;          if (this.currPerct === 0) &#123;            this.firstEraseCbk();          &#125;        &#125;)        document.addEventListener(&#39;mouseup&#39;, e =&gt; &#123;          if (this.done) &#123;            return;          &#125;          if (e.target.id !== this.canvasId) &#123;            return;          &#125;          if (this.posX === e.clientX &amp;&amp; this.posY === e.clientY) &#123;            this.erase(e);          &#125;          this.canvas.removeEventListener(&#39;mousemove&#39;, bindEarse);          this.getScratchedPercentage();          if (this.currPerct &gt;= this.maxEraseArea) &#123;            this.done = true;            requestAnimationFrame(this.fadeOut(255));            this.lastEraseCbk();          &#125;        &#125;)      &#125;      // 添加涂层      addCoat() &#123;        this.context.beginPath();        this.context.fillStyle = this.maskColor;        this.context.fillRect(0, 0, this.width, this.height);        // 绘制涂层上的文字        if (this.text) &#123;          this.context.font = &#39;bold 48px serif&#39;;          this.context.fillStyle = &#39;#fff&#39;;          this.context.textAlign = &#39;center&#39;;          this.context.textBaseline = &#39;middle&#39;;          this.context.fillText(this.text, this.width / 2, this.height / 2);        &#125;      &#125;      // 擦除某位置涂层      erase(e) &#123;        const x = e.clientX, y = e.clientY;        this.context.globalCompositeOperation = &#39;destination-out&#39;;        this.context.beginPath();        this.context.arc(x - this.width / 2, y, this.cursorRadius, 0, Math.PI * 2);        this.context.fill();      &#125;      // 计算被擦除的部分占全部的百分比      getScratchedPercentage() &#123;        const pixels = this.context.getImageData(0, 0, this.width, this.height).data;        let transparentPixels = 0;        for (let i = 0; i &lt; pixels.length; i += 4) &#123;          if (pixels[i + 3] &lt; 128) &#123;            transparentPixels++;          &#125;        &#125;        this.currPerct = (transparentPixels / pixels.length * 4 * 100).toFixed(2);      &#125;      // 清空涂层时淡出效果      fadeOut(alpha) &#123;        return () =&gt; &#123;          this.context.save();          this.context.globalCompositeOperation = &#39;source-in&#39;;          this.context.fillStyle = this.context.fillStyle + (alpha -= 1).toString(16);          this.context.fillRect(0, 0, this.width, this.height);          this.context.restore();          // 到210已经看不到涂层了          if (alpha &gt; 210) &#123;            requestAnimationFrame(this.fadeOut(alpha));          &#125;        &#125;      &#125;    &#125;    new Scratch(&#39;canvas&#39;, &#123; text: &#39;刮一刮&#39;, maxEraseArea: 10 &#125;);  &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
